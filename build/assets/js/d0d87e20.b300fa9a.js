"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1009],{7807:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/behavioral/visitor","title":"Visitor Pattern \ud83c\udfc3\u200d\u2642\ufe0f","description":"Definition: The Visitor pattern lets you separate algorithms from the objects on which they operate by defining a family of algorithms, encapsulating each one, and making them interchangeable at runtime.","source":"@site/docs/design-pattern/behavioral/visitor.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/visitor","permalink":"/docs/design-pattern/behavioral/visitor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Template Method Pattern \ud83d\udccb","permalink":"/docs/design-pattern/behavioral/template-method"},"next":{"title":"Abstract Factory Pattern \ud83c\udfed\ud83d\udd27","permalink":"/docs/design-pattern/creational/abstract-factory"}}');var s=r(4848),i=r(8453);const o={},l="Visitor Pattern \ud83c\udfc3\u200d\u2642\ufe0f",a={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Document Processing System",id:"document-processing-system",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"File System Scanner",id:"file-system-scanner",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Visitor Variations",id:"-visitor-variations",level:2},{value:"1. <strong>Generic Visitor</strong>",id:"1-generic-visitor",level:3},{value:"2. <strong>Intrusive Visitor</strong>",id:"2-intrusive-visitor",level:3},{value:"3. <strong>Hierarchical Visitor</strong>",id:"3-hierarchical-visitor",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"visitor-pattern-\ufe0f",children:"Visitor Pattern \ud83c\udfc3\u200d\u2642\ufe0f"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": The Visitor pattern lets you separate algorithms from the objects on which they operate by defining a family of algorithms, encapsulating each one, and making them interchangeable at runtime."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,s.jsx)(n.p,{children:"Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates."}),"\n",(0,s.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,s.jsx)(n.p,{children:"You have a complex object structure (like a composite tree) and want to perform various operations on it:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Adding Operations"}),": Need to add new operations without modifying existing classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Want compile-time type checking for operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of Concerns"}),": Keep operations separate from the data structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Traversal"}),": Need to perform complex operations across different object types"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Without the pattern, you'd have to add new methods to every class in the object structure for each new operation."}),"\n",(0,s.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,s.jsx)(n.p,{children:"The Visitor pattern suggests placing new behaviors into separate classes called visitors, rather than trying to integrate them into existing classes. The objects accept visitors and delegate operations to them."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Visitor Interface\r\n\u251c\u2500\u2500 +visitConcreteElementA(element): void\r\n\u251c\u2500\u2500 +visitConcreteElementB(element): void\r\n\r\nConcreteVisitor1, ConcreteVisitor2 implement Visitor\r\n\u251c\u2500\u2500 +visitConcreteElementA(element): void\r\n\u251c\u2500\u2500 +visitConcreteElementB(element): void\r\n\r\nElement Interface\r\n\u251c\u2500\u2500 +accept(visitor): void\r\n\r\nConcreteElementA, ConcreteElementB implement Element\r\n\u251c\u2500\u2500 +accept(visitor): void \u2192 visitor.visitConcreteElementA(this)\r\n\u251c\u2500\u2500 +specificOperationA(): void\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,s.jsx)(n.h3,{id:"document-processing-system",children:"Document Processing System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Visitor interface\r\nclass DocumentVisitor {\r\n  visitTextElement(element) {\r\n    throw new Error("visitTextElement() must be implemented");\r\n  }\r\n  \r\n  visitImageElement(element) {\r\n    throw new Error("visitImageElement() must be implemented");\r\n  }\r\n  \r\n  visitTableElement(element) {\r\n    throw new Error("visitTableElement() must be implemented");\r\n  }\r\n  \r\n  visitListElement(element) {\r\n    throw new Error("visitListElement() must be implemented");\r\n  }\r\n}\r\n\r\n// Element interface\r\nclass DocumentElement {\r\n  accept(visitor) {\r\n    throw new Error("accept() must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete elements\r\nclass TextElement extends DocumentElement {\r\n  constructor(content, style = {}) {\r\n    super();\r\n    this.content = content;\r\n    this.style = style;\r\n    this.type = \'text\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitTextElement(this);\r\n  }\r\n  \r\n  getWordCount() {\r\n    return this.content.split(/\\s+/).filter(word => word.length > 0).length;\r\n  }\r\n}\r\n\r\nclass ImageElement extends DocumentElement {\r\n  constructor(src, alt, width, height) {\r\n    super();\r\n    this.src = src;\r\n    this.alt = alt;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.type = \'image\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitImageElement(this);\r\n  }\r\n  \r\n  getSize() {\r\n    return this.width * this.height;\r\n  }\r\n}\r\n\r\nclass TableElement extends DocumentElement {\r\n  constructor(rows, headers = []) {\r\n    super();\r\n    this.rows = rows;\r\n    this.headers = headers;\r\n    this.type = \'table\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitTableElement(this);\r\n  }\r\n  \r\n  getCellCount() {\r\n    return this.rows.reduce((total, row) => total + row.length, 0);\r\n  }\r\n}\r\n\r\nclass ListElement extends DocumentElement {\r\n  constructor(items, ordered = false) {\r\n    super();\r\n    this.items = items;\r\n    this.ordered = ordered;\r\n    this.type = \'list\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitListElement(this);\r\n  }\r\n  \r\n  getItemCount() {\r\n    return this.items.length;\r\n  }\r\n}\r\n\r\n// Concrete visitor - HTML Renderer\r\nclass HTMLRenderer extends DocumentVisitor {\r\n  constructor() {\r\n    super();\r\n    this.result = \'\';\r\n  }\r\n  \r\n  visitTextElement(element) {\r\n    console.log(`\ud83d\udd8b\ufe0f Rendering text element: "${element.content.substring(0, 30)}..."`);\r\n    \r\n    let html = element.content;\r\n    \r\n    // Apply styles\r\n    if (element.style.bold) html = `<strong>${html}</strong>`;\r\n    if (element.style.italic) html = `<em>${html}</em>`;\r\n    if (element.style.underline) html = `<u>${html}</u>`;\r\n    if (element.style.color) html = `<span style="color: ${element.style.color}">${html}</span>`;\r\n    \r\n    this.result += `<p>${html}</p>\\n`;\r\n    return html;\r\n  }\r\n  \r\n  visitImageElement(element) {\r\n    console.log(`\ud83d\uddbc\ufe0f Rendering image element: ${element.src}`);\r\n    \r\n    const html = `<img src="${element.src}" alt="${element.alt}" width="${element.width}" height="${element.height}" />\\n`;\r\n    this.result += html;\r\n    return html;\r\n  }\r\n  \r\n  visitTableElement(element) {\r\n    console.log(`\ud83d\udcca Rendering table with ${element.rows.length} rows`);\r\n    \r\n    let html = \'<table border="1">\\n\';\r\n    \r\n    // Add headers\r\n    if (element.headers.length > 0) {\r\n      html += \'  <thead>\\n    <tr>\\n\';\r\n      element.headers.forEach(header => {\r\n        html += `      <th>${header}</th>\\n`;\r\n      });\r\n      html += \'    </tr>\\n  </thead>\\n\';\r\n    }\r\n    \r\n    // Add rows\r\n    html += \'  <tbody>\\n\';\r\n    element.rows.forEach(row => {\r\n      html += \'    <tr>\\n\';\r\n      row.forEach(cell => {\r\n        html += `      <td>${cell}</td>\\n`;\r\n      });\r\n      html += \'    </tr>\\n\';\r\n    });\r\n    html += \'  </tbody>\\n</table>\\n\';\r\n    \r\n    this.result += html;\r\n    return html;\r\n  }\r\n  \r\n  visitListElement(element) {\r\n    console.log(`\ud83d\udccb Rendering ${element.ordered ? \'ordered\' : \'unordered\'} list with ${element.items.length} items`);\r\n    \r\n    const tag = element.ordered ? \'ol\' : \'ul\';\r\n    let html = `<${tag}>\\n`;\r\n    \r\n    element.items.forEach(item => {\r\n      html += `  <li>${item}</li>\\n`;\r\n    });\r\n    \r\n    html += `</${tag}>\\n`;\r\n    this.result += html;\r\n    return html;\r\n  }\r\n  \r\n  getResult() {\r\n    return this.result;\r\n  }\r\n  \r\n  reset() {\r\n    this.result = \'\';\r\n  }\r\n}\r\n\r\n// Concrete visitor - Markdown Renderer\r\nclass MarkdownRenderer extends DocumentVisitor {\r\n  constructor() {\r\n    super();\r\n    this.result = \'\';\r\n  }\r\n  \r\n  visitTextElement(element) {\r\n    console.log(`\ud83d\udcdd Converting text to Markdown: "${element.content.substring(0, 30)}..."`);\r\n    \r\n    let markdown = element.content;\r\n    \r\n    // Apply markdown formatting\r\n    if (element.style.bold) markdown = `**${markdown}**`;\r\n    if (element.style.italic) markdown = `*${markdown}*`;\r\n    if (element.style.underline) markdown = `<u>${markdown}</u>`;\r\n    \r\n    this.result += `${markdown}\\n\\n`;\r\n    return markdown;\r\n  }\r\n  \r\n  visitImageElement(element) {\r\n    console.log(`\ud83d\uddbc\ufe0f Converting image to Markdown: ${element.src}`);\r\n    \r\n    const markdown = `![${element.alt}](${element.src})\\n\\n`;\r\n    this.result += markdown;\r\n    return markdown;\r\n  }\r\n  \r\n  visitTableElement(element) {\r\n    console.log(`\ud83d\udcca Converting table to Markdown`);\r\n    \r\n    let markdown = \'\';\r\n    \r\n    // Add headers\r\n    if (element.headers.length > 0) {\r\n      markdown += `| ${element.headers.join(\' | \')} |\\n`;\r\n      markdown += `| ${element.headers.map(() => \'---\').join(\' | \')} |\\n`;\r\n    }\r\n    \r\n    // Add rows\r\n    element.rows.forEach(row => {\r\n      markdown += `| ${row.join(\' | \')} |\\n`;\r\n    });\r\n    \r\n    markdown += \'\\n\';\r\n    this.result += markdown;\r\n    return markdown;\r\n  }\r\n  \r\n  visitListElement(element) {\r\n    console.log(`\ud83d\udccb Converting to Markdown ${element.ordered ? \'ordered\' : \'unordered\'} list`);\r\n    \r\n    let markdown = \'\';\r\n    element.items.forEach((item, index) => {\r\n      const prefix = element.ordered ? `${index + 1}. ` : \'- \';\r\n      markdown += `${prefix}${item}\\n`;\r\n    });\r\n    \r\n    markdown += \'\\n\';\r\n    this.result += markdown;\r\n    return markdown;\r\n  }\r\n  \r\n  getResult() {\r\n    return this.result;\r\n  }\r\n  \r\n  reset() {\r\n    this.result = \'\';\r\n  }\r\n}\r\n\r\n// Concrete visitor - Word Count Analyzer\r\nclass WordCountAnalyzer extends DocumentVisitor {\r\n  constructor() {\r\n    super();\r\n    this.totalWords = 0;\r\n    this.elementCounts = {};\r\n  }\r\n  \r\n  visitTextElement(element) {\r\n    const wordCount = element.getWordCount();\r\n    this.totalWords += wordCount;\r\n    this.elementCounts.text = (this.elementCounts.text || 0) + wordCount;\r\n    \r\n    console.log(`\ud83d\udcca Analyzing text: ${wordCount} words`);\r\n    return wordCount;\r\n  }\r\n  \r\n  visitImageElement(element) {\r\n    const altWords = element.alt ? element.alt.split(/\\s+/).length : 0;\r\n    this.totalWords += altWords;\r\n    this.elementCounts.images = (this.elementCounts.images || 0) + altWords;\r\n    \r\n    console.log(`\ud83d\udcca Analyzing image alt text: ${altWords} words`);\r\n    return altWords;\r\n  }\r\n  \r\n  visitTableElement(element) {\r\n    let tableWords = 0;\r\n    \r\n    // Count words in headers\r\n    element.headers.forEach(header => {\r\n      tableWords += header.split(/\\s+/).length;\r\n    });\r\n    \r\n    // Count words in cells\r\n    element.rows.forEach(row => {\r\n      row.forEach(cell => {\r\n        tableWords += String(cell).split(/\\s+/).length;\r\n      });\r\n    });\r\n    \r\n    this.totalWords += tableWords;\r\n    this.elementCounts.tables = (this.elementCounts.tables || 0) + tableWords;\r\n    \r\n    console.log(`\ud83d\udcca Analyzing table: ${tableWords} words`);\r\n    return tableWords;\r\n  }\r\n  \r\n  visitListElement(element) {\r\n    let listWords = 0;\r\n    element.items.forEach(item => {\r\n      listWords += String(item).split(/\\s+/).length;\r\n    });\r\n    \r\n    this.totalWords += listWords;\r\n    this.elementCounts.lists = (this.elementCounts.lists || 0) + listWords;\r\n    \r\n    console.log(`\ud83d\udcca Analyzing list: ${listWords} words`);\r\n    return listWords;\r\n  }\r\n  \r\n  getReport() {\r\n    return {\r\n      totalWords: this.totalWords,\r\n      breakdown: { ...this.elementCounts },\r\n      averagePerElement: this.totalWords / Object.keys(this.elementCounts).length\r\n    };\r\n  }\r\n  \r\n  reset() {\r\n    this.totalWords = 0;\r\n    this.elementCounts = {};\r\n  }\r\n}\r\n\r\n// Document class to hold elements\r\nclass Document {\r\n  constructor(title) {\r\n    this.title = title;\r\n    this.elements = [];\r\n  }\r\n  \r\n  addElement(element) {\r\n    this.elements.push(element);\r\n  }\r\n  \r\n  accept(visitor) {\r\n    console.log(`\ud83d\udcc4 Processing document: "${this.title}"`);\r\n    this.elements.forEach(element => element.accept(visitor));\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Document Processing Visitor Pattern Demo ===\\n");\r\n\r\nconsole.log("Creating sample document:");\r\nconsole.log("-".repeat(26));\r\n\r\n// Create document\r\nconst document = new Document("Sample Technical Report");\r\n\r\n// Add various elements\r\ndocument.addElement(new TextElement(\r\n  "Introduction to Modern Web Development", \r\n  { bold: true, color: \'blue\' }\r\n));\r\n\r\ndocument.addElement(new TextElement(\r\n  "This comprehensive guide covers the fundamentals of modern web development, including HTML5, CSS3, and JavaScript ES6+ features. We\'ll explore best practices, design patterns, and performance optimization techniques that every developer should know."\r\n));\r\n\r\ndocument.addElement(new ImageElement(\r\n  "web-dev-diagram.png", \r\n  "Web Development Technologies Diagram", \r\n  800, \r\n  400\r\n));\r\n\r\ndocument.addElement(new TableElement(\r\n  [\r\n    ["HTML5", "Markup Language", "Structure"],\r\n    ["CSS3", "Styling Language", "Presentation"], \r\n    ["JavaScript", "Programming Language", "Behavior"],\r\n    ["React", "Library", "UI Components"]\r\n  ],\r\n  ["Technology", "Type", "Purpose"]\r\n));\r\n\r\ndocument.addElement(new ListElement([\r\n  "Semantic HTML elements improve accessibility",\r\n  "CSS Grid and Flexbox for modern layouts",\r\n  "ES6+ features like arrow functions and modules",\r\n  "Component-based architecture with React"\r\n], true));\r\n\r\ndocument.addElement(new TextElement(\r\n  "Modern web development requires understanding of various technologies and how they work together to create compelling user experiences.",\r\n  { italic: true }\r\n));\r\n\r\nconsole.log(`\u2705 Created document with ${document.elements.length} elements\\n`);\r\n\r\nconsole.log("=".repeat(60) + "\\n");\r\n\r\nconsole.log("1. HTML Rendering:");\r\nconsole.log("-".repeat(18));\r\n\r\nconst htmlRenderer = new HTMLRenderer();\r\ndocument.accept(htmlRenderer);\r\n\r\nconsole.log("\\n\ud83d\udccb Generated HTML:");\r\nconsole.log("-".repeat(17));\r\nconsole.log(htmlRenderer.getResult());\r\n\r\nconsole.log("=".repeat(60) + "\\n");\r\n\r\nconsole.log("2. Markdown Conversion:");\r\nconsole.log("-".repeat(21));\r\n\r\nconst markdownRenderer = new MarkdownRenderer();\r\ndocument.accept(markdownRenderer);\r\n\r\nconsole.log("\\n\ud83d\udccb Generated Markdown:");\r\nconsole.log("-".repeat(21));\r\nconsole.log(markdownRenderer.getResult());\r\n\r\nconsole.log("=".repeat(60) + "\\n");\r\n\r\nconsole.log("3. Word Count Analysis:");\r\nconsole.log("-".repeat(21));\r\n\r\nconst analyzer = new WordCountAnalyzer();\r\ndocument.accept(analyzer);\r\n\r\nconst report = analyzer.getReport();\r\n\r\nconsole.log("\\n\ud83d\udcca Word Count Report:");\r\nconsole.log("-".repeat(20));\r\nconsole.log(`Total words: ${report.totalWords}`);\r\nconsole.log(`Average per element type: ${report.averagePerElement.toFixed(1)}`);\r\nconsole.log("\\nBreakdown by element type:");\r\nObject.entries(report.breakdown).forEach(([type, count]) => {\r\n  console.log(`  \u2022 ${type}: ${count} words`);\r\n});\r\n\r\nconsole.log("\\n" + "=".repeat(60) + "\\n");\r\n\r\nconsole.log("Performance Comparison:");\r\nconsole.log("-".repeat(23));\r\n\r\n// Performance test with multiple renders\r\nconst startTime = Date.now();\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n  htmlRenderer.reset();\r\n  markdownRenderer.reset();\r\n  analyzer.reset();\r\n  \r\n  document.accept(htmlRenderer);\r\n  document.accept(markdownRenderer);  \r\n  document.accept(analyzer);\r\n}\r\n\r\nconst endTime = Date.now();\r\nconst totalTime = endTime - startTime;\r\n\r\nconsole.log(`\u23f1\ufe0f Performance Results (100 iterations):`);\r\nconsole.log(`   Total time: ${totalTime}ms`);\r\nconsole.log(`   Average per document: ${(totalTime / 100).toFixed(2)}ms`);\r\nconsole.log(`   Average per visitor: ${(totalTime / 300).toFixed(2)}ms`);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,s.jsx)(n.h3,{id:"file-system-scanner",children:"File System Scanner"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// File system element interface\r\nclass FileSystemElement {\r\n  constructor(name, path) {\r\n    this.name = name;\r\n    this.path = path;\r\n    this.createdAt = new Date();\r\n  }\r\n  \r\n  accept(visitor) {\r\n    throw new Error("accept() must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete elements\r\nclass File extends FileSystemElement {\r\n  constructor(name, path, size, extension, content = \'\') {\r\n    super(name, path);\r\n    this.size = size;\r\n    this.extension = extension;\r\n    this.content = content;\r\n    this.type = \'file\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitFile(this);\r\n  }\r\n  \r\n  getContent() {\r\n    return this.content;\r\n  }\r\n  \r\n  getSizeInKB() {\r\n    return (this.size / 1024).toFixed(2);\r\n  }\r\n}\r\n\r\nclass Directory extends FileSystemElement {\r\n  constructor(name, path) {\r\n    super(name, path);\r\n    this.children = [];\r\n    this.type = \'directory\';\r\n  }\r\n  \r\n  addChild(element) {\r\n    this.children.push(element);\r\n  }\r\n  \r\n  accept(visitor) {\r\n    const result = visitor.visitDirectory(this);\r\n    \r\n    // Visit all children\r\n    this.children.forEach(child => child.accept(visitor));\r\n    \r\n    return result;\r\n  }\r\n  \r\n  getChildCount() {\r\n    return this.children.length;\r\n  }\r\n  \r\n  getTotalChildren() {\r\n    let total = this.children.length;\r\n    this.children.forEach(child => {\r\n      if (child instanceof Directory) {\r\n        total += child.getTotalChildren();\r\n      }\r\n    });\r\n    return total;\r\n  }\r\n}\r\n\r\nclass SymbolicLink extends FileSystemElement {\r\n  constructor(name, path, targetPath) {\r\n    super(name, path);\r\n    this.targetPath = targetPath;\r\n    this.type = \'symlink\';\r\n  }\r\n  \r\n  accept(visitor) {\r\n    return visitor.visitSymbolicLink(this);\r\n  }\r\n  \r\n  getTarget() {\r\n    return this.targetPath;\r\n  }\r\n}\r\n\r\n// Visitor interface\r\nclass FileSystemVisitor {\r\n  visitFile(file) {\r\n    throw new Error("visitFile() must be implemented");\r\n  }\r\n  \r\n  visitDirectory(directory) {\r\n    throw new Error("visitDirectory() must be implemented");\r\n  }\r\n  \r\n  visitSymbolicLink(symlink) {\r\n    throw new Error("visitSymbolicLink() must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete visitor - Size Calculator\r\nclass SizeCalculatorVisitor extends FileSystemVisitor {\r\n  constructor() {\r\n    super();\r\n    this.totalSize = 0;\r\n    this.fileCounts = {};\r\n    this.currentDepth = 0;\r\n  }\r\n  \r\n  visitFile(file) {\r\n    this.totalSize += file.size;\r\n    this.fileCounts[file.extension] = (this.fileCounts[file.extension] || 0) + 1;\r\n    \r\n    console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udcc4 ${file.name} (${file.getSizeInKB()} KB)`);\r\n    return file.size;\r\n  }\r\n  \r\n  visitDirectory(directory) {\r\n    console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udcc1 ${directory.name}/`);\r\n    this.currentDepth++;\r\n    \r\n    const startSize = this.totalSize;\r\n    // Children will be visited automatically\r\n    return () => {\r\n      this.currentDepth--;\r\n      const dirSize = this.totalSize - startSize;\r\n      console.log(`${\'  \'.repeat(this.currentDepth)}   \u2514\u2500 Directory size: ${(dirSize / 1024).toFixed(2)} KB`);\r\n      return dirSize;\r\n    };\r\n  }\r\n  \r\n  visitSymbolicLink(symlink) {\r\n    console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udd17 ${symlink.name} \u2192 ${symlink.targetPath}`);\r\n    return 0; // Symlinks don\'t contribute to size\r\n  }\r\n  \r\n  getReport() {\r\n    return {\r\n      totalSize: this.totalSize,\r\n      totalSizeKB: (this.totalSize / 1024).toFixed(2),\r\n      totalSizeMB: (this.totalSize / (1024 * 1024)).toFixed(2),\r\n      fileTypeCounts: { ...this.fileCounts },\r\n      totalFiles: Object.values(this.fileCounts).reduce((sum, count) => sum + count, 0)\r\n    };\r\n  }\r\n}\r\n\r\n// Concrete visitor - Security Scanner\r\nclass SecurityScannerVisitor extends FileSystemVisitor {\r\n  constructor() {\r\n    super();\r\n    this.issues = [];\r\n    this.scannedFiles = 0;\r\n    this.suspiciousPatterns = [\r\n      /password/i,\r\n      /secret/i,\r\n      /api[_-]?key/i,\r\n      /token/i,\r\n      /credentials/i,\r\n      /private[_-]?key/i\r\n    ];\r\n    this.dangerousExtensions = [\'.exe\', \'.bat\', \'.cmd\', \'.scr\', \'.pif\'];\r\n  }\r\n  \r\n  visitFile(file) {\r\n    this.scannedFiles++;\r\n    \r\n    console.log(`\ud83d\udd0d Scanning: ${file.name}`);\r\n    \r\n    // Check for dangerous file extensions\r\n    if (this.dangerousExtensions.includes(file.extension)) {\r\n      this.issues.push({\r\n        type: \'dangerous_extension\',\r\n        severity: \'high\',\r\n        path: file.path,\r\n        message: `Potentially dangerous file extension: ${file.extension}`\r\n      });\r\n    }\r\n    \r\n    // Check for suspicious content patterns\r\n    this.suspiciousPatterns.forEach(pattern => {\r\n      if (pattern.test(file.content) || pattern.test(file.name)) {\r\n        this.issues.push({\r\n          type: \'sensitive_data\',\r\n          severity: \'medium\',\r\n          path: file.path,\r\n          message: `Potentially sensitive information found matching pattern: ${pattern}`\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Check for large files that might be suspicious\r\n    if (file.size > 100 * 1024 * 1024) { // > 100MB\r\n      this.issues.push({\r\n        type: \'large_file\',\r\n        severity: \'low\',\r\n        path: file.path,\r\n        message: `Unusually large file: ${file.getSizeInKB()} KB`\r\n      });\r\n    }\r\n    \r\n    return this.issues.length;\r\n  }\r\n  \r\n  visitDirectory(directory) {\r\n    console.log(`\ud83d\udcc1 Entering directory: ${directory.name}`);\r\n    \r\n    // Check for suspicious directory names\r\n    const suspiciousNames = [\'temp\', \'tmp\', \'cache\', \'hidden\', \'.git\', \'.svn\'];\r\n    if (suspiciousNames.some(name => directory.name.toLowerCase().includes(name))) {\r\n      this.issues.push({\r\n        type: \'suspicious_directory\',\r\n        severity: \'low\',\r\n        path: directory.path,\r\n        message: `Directory with potentially sensitive name: ${directory.name}`\r\n      });\r\n    }\r\n    \r\n    return directory.children.length;\r\n  }\r\n  \r\n  visitSymbolicLink(symlink) {\r\n    console.log(`\ud83d\udd17 Checking symbolic link: ${symlink.name}`);\r\n    \r\n    // Check if symlink points outside of current directory structure\r\n    if (symlink.targetPath.includes(\'..\') || symlink.targetPath.startsWith(\'/\')) {\r\n      this.issues.push({\r\n        type: \'suspicious_symlink\',\r\n        severity: \'medium\',\r\n        path: symlink.path,\r\n        message: `Symbolic link points outside current directory: ${symlink.targetPath}`\r\n      });\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n  \r\n  getSecurityReport() {\r\n    const severityGroups = {\r\n      high: this.issues.filter(issue => issue.severity === \'high\'),\r\n      medium: this.issues.filter(issue => issue.severity === \'medium\'),\r\n      low: this.issues.filter(issue => issue.severity === \'low\')\r\n    };\r\n    \r\n    return {\r\n      scannedFiles: this.scannedFiles,\r\n      totalIssues: this.issues.length,\r\n      severityBreakdown: {\r\n        high: severityGroups.high.length,\r\n        medium: severityGroups.medium.length,\r\n        low: severityGroups.low.length\r\n      },\r\n      issues: this.issues,\r\n      riskLevel: this.calculateRiskLevel(severityGroups)\r\n    };\r\n  }\r\n  \r\n  calculateRiskLevel(severityGroups) {\r\n    const score = severityGroups.high.length * 3 + \r\n                 severityGroups.medium.length * 2 + \r\n                 severityGroups.low.length * 1;\r\n    \r\n    if (score >= 10) return \'HIGH\';\r\n    if (score >= 5) return \'MEDIUM\';\r\n    if (score > 0) return \'LOW\';\r\n    return \'CLEAN\';\r\n  }\r\n}\r\n\r\n// Concrete visitor - Backup Creator\r\nclass BackupCreatorVisitor extends FileSystemVisitor {\r\n  constructor(backupPath) {\r\n    super();\r\n    this.backupPath = backupPath;\r\n    this.backedUpFiles = [];\r\n    this.skippedFiles = [];\r\n    this.currentDepth = 0;\r\n    this.excludePatterns = [/\\.tmp$/, /\\.log$/, /node_modules/, /\\.git/];\r\n  }\r\n  \r\n  visitFile(file) {\r\n    const shouldBackup = !this.excludePatterns.some(pattern => \r\n      pattern.test(file.name) || pattern.test(file.path)\r\n    );\r\n    \r\n    if (shouldBackup) {\r\n      const backupFilePath = `${this.backupPath}${file.path}`;\r\n      console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udcbe Backing up: ${file.name} \u2192 ${backupFilePath}`);\r\n      \r\n      // Simulate backup operation\r\n      this.backedUpFiles.push({\r\n        originalPath: file.path,\r\n        backupPath: backupFilePath,\r\n        size: file.size,\r\n        timestamp: new Date()\r\n      });\r\n      \r\n      return true;\r\n    } else {\r\n      console.log(`${\'  \'.repeat(this.currentDepth)}\u23ed\ufe0f Skipping: ${file.name} (excluded)`);\r\n      this.skippedFiles.push({\r\n        path: file.path,\r\n        reason: \'excluded_pattern\'\r\n      });\r\n      \r\n      return false;\r\n    }\r\n  }\r\n  \r\n  visitDirectory(directory) {\r\n    const shouldBackup = !this.excludePatterns.some(pattern => \r\n      pattern.test(directory.name) || pattern.test(directory.path)\r\n    );\r\n    \r\n    if (shouldBackup) {\r\n      const backupDirPath = `${this.backupPath}${directory.path}`;\r\n      console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udcc1 Creating backup directory: ${backupDirPath}`);\r\n      this.currentDepth++;\r\n      \r\n      return () => {\r\n        this.currentDepth--;\r\n        console.log(`${\'  \'.repeat(this.currentDepth)}   \u2514\u2500 Directory backup completed`);\r\n      };\r\n    } else {\r\n      console.log(`${\'  \'.repeat(this.currentDepth)}\u23ed\ufe0f Skipping directory: ${directory.name} (excluded)`);\r\n      this.skippedFiles.push({\r\n        path: directory.path,\r\n        reason: \'excluded_pattern\'\r\n      });\r\n      \r\n      return () => {}; // No-op cleanup\r\n    }\r\n  }\r\n  \r\n  visitSymbolicLink(symlink) {\r\n    // For safety, we\'ll recreate the symlink in backup\r\n    const backupLinkPath = `${this.backupPath}${symlink.path}`;\r\n    console.log(`${\'  \'.repeat(this.currentDepth)}\ud83d\udd17 Recreating symlink: ${backupLinkPath} \u2192 ${symlink.targetPath}`);\r\n    \r\n    this.backedUpFiles.push({\r\n      originalPath: symlink.path,\r\n      backupPath: backupLinkPath,\r\n      targetPath: symlink.targetPath,\r\n      type: \'symlink\',\r\n      timestamp: new Date()\r\n    });\r\n    \r\n    return true;\r\n  }\r\n  \r\n  getBackupReport() {\r\n    const totalBackupSize = this.backedUpFiles\r\n      .filter(item => item.size)\r\n      .reduce((sum, item) => sum + item.size, 0);\r\n    \r\n    return {\r\n      backupPath: this.backupPath,\r\n      backedUpFiles: this.backedUpFiles.length,\r\n      skippedFiles: this.skippedFiles.length,\r\n      totalBackupSize: totalBackupSize,\r\n      totalBackupSizeMB: (totalBackupSize / (1024 * 1024)).toFixed(2),\r\n      excludePatterns: this.excludePatterns.map(p => p.toString()),\r\n      timestamp: new Date(),\r\n      fileDetails: this.backedUpFiles,\r\n      skippedDetails: this.skippedFiles\r\n    };\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== File System Scanner Visitor Pattern Demo ===\\n");\r\n\r\nconsole.log("Building sample file system:");\r\nconsole.log("-".repeat(29));\r\n\r\n// Create sample file system\r\nconst root = new Directory("project", "/");\r\n\r\n// Add source directory\r\nconst src = new Directory("src", "/src");\r\nsrc.addChild(new File("app.js", "/src/app.js", 15360, ".js", "const express = require(\'express\');\\nconst app = express();"));\r\nsrc.addChild(new File("config.js", "/src/config.js", 2048, ".js", "const API_KEY = \'secret-key-123\';\\nmodule.exports = { API_KEY };"));\r\nsrc.addChild(new File("utils.js", "/src/utils.js", 8192, ".js", "function formatDate(date) { return date.toString(); }"));\r\n\r\n// Add docs directory\r\nconst docs = new Directory("docs", "/docs");\r\ndocs.addChild(new File("README.md", "/docs/README.md", 4096, ".md", "# Project Documentation\\nThis is the main documentation."));\r\ndocs.addChild(new File("api.md", "/docs/api.md", 6144, ".md", "# API Documentation\\nAPI endpoints and usage."));\r\n\r\n// Add temp directory with some files\r\nconst temp = new Directory("temp", "/temp");\r\ntemp.addChild(new File("cache.tmp", "/temp/cache.tmp", 1024, ".tmp", "temporary cache data"));\r\ntemp.addChild(new File("debug.log", "/temp/debug.log", 2048, ".log", "debug information"));\r\n\r\n// Add a large file\r\nconst data = new Directory("data", "/data");\r\ndata.addChild(new File("large-dataset.json", "/data/large-dataset.json", 150 * 1024 * 1024, ".json", "{}"));\r\n\r\n// Add executable file\r\nconst bin = new Directory("bin", "/bin");\r\nbin.addChild(new File("startup.exe", "/bin/startup.exe", 5120, ".exe", "binary content"));\r\n\r\n// Add symlink\r\nconst link = new SymbolicLink("current", "/current", "../data/large-dataset.json");\r\n\r\n// Build structure\r\nroot.addChild(src);\r\nroot.addChild(docs);\r\nroot.addChild(temp);\r\nroot.addChild(data);\r\nroot.addChild(bin);\r\nroot.addChild(link);\r\n\r\nconsole.log(`\u2705 Built file system with ${root.getTotalChildren()} total items\\n`);\r\n\r\nconsole.log("=".repeat(70) + "\\n");\r\n\r\nconsole.log("1. Size Calculation:");\r\nconsole.log("-".repeat(18));\r\n\r\nconst sizeCalculator = new SizeCalculatorVisitor();\r\nroot.accept(sizeCalculator);\r\n\r\nconst sizeReport = sizeCalculator.getReport();\r\nconsole.log("\\n\ud83d\udcca Size Report:");\r\nconsole.log("-".repeat(14));\r\nconsole.log(`Total size: ${sizeReport.totalSizeMB} MB (${sizeReport.totalSizeKB} KB)`);\r\nconsole.log(`Total files: ${sizeReport.totalFiles}`);\r\nconsole.log("\\nFile types:");\r\nObject.entries(sizeReport.fileTypeCounts).forEach(([ext, count]) => {\r\n  console.log(`  ${ext}: ${count} files`);\r\n});\r\n\r\nconsole.log("\\n" + "=".repeat(70) + "\\n");\r\n\r\nconsole.log("2. Security Scanning:");\r\nconsole.log("-".repeat(19));\r\n\r\nconst securityScanner = new SecurityScannerVisitor();\r\nroot.accept(securityScanner);\r\n\r\nconst securityReport = securityScanner.getSecurityReport();\r\nconsole.log("\\n\ud83d\udd12 Security Report:");\r\nconsole.log("-".repeat(17));\r\nconsole.log(`Scanned files: ${securityReport.scannedFiles}`);\r\nconsole.log(`Total issues: ${securityReport.totalIssues}`);\r\nconsole.log(`Risk level: ${securityReport.riskLevel}`);\r\n\r\nconsole.log("\\nIssue breakdown:");\r\nObject.entries(securityReport.severityBreakdown).forEach(([severity, count]) => {\r\n  console.log(`  ${severity.toUpperCase()}: ${count} issues`);\r\n});\r\n\r\nif (securityReport.issues.length > 0) {\r\n  console.log("\\nDetailed issues:");\r\n  securityReport.issues.forEach((issue, index) => {\r\n    console.log(`  ${index + 1}. [${issue.severity.toUpperCase()}] ${issue.message}`);\r\n    console.log(`     Path: ${issue.path}`);\r\n  });\r\n}\r\n\r\nconsole.log("\\n" + "=".repeat(70) + "\\n");\r\n\r\nconsole.log("3. Backup Creation:");\r\nconsole.log("-".repeat(17));\r\n\r\nconst backupCreator = new BackupCreatorVisitor("/backup/2024-01-15/");\r\nroot.accept(backupCreator);\r\n\r\nconst backupReport = backupCreator.getBackupReport();\r\nconsole.log("\\n\ud83d\udcbe Backup Report:");\r\nconsole.log("-".repeat(16));\r\nconsole.log(`Backup location: ${backupReport.backupPath}`);\r\nconsole.log(`Files backed up: ${backupReport.backedUpFiles}`);\r\nconsole.log(`Files skipped: ${backupReport.skippedFiles}`);\r\nconsole.log(`Total backup size: ${backupReport.totalBackupSizeMB} MB`);\r\nconsole.log(`Created at: ${backupReport.timestamp}`);\r\n\r\nconsole.log("\\nExclusion patterns:");\r\nbackupReport.excludePatterns.forEach(pattern => {\r\n  console.log(`  \u2022 ${pattern}`);\r\n});\r\n\r\nconsole.log("\\n" + "=".repeat(70) + "\\n");\r\n\r\nconsole.log("Visitor Pattern Benefits Summary:");\r\nconsole.log("-".repeat(33));\r\n\r\nconsole.log("\u2705 Benefits demonstrated:");\r\nconsole.log("   \u2022 Adding operations without modifying file system classes");\r\nconsole.log("   \u2022 Type-safe operation dispatch");\r\nconsole.log("   \u2022 Separation of concerns (structure vs operations)");\r\nconsole.log("   \u2022 Easy to add new analysis types");\r\nconsole.log("   \u2022 Polymorphic behavior across different element types");\r\n\r\nconsole.log("\\n\ud83d\udcc8 Performance & Flexibility:");\r\nconsole.log("   \u2022 Single traversal for multiple operations");\r\nconsole.log("   \u2022 Visitors can maintain state across elements");\r\nconsole.log("   \u2022 Easy to combine or chain visitors");\r\nconsole.log("   \u2022 Extensible without touching existing code");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open/Closed Principle"}),": Can add new operations without modifying existing classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of Concerns"}),": Operations are separated from the object structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Compile-time type checking for operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"}),": Each visitor handles one specific operation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Accumulation"}),": Visitors can accumulate information while traversing"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Breaking Encapsulation"}),": Elements must expose enough details to visitors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circular Dependency"}),": Elements depend on visitors and vice versa"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Element Hierarchy Changes"}),": Adding new element types requires updating all visitors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex for Simple Operations"}),": Overkill for simple operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Overhead"}),": Extra indirection through visitor methods"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Operations"}),": Need to perform many unrelated operations on objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stable Structure"}),": Object structure is stable but operations change frequently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Algorithm Separation"}),": Want to separate algorithms from object structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type-Safe Dispatch"}),": Need compile-time type safety for operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Traversal"}),": Operations require complex traversal logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-visitor-variations",children:"\ud83d\udd04 Visitor Variations"}),"\n",(0,s.jsxs)(n.h3,{id:"1-generic-visitor",children:["1. ",(0,s.jsx)(n.strong,{children:"Generic Visitor"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class GenericVisitor {\r\n  visit(element) {\r\n    const methodName = `visit${element.constructor.name}`;\r\n    if (this[methodName]) {\r\n      return this[methodName](element);\r\n    }\r\n    return this.defaultVisit(element);\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-intrusive-visitor",children:["2. ",(0,s.jsx)(n.strong,{children:"Intrusive Visitor"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class Element {\r\n  // Element includes operation directly\r\n  accept(visitor) {\r\n    return visitor.visit(this);\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-hierarchical-visitor",children:["3. ",(0,s.jsx)(n.strong,{children:"Hierarchical Visitor"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class HierarchicalVisitor {\r\n  visitBefore(element) { /* pre-processing */ }\r\n  visit(element) { /* main processing */ }\r\n  visitAfter(element) { /* post-processing */ }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Composite"}),": Visitor is often used with Composite pattern for tree structures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interpreter"}),": Can use Visitor to implement operations on syntax trees"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Iterator"}),": Both traverse object structures, but Iterator focuses on access while Visitor focuses on operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command"}),": Visitor operations can be implemented as commands"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/visitor",children:"Visitor Pattern - Refactoring.Guru"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Expression_problem",children:"Expression Problem and Visitor Pattern"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);