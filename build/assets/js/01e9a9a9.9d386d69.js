"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[9704],{6365:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"design-pattern/structural/proxy","title":"Proxy Pattern \ud83d\udee1\ufe0f","description":"Definition: The Proxy pattern provides a placeholder or surrogate for another object to control access to it. It acts as an intermediary between a client and the real object.","source":"@site/docs/design-pattern/structural/proxy.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/proxy","permalink":"/docs/design-pattern/structural/proxy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Flyweight Pattern \ud83e\udeb6","permalink":"/docs/design-pattern/structural/flyweight"},"next":{"title":"DSA Concepts","permalink":"/docs/dsa-concepts/"}}');var t=r(4848),o=r(8453);const i={},a="Proxy Pattern \ud83d\udee1\ufe0f",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Image Proxy (Lazy Loading)",id:"image-proxy-lazy-loading",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Database Connection Pool Proxy",id:"database-connection-pool-proxy",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Web Service Proxy (Caching &amp; Rate Limiting)",id:"web-service-proxy-caching--rate-limiting",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Types of Proxies",id:"-types-of-proxies",level:2},{value:"1. <strong>Virtual Proxy</strong> (shown in Image example)",id:"1-virtual-proxy-shown-in-image-example",level:3},{value:"2. <strong>Protection Proxy</strong> (shown in Database example)",id:"2-protection-proxy-shown-in-database-example",level:3},{value:"3. <strong>Caching Proxy</strong> (shown in Web Service example)",id:"3-caching-proxy-shown-in-web-service-example",level:3},{value:"4. <strong>Remote Proxy</strong>",id:"4-remote-proxy",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"proxy-pattern-\ufe0f",children:"Proxy Pattern \ud83d\udee1\ufe0f"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": The Proxy pattern provides a placeholder or surrogate for another object to control access to it. It acts as an intermediary between a client and the real object."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,t.jsx)(n.p,{children:"Provide a surrogate or placeholder for another object to control access to it. The proxy forwards requests to the real object when appropriate."}),"\n",(0,t.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,t.jsx)(n.p,{children:"You want to control access to an object for various reasons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lazy initialization"}),": Create expensive objects only when needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access control"}),": Restrict access to sensitive objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Cache results of expensive operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logging"}),": Log requests before forwarding them"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remote objects"}),": Represent objects in different address spaces"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Direct access to the object might not always be desirable or possible."}),"\n",(0,t.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,t.jsx)(n.p,{children:"The Proxy pattern suggests creating a proxy class with the same interface as the original object. The proxy receives client requests, performs some work (access control, caching, etc.), and then forwards the request to the real object."}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Subject (interface)\r\n\u2514\u2500\u2500 request()\r\n\r\nRealSubject implements Subject\r\n\u2514\u2500\u2500 request()\r\n\r\nProxy implements Subject\r\n\u251c\u2500\u2500 realSubject: RealSubject\r\n\u251c\u2500\u2500 request() \u2192 checkAccess() + realSubject.request() + logRequest()\r\n\u251c\u2500\u2500 checkAccess()\r\n\u2514\u2500\u2500 logRequest()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,t.jsx)(n.h3,{id:"image-proxy-lazy-loading",children:"Image Proxy (Lazy Loading)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Subject interface\r\nclass Image {\r\n  display() {\r\n    throw new Error("display() method must be implemented");\r\n  }\r\n  \r\n  getSize() {\r\n    throw new Error("getSize() method must be implemented");\r\n  }\r\n}\r\n\r\n// Real subject - Actual image\r\nclass RealImage extends Image {\r\n  constructor(filename) {\r\n    super();\r\n    this.filename = filename;\r\n    this.loadImage();\r\n  }\r\n  \r\n  loadImage() {\r\n    console.log(`\ud83d\udce5 Loading image from disk: ${this.filename}`);\r\n    // Simulate expensive loading operation\r\n    this.data = `Image data for ${this.filename}`;\r\n    this.size = Math.floor(Math.random() * 1000) + 100; // Random size\r\n    console.log(`\u2705 Image loaded: ${this.filename} (${this.size} KB)`);\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\ud83d\uddbc\ufe0f Displaying image: ${this.filename}`);\r\n  }\r\n  \r\n  getSize() {\r\n    return this.size;\r\n  }\r\n}\r\n\r\n// Proxy - Controls access to RealImage\r\nclass ImageProxy extends Image {\r\n  constructor(filename) {\r\n    super();\r\n    this.filename = filename;\r\n    this.realImage = null; // Lazy initialization\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\ud83d\udd04 Proxy: Request to display ${this.filename}`);\r\n    \r\n    // Load real image only when needed (lazy loading)\r\n    if (!this.realImage) {\r\n      console.log("\ud83d\udd04 Proxy: Creating real image (first access)");\r\n      this.realImage = new RealImage(this.filename);\r\n    }\r\n    \r\n    this.realImage.display();\r\n  }\r\n  \r\n  getSize() {\r\n    console.log(`\ud83d\udd04 Proxy: Request for size of ${this.filename}`);\r\n    \r\n    if (!this.realImage) {\r\n      console.log("\ud83d\udd04 Proxy: Creating real image to get size");\r\n      this.realImage = new RealImage(this.filename);\r\n    }\r\n    \r\n    return this.realImage.getSize();\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Image Proxy Demo ===\\n");\r\n\r\nconsole.log("Creating image proxies (no actual loading yet):");\r\nconsole.log("-".repeat(45));\r\n\r\nconst image1 = new ImageProxy("photo1.jpg");\r\nconst image2 = new ImageProxy("photo2.jpg");\r\nconst image3 = new ImageProxy("photo3.jpg");\r\n\r\nconsole.log("\u2705 Three image proxies created\\n");\r\n\r\nconsole.log("Displaying images (triggers loading):");\r\nconsole.log("-".repeat(35));\r\n\r\nimage1.display(); // First access - loads image\r\nconsole.log();\r\n\r\nimage1.display(); // Second access - uses already loaded image\r\nconsole.log();\r\n\r\nconsole.log("Getting image sizes:");\r\nconsole.log("-".repeat(20));\r\n\r\nconsole.log(`Image 1 size: ${image1.getSize()} KB`); // Already loaded\r\nconsole.log(`Image 2 size: ${image2.getSize()} KB`); // First access - loads image\r\nconsole.log();\r\n\r\nimage2.display(); // Already loaded, so no loading needed\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,t.jsx)(n.h3,{id:"database-connection-pool-proxy",children:"Database Connection Pool Proxy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Subject interface\r\nclass DatabaseConnection {\r\n  query(sql) {\r\n    throw new Error("query() method must be implemented");\r\n  }\r\n  \r\n  close() {\r\n    throw new Error("close() method must be implemented");\r\n  }\r\n  \r\n  isConnected() {\r\n    throw new Error("isConnected() method must be implemented");\r\n  }\r\n}\r\n\r\n// Real subject - Actual database connection\r\nclass RealDatabaseConnection extends DatabaseConnection {\r\n  constructor(connectionString) {\r\n    super();\r\n    this.connectionString = connectionString;\r\n    this.connected = false;\r\n    this.queryCount = 0;\r\n    this.connect();\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83d\udd17 Establishing real database connection: ${this.connectionString}`);\r\n    // Simulate connection delay\r\n    this.connected = true;\r\n    console.log("\u2705 Database connection established");\r\n  }\r\n  \r\n  query(sql) {\r\n    if (!this.connected) {\r\n      throw new Error("Not connected to database");\r\n    }\r\n    \r\n    this.queryCount++;\r\n    console.log(`\ud83d\udcca Executing query #${this.queryCount}: ${sql}`);\r\n    \r\n    // Simulate query execution\r\n    const result = `Result for: ${sql}`;\r\n    console.log(`\ud83d\udccb Query result: ${result}`);\r\n    return result;\r\n  }\r\n  \r\n  close() {\r\n    if (this.connected) {\r\n      console.log("\ud83d\udd12 Closing database connection");\r\n      this.connected = false;\r\n      console.log(`\ud83d\udcca Total queries executed: ${this.queryCount}`);\r\n    }\r\n  }\r\n  \r\n  isConnected() {\r\n    return this.connected;\r\n  }\r\n}\r\n\r\n// Proxy with access control and caching\r\nclass DatabaseConnectionProxy extends DatabaseConnection {\r\n  constructor(connectionString, userRole) {\r\n    super();\r\n    this.connectionString = connectionString;\r\n    this.userRole = userRole;\r\n    this.realConnection = null;\r\n    this.queryCache = new Map();\r\n    this.accessLog = [];\r\n  }\r\n  \r\n  query(sql) {\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    // Access control\r\n    if (!this.checkPermission(sql)) {\r\n      const error = `\u274c Access denied: ${this.userRole} cannot execute: ${sql}`;\r\n      console.log(error);\r\n      this.logAccess(sql, "DENIED", timestamp);\r\n      throw new Error(error);\r\n    }\r\n    \r\n    // Check cache first\r\n    if (this.queryCache.has(sql)) {\r\n      console.log(`\ud83d\udcbe Cache hit for query: ${sql}`);\r\n      const cachedResult = this.queryCache.get(sql);\r\n      this.logAccess(sql, "CACHE_HIT", timestamp);\r\n      return cachedResult;\r\n    }\r\n    \r\n    // Lazy initialization of real connection\r\n    if (!this.realConnection) {\r\n      console.log("\ud83d\udd04 Proxy: Creating real database connection");\r\n      this.realConnection = new RealDatabaseConnection(this.connectionString);\r\n    }\r\n    \r\n    // Execute query through real connection\r\n    console.log(`\ud83d\udd04 Proxy: Forwarding query to real connection`);\r\n    const result = this.realConnection.query(sql);\r\n    \r\n    // Cache the result\r\n    this.queryCache.set(sql, result);\r\n    console.log(`\ud83d\udcbe Query result cached`);\r\n    \r\n    this.logAccess(sql, "SUCCESS", timestamp);\r\n    return result;\r\n  }\r\n  \r\n  checkPermission(sql) {\r\n    const sqlUpper = sql.toUpperCase();\r\n    \r\n    // Simple access control rules\r\n    if (this.userRole === \'admin\') {\r\n      return true; // Admin can do anything\r\n    } else if (this.userRole === \'user\') {\r\n      // Users can only SELECT\r\n      return sqlUpper.startsWith(\'SELECT\');\r\n    } else if (this.userRole === \'readonly\') {\r\n      // Read-only can only SELECT from specific tables\r\n      return sqlUpper.startsWith(\'SELECT\') && !sqlUpper.includes(\'SENSITIVE\');\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  logAccess(sql, status, timestamp) {\r\n    const logEntry = {\r\n      timestamp,\r\n      user: this.userRole,\r\n      query: sql,\r\n      status\r\n    };\r\n    this.accessLog.push(logEntry);\r\n    console.log(`\ud83d\udcdd Access logged: ${this.userRole} - ${status}`);\r\n  }\r\n  \r\n  close() {\r\n    if (this.realConnection) {\r\n      this.realConnection.close();\r\n    }\r\n    \r\n    // Show access statistics\r\n    console.log("\\n\ud83d\udcca Access Statistics:");\r\n    const stats = this.getAccessStats();\r\n    console.log(`   Total attempts: ${stats.total}`);\r\n    console.log(`   Successful: ${stats.success}`);\r\n    console.log(`   Cache hits: ${stats.cacheHits}`);\r\n    console.log(`   Denied: ${stats.denied}`);\r\n  }\r\n  \r\n  isConnected() {\r\n    return this.realConnection ? this.realConnection.isConnected() : false;\r\n  }\r\n  \r\n  getAccessStats() {\r\n    const stats = { total: 0, success: 0, cacheHits: 0, denied: 0 };\r\n    \r\n    for (const entry of this.accessLog) {\r\n      stats.total++;\r\n      switch (entry.status) {\r\n        case \'SUCCESS\': stats.success++; break;\r\n        case \'CACHE_HIT\': stats.cacheHits++; break;\r\n        case \'DENIED\': stats.denied++; break;\r\n      }\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n  \r\n  clearCache() {\r\n    const cacheSize = this.queryCache.size;\r\n    this.queryCache.clear();\r\n    console.log(`\ud83d\uddd1\ufe0f Cache cleared (${cacheSize} entries removed)`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Database Connection Proxy Demo ===\\n");\r\n\r\nconsole.log("Testing with different user roles:");\r\nconsole.log("-".repeat(35));\r\n\r\n// Admin user\r\nconsole.log("1. Admin user:");\r\nconsole.log("-".repeat(13));\r\nconst adminProxy = new DatabaseConnectionProxy("postgresql://localhost:5432/mydb", "admin");\r\n\r\nadminProxy.query("SELECT * FROM users");\r\nadminProxy.query("SELECT * FROM users"); // Cache hit\r\nadminProxy.query("INSERT INTO users (name) VALUES (\'John\')");\r\nadminProxy.query("DELETE FROM sensitive_data WHERE id = 1");\r\n\r\nadminProxy.close();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\n// Regular user\r\nconsole.log("2. Regular user:");\r\nconsole.log("-".repeat(15));\r\nconst userProxy = new DatabaseConnectionProxy("postgresql://localhost:5432/mydb", "user");\r\n\r\nuserProxy.query("SELECT * FROM products");\r\nuserProxy.query("SELECT * FROM products"); // Cache hit\r\n\r\ntry {\r\n  userProxy.query("DELETE FROM products WHERE id = 1"); // Should be denied\r\n} catch (error) {\r\n  // Access denied error\r\n}\r\n\r\nuserProxy.close();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\n// Read-only user\r\nconsole.log("3. Read-only user:");\r\nconsole.log("-".repeat(17));\r\nconst readonlyProxy = new DatabaseConnectionProxy("postgresql://localhost:5432/mydb", "readonly");\r\n\r\nreadonlyProxy.query("SELECT name FROM public_data");\r\n\r\ntry {\r\n  readonlyProxy.query("SELECT * FROM sensitive_data"); // Should be denied\r\n} catch (error) {\r\n  // Access denied error\r\n}\r\n\r\nreadonlyProxy.close();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,t.jsx)(n.h3,{id:"web-service-proxy-caching--rate-limiting",children:"Web Service Proxy (Caching & Rate Limiting)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Subject interface\r\nclass WebService {\r\n  makeRequest(endpoint, data) {\r\n    throw new Error("makeRequest() method must be implemented");\r\n  }\r\n}\r\n\r\n// Real subject - Actual web service\r\nclass RealWebService extends WebService {\r\n  constructor(baseUrl) {\r\n    super();\r\n    this.baseUrl = baseUrl;\r\n  }\r\n  \r\n  makeRequest(endpoint, data = {}) {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    console.log(`\ud83c\udf10 Making HTTP request to: ${url}`);\r\n    console.log(`\ud83d\udce6 Request data:`, data);\r\n    \r\n    // Simulate network request delay\r\n    const responseTime = Math.floor(Math.random() * 1000) + 500;\r\n    console.log(`\u23f1\ufe0f Request took ${responseTime}ms`);\r\n    \r\n    // Simulate response\r\n    const response = {\r\n      status: 200,\r\n      data: `Response from ${endpoint}`,\r\n      timestamp: new Date().toISOString(),\r\n      responseTime\r\n    };\r\n    \r\n    console.log(`\ud83d\udce8 Response:`, response);\r\n    return response;\r\n  }\r\n}\r\n\r\n// Proxy with caching and rate limiting\r\nclass WebServiceProxy extends WebService {\r\n  constructor(baseUrl, rateLimit = 5) {\r\n    super();\r\n    this.realService = new RealWebService(baseUrl);\r\n    this.cache = new Map();\r\n    this.rateLimit = rateLimit; // requests per minute\r\n    this.requestTimes = [];\r\n    this.requestCount = 0;\r\n  }\r\n  \r\n  makeRequest(endpoint, data = {}) {\r\n    this.requestCount++;\r\n    console.log(`\ud83d\udd04 Proxy: Request #${this.requestCount} to ${endpoint}`);\r\n    \r\n    // Rate limiting check\r\n    if (!this.checkRateLimit()) {\r\n      const error = "\u274c Rate limit exceeded. Please try again later.";\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n    \r\n    // Create cache key\r\n    const cacheKey = this.getCacheKey(endpoint, data);\r\n    \r\n    // Check cache first\r\n    if (this.cache.has(cacheKey)) {\r\n      console.log(`\ud83d\udcbe Cache hit for: ${endpoint}`);\r\n      const cachedResponse = this.cache.get(cacheKey);\r\n      console.log(`\ud83d\udce8 Cached response:`, cachedResponse);\r\n      return cachedResponse;\r\n    }\r\n    \r\n    // Forward to real service\r\n    console.log(`\ud83d\udd04 Proxy: Forwarding to real service`);\r\n    const response = this.realService.makeRequest(endpoint, data);\r\n    \r\n    // Cache the response (with TTL)\r\n    this.cache.set(cacheKey, response);\r\n    console.log(`\ud83d\udcbe Response cached for: ${endpoint}`);\r\n    \r\n    // Update rate limit tracking\r\n    this.requestTimes.push(Date.now());\r\n    \r\n    return response;\r\n  }\r\n  \r\n  checkRateLimit() {\r\n    const now = Date.now();\r\n    const oneMinuteAgo = now - 60000; // 1 minute in milliseconds\r\n    \r\n    // Remove old requests\r\n    this.requestTimes = this.requestTimes.filter(time => time > oneMinuteAgo);\r\n    \r\n    console.log(`\ud83d\udea6 Rate limit check: ${this.requestTimes.length}/${this.rateLimit} requests in last minute`);\r\n    \r\n    return this.requestTimes.length < this.rateLimit;\r\n  }\r\n  \r\n  getCacheKey(endpoint, data) {\r\n    return `${endpoint}:${JSON.stringify(data)}`;\r\n  }\r\n  \r\n  clearCache() {\r\n    const cacheSize = this.cache.size;\r\n    this.cache.clear();\r\n    console.log(`\ud83d\uddd1\ufe0f Cache cleared (${cacheSize} entries removed)`);\r\n  }\r\n  \r\n  getStats() {\r\n    return {\r\n      totalRequests: this.requestCount,\r\n      cachedEntries: this.cache.size,\r\n      recentRequests: this.requestTimes.length,\r\n      rateLimit: this.rateLimit\r\n    };\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Web Service Proxy Demo ===\\n");\r\n\r\nconst webProxy = new WebServiceProxy("https://api.example.com", 3); // 3 requests per minute\r\n\r\nconsole.log("Making requests through proxy:");\r\nconsole.log("-".repeat(30));\r\n\r\n// First request\r\nwebProxy.makeRequest("/users", { page: 1 });\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\n// Second request (same endpoint) - should hit cache\r\nwebProxy.makeRequest("/users", { page: 1 });\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\n// Different request\r\nwebProxy.makeRequest("/products", { category: "electronics" });\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\n// Another different request\r\nwebProxy.makeRequest("/orders", { status: "pending" });\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\n// This should hit rate limit\r\ntry {\r\n  webProxy.makeRequest("/analytics", { range: "monthly" });\r\n} catch (error) {\r\n  console.log("Caught error:", error.message);\r\n}\r\n\r\nconsole.log("\\nProxy Statistics:");\r\nconsole.log("-".repeat(17));\r\nconst stats = webProxy.getStats();\r\nconsole.log(`Total requests: ${stats.totalRequests}`);\r\nconsole.log(`Cached entries: ${stats.cachedEntries}`);\r\nconsole.log(`Recent requests: ${stats.recentRequests}`);\r\nconsole.log(`Rate limit: ${stats.rateLimit} per minute`);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Control"}),": Can control access to the real object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lazy Loading"}),": Objects created only when needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Can cache expensive operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Additional Functionality"}),": Can add logging, security, etc."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transparency"}),": Same interface as the real object"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complexity"}),": Adds another layer of abstraction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": May introduce latency for some operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory"}),": Proxy objects consume additional memory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintenance"}),": Additional code to maintain"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expensive Objects"}),": When object creation or operations are expensive"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Control"}),": When you need to control access to an object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remote Objects"}),": When working with objects in different address spaces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": When you want to cache results of expensive operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lazy Loading"}),": When you want to defer object creation until needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-types-of-proxies",children:"\ud83d\udd04 Types of Proxies"}),"\n",(0,t.jsxs)(n.h3,{id:"1-virtual-proxy-shown-in-image-example",children:["1. ",(0,t.jsx)(n.strong,{children:"Virtual Proxy"})," (shown in Image example)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Controls access to expensive objects"}),"\n",(0,t.jsx)(n.li,{children:"Implements lazy loading"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"2-protection-proxy-shown-in-database-example",children:["2. ",(0,t.jsx)(n.strong,{children:"Protection Proxy"})," (shown in Database example)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Controls access based on permissions"}),"\n",(0,t.jsx)(n.li,{children:"Implements security checks"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"3-caching-proxy-shown-in-web-service-example",children:["3. ",(0,t.jsx)(n.strong,{children:"Caching Proxy"})," (shown in Web Service example)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Caches results of expensive operations"}),"\n",(0,t.jsx)(n.li,{children:"Improves performance"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"4-remote-proxy",children:["4. ",(0,t.jsx)(n.strong,{children:"Remote Proxy"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class RemoteProxy {\r\n  constructor(remoteUrl) {\r\n    this.remoteUrl = remoteUrl;\r\n  }\r\n  \r\n  async makeRequest(method, data) {\r\n    // Forward request to remote server\r\n    const response = await fetch(this.remoteUrl, {\r\n      method,\r\n      body: JSON.stringify(data)\r\n    });\r\n    return response.json();\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Adapter"}),": Both provide different interfaces, but Adapter makes incompatible interfaces work together while Proxy provides the same interface"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Decorator"}),": Both wrap objects, but Decorator adds behavior while Proxy controls access"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Facade"}),": Both provide simplified access, but Facade simplifies complex subsystems while Proxy controls access to single objects"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/proxy",children:"Proxy Pattern - Refactoring.Guru"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/proxy",children:"JavaScript Proxy Pattern Examples"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);