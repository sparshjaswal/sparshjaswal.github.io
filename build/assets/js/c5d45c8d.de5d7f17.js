"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7487],{413:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"design-pattern/structural/facade","title":"Facade Pattern \ud83c\udfdb\ufe0f","description":"Definition: The Facade pattern provides a simplified interface to a complex subsystem. It defines a higher-level interface that makes the subsystem easier to use.","source":"@site/docs/design-pattern/structural/facade.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/facade","permalink":"/docs/design-pattern/structural/facade","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Decorator Pattern \ud83c\udfa8","permalink":"/docs/design-pattern/structural/decorator"},"next":{"title":"Flyweight Pattern \ud83e\udeb6","permalink":"/docs/design-pattern/structural/flyweight"}}');var t=r(4848),o=r(8453);const a={},i="Facade Pattern \ud83c\udfdb\ufe0f",c={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Home Theater System",id:"home-theater-system",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Computer System Facade",id:"computer-system-facade",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Banking System Facade",id:"banking-system-facade",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Facade Variations",id:"-facade-variations",level:2},{value:"1. <strong>Multiple Facades</strong>",id:"1-multiple-facades",level:3},{value:"2. <strong>Configurable Facade</strong>",id:"2-configurable-facade",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"facade-pattern-\ufe0f",children:"Facade Pattern \ud83c\udfdb\ufe0f"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Definition"}),": The Facade pattern provides a simplified interface to a complex subsystem. It defines a higher-level interface that makes the subsystem easier to use."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,t.jsx)(e.p,{children:"Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use."}),"\n",(0,t.jsx)(e.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,t.jsx)(e.p,{children:"You need to work with a complex library or framework that has many classes and methods. Using the library directly requires understanding many details and making multiple method calls in the right order. You want a simpler way to perform common operations."}),"\n",(0,t.jsx)(e.p,{children:"For example, to play a video, you might need to:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Initialize video codec"}),"\n",(0,t.jsx)(e.li,{children:"Load audio codec"}),"\n",(0,t.jsx)(e.li,{children:"Create video file reader"}),"\n",(0,t.jsx)(e.li,{children:"Set up audio mixer"}),"\n",(0,t.jsx)(e.li,{children:"Start playback engine"}),"\n",(0,t.jsx)(e.li,{children:"Handle synchronization"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,t.jsx)(e.p,{children:"The Facade pattern suggests creating a facade class that provides simple methods for common use cases. The facade delegates work to the appropriate classes in the subsystem and handles the complex interactions."}),"\n",(0,t.jsx)(e.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Client\r\n\u2514\u2500\u2500 uses \u2192 Facade\r\n            \u251c\u2500\u2500 method1() \u2192 subsystem.complexOperation1()\r\n            \u251c\u2500\u2500 method2() \u2192 subsystem.complexOperation2()\r\n            \u2514\u2500\u2500 method3() \u2192 subsystem.complexOperation3()\r\n\r\nFacade\r\n\u2514\u2500\u2500 uses \u2192 Complex Subsystem\r\n           \u251c\u2500\u2500 ClassA\r\n           \u251c\u2500\u2500 ClassB  \r\n           \u251c\u2500\u2500 ClassC\r\n           \u2514\u2500\u2500 ClassD\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,t.jsx)(e.h3,{id:"home-theater-system",children:"Home Theater System"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'// Complex subsystem classes\r\nclass DVDPlayer {\r\n  on() {\r\n    console.log("\ud83d\udcbf DVD Player is ON");\r\n  }\r\n  \r\n  off() {\r\n    console.log("\ud83d\udcbf DVD Player is OFF");\r\n  }\r\n  \r\n  play(movie) {\r\n    console.log(`\ud83d\udcbf Playing movie: "${movie}"`);\r\n  }\r\n  \r\n  stop() {\r\n    console.log("\ud83d\udcbf DVD Player stopped");\r\n  }\r\n}\r\n\r\nclass Projector {\r\n  on() {\r\n    console.log("\ud83d\udcfd\ufe0f Projector is ON");\r\n  }\r\n  \r\n  off() {\r\n    console.log("\ud83d\udcfd\ufe0f Projector is OFF");\r\n  }\r\n  \r\n  setInput(input) {\r\n    console.log(`\ud83d\udcfd\ufe0f Projector input set to: ${input}`);\r\n  }\r\n}\r\n\r\nclass SoundSystem {\r\n  on() {\r\n    console.log("\ud83d\udd0a Sound System is ON");\r\n  }\r\n  \r\n  off() {\r\n    console.log("\ud83d\udd0a Sound System is OFF");\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    console.log(`\ud83d\udd0a Volume set to: ${volume}`);\r\n  }\r\n  \r\n  setSurroundSound() {\r\n    console.log("\ud83d\udd0a Surround sound enabled");\r\n  }\r\n}\r\n\r\nclass Lights {\r\n  dim(level) {\r\n    console.log(`\ud83d\udca1 Lights dimmed to ${level}%`);\r\n  }\r\n  \r\n  on() {\r\n    console.log("\ud83d\udca1 Lights are ON");\r\n  }\r\n}\r\n\r\nclass PopcornMaker {\r\n  on() {\r\n    console.log("\ud83c\udf7f Popcorn maker is ON");\r\n  }\r\n  \r\n  off() {\r\n    console.log("\ud83c\udf7f Popcorn maker is OFF");\r\n  }\r\n  \r\n  pop() {\r\n    console.log("\ud83c\udf7f Popping popcorn...");\r\n    console.log("\ud83c\udf7f Popcorn ready!");\r\n  }\r\n}\r\n\r\n// Facade class\r\nclass HomeTheaterFacade {\r\n  constructor() {\r\n    this.dvdPlayer = new DVDPlayer();\r\n    this.projector = new Projector();\r\n    this.soundSystem = new SoundSystem();\r\n    this.lights = new Lights();\r\n    this.popcornMaker = new PopcornMaker();\r\n  }\r\n  \r\n  watchMovie(movie) {\r\n    console.log("\ud83c\udfac Setting up movie experience...\\n");\r\n    \r\n    // Complex sequence of operations simplified into one method\r\n    this.popcornMaker.on();\r\n    this.popcornMaker.pop();\r\n    \r\n    this.lights.dim(20);\r\n    \r\n    this.projector.on();\r\n    this.projector.setInput("DVD");\r\n    \r\n    this.soundSystem.on();\r\n    this.soundSystem.setVolume(8);\r\n    this.soundSystem.setSurroundSound();\r\n    \r\n    this.dvdPlayer.on();\r\n    this.dvdPlayer.play(movie);\r\n    \r\n    console.log(`\\n\ud83c\udf7f Enjoy your movie: "${movie}"!`);\r\n  }\r\n  \r\n  endMovie() {\r\n    console.log("\\n\ud83c\udfac Shutting down movie experience...\\n");\r\n    \r\n    this.dvdPlayer.stop();\r\n    this.dvdPlayer.off();\r\n    \r\n    this.soundSystem.off();\r\n    this.projector.off();\r\n    this.lights.on();\r\n    \r\n    this.popcornMaker.off();\r\n    \r\n    console.log("\\n\u2705 Movie experience ended. Thanks for watching!");\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Home Theater Facade Demo ===\\n");\r\n\r\nconst homeTheater = new HomeTheaterFacade();\r\n\r\n// Simple interface for complex operations\r\nhomeTheater.watchMovie("The Matrix");\r\n\r\nconsole.log("\\n" + "=".repeat(40));\r\n\r\nhomeTheater.endMovie();\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,t.jsx)(e.h3,{id:"computer-system-facade",children:"Computer System Facade"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'// Complex subsystem classes\r\nclass CPU {\r\n  start() {\r\n    console.log("\ud83d\udda5\ufe0f CPU: Starting processor");\r\n  }\r\n  \r\n  execute() {\r\n    console.log("\ud83d\udda5\ufe0f CPU: Executing instructions");\r\n  }\r\n  \r\n  stop() {\r\n    console.log("\ud83d\udda5\ufe0f CPU: Stopping processor");\r\n  }\r\n}\r\n\r\nclass Memory {\r\n  load() {\r\n    console.log("\ud83d\udcbe Memory: Loading system data");\r\n  }\r\n  \r\n  free() {\r\n    console.log("\ud83d\udcbe Memory: Freeing up memory");\r\n  }\r\n}\r\n\r\nclass HardDrive {\r\n  read() {\r\n    console.log("\ud83d\udcbd Hard Drive: Reading boot sector");\r\n  }\r\n  \r\n  write(data) {\r\n    console.log(`\ud83d\udcbd Hard Drive: Writing data - ${data}`);\r\n  }\r\n}\r\n\r\nclass GraphicsCard {\r\n  initialize() {\r\n    console.log("\ud83c\udfae Graphics Card: Initializing display");\r\n  }\r\n  \r\n  render() {\r\n    console.log("\ud83c\udfae Graphics Card: Rendering graphics");\r\n  }\r\n  \r\n  shutdown() {\r\n    console.log("\ud83c\udfae Graphics Card: Shutting down display");\r\n  }\r\n}\r\n\r\nclass NetworkCard {\r\n  connect() {\r\n    console.log("\ud83c\udf10 Network Card: Connecting to network");\r\n  }\r\n  \r\n  disconnect() {\r\n    console.log("\ud83c\udf10 Network Card: Disconnecting from network");\r\n  }\r\n}\r\n\r\nclass OperatingSystem {\r\n  load() {\r\n    console.log("\ud83d\udcbb OS: Loading operating system");\r\n  }\r\n  \r\n  startServices() {\r\n    console.log("\ud83d\udcbb OS: Starting system services");\r\n  }\r\n  \r\n  shutdown() {\r\n    console.log("\ud83d\udcbb OS: Shutting down system");\r\n  }\r\n}\r\n\r\n// Facade class\r\nclass ComputerFacade {\r\n  constructor() {\r\n    this.cpu = new CPU();\r\n    this.memory = new Memory();\r\n    this.hardDrive = new HardDrive();\r\n    this.graphicsCard = new GraphicsCard();\r\n    this.networkCard = new NetworkCard();\r\n    this.os = new OperatingSystem();\r\n  }\r\n  \r\n  startComputer() {\r\n    console.log("\ud83d\udd0c Starting computer...\\n");\r\n    \r\n    // Boot sequence - complex process simplified\r\n    this.cpu.start();\r\n    this.memory.load();\r\n    this.hardDrive.read();\r\n    this.graphicsCard.initialize();\r\n    this.networkCard.connect();\r\n    \r\n    this.os.load();\r\n    this.os.startServices();\r\n    \r\n    this.cpu.execute();\r\n    this.graphicsCard.render();\r\n    \r\n    console.log("\\n\u2705 Computer ready to use!");\r\n  }\r\n  \r\n  shutdownComputer() {\r\n    console.log("\\n\ud83d\udd0c Shutting down computer...\\n");\r\n    \r\n    // Shutdown sequence\r\n    this.os.shutdown();\r\n    this.networkCard.disconnect();\r\n    this.graphicsCard.shutdown();\r\n    this.memory.free();\r\n    this.cpu.stop();\r\n    \r\n    console.log("\\n\u2705 Computer shut down safely!");\r\n  }\r\n  \r\n  installSoftware(softwareName) {\r\n    console.log(`\\n\ud83d\udcbf Installing ${softwareName}...\\n`);\r\n    \r\n    this.hardDrive.write(`${softwareName} installation files`);\r\n    this.memory.load();\r\n    this.cpu.execute();\r\n    this.hardDrive.write(`${softwareName} registry entries`);\r\n    \r\n    console.log(`\\n\u2705 ${softwareName} installed successfully!`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Computer System Facade Demo ===\\n");\r\n\r\nconst computer = new ComputerFacade();\r\n\r\n// Simple methods hide complex subsystem interactions\r\ncomputer.startComputer();\r\n\r\nconsole.log("\\n" + "=".repeat(50));\r\n\r\ncomputer.installSoftware("Adobe Photoshop");\r\n\r\nconsole.log("\\n" + "=".repeat(50));\r\n\r\ncomputer.shutdownComputer();\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,t.jsx)(e.h3,{id:"banking-system-facade",children:"Banking System Facade"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'// Complex subsystem classes\r\nclass AccountService {\r\n  getBalance(accountNumber) {\r\n    console.log(`\ud83c\udfe6 Checking balance for account: ${accountNumber}`);\r\n    return Math.floor(Math.random() * 10000) + 1000; // Random balance\r\n  }\r\n  \r\n  debit(accountNumber, amount) {\r\n    console.log(`\ud83c\udfe6 Debiting $${amount} from account: ${accountNumber}`);\r\n    return true;\r\n  }\r\n  \r\n  credit(accountNumber, amount) {\r\n    console.log(`\ud83c\udfe6 Crediting $${amount} to account: ${accountNumber}`);\r\n    return true;\r\n  }\r\n}\r\n\r\nclass SecurityService {\r\n  authenticateUser(username, password) {\r\n    console.log(`\ud83d\udd10 Authenticating user: ${username}`);\r\n    return password.length >= 6; // Simple validation\r\n  }\r\n  \r\n  authorizeTransaction(accountNumber, amount) {\r\n    console.log(`\ud83d\udd10 Authorizing transaction of $${amount}`);\r\n    return amount <= 5000; // Limit transactions\r\n  }\r\n}\r\n\r\nclass NotificationService {\r\n  sendEmail(email, message) {\r\n    console.log(`\ud83d\udce7 Email sent to ${email}: ${message}`);\r\n  }\r\n  \r\n  sendSMS(phone, message) {\r\n    console.log(`\ud83d\udcf1 SMS sent to ${phone}: ${message}`);\r\n  }\r\n}\r\n\r\nclass AuditService {\r\n  logTransaction(transaction) {\r\n    console.log(`\ud83d\udcca Transaction logged: ${JSON.stringify(transaction)}`);\r\n  }\r\n}\r\n\r\nclass ExchangeService {\r\n  convertCurrency(amount, fromCurrency, toCurrency) {\r\n    console.log(`\ud83d\udcb1 Converting ${amount} ${fromCurrency} to ${toCurrency}`);\r\n    return amount * 1.1; // Simple conversion\r\n  }\r\n}\r\n\r\n// Facade class\r\nclass BankingFacade {\r\n  constructor() {\r\n    this.accountService = new AccountService();\r\n    this.securityService = new SecurityService();\r\n    this.notificationService = new NotificationService();\r\n    this.auditService = new AuditService();\r\n    this.exchangeService = new ExchangeService();\r\n  }\r\n  \r\n  transferMoney(fromAccount, toAccount, amount, username, password) {\r\n    console.log(`\\n\ud83d\udcb8 Processing money transfer...\\n`);\r\n    \r\n    // Complex process simplified into one method\r\n    if (!this.securityService.authenticateUser(username, password)) {\r\n      console.log("\u274c Authentication failed!");\r\n      return false;\r\n    }\r\n    \r\n    if (!this.securityService.authorizeTransaction(fromAccount, amount)) {\r\n      console.log("\u274c Transaction not authorized!");\r\n      return false;\r\n    }\r\n    \r\n    const balance = this.accountService.getBalance(fromAccount);\r\n    if (balance < amount) {\r\n      console.log("\u274c Insufficient funds!");\r\n      return false;\r\n    }\r\n    \r\n    // Execute transfer\r\n    this.accountService.debit(fromAccount, amount);\r\n    this.accountService.credit(toAccount, amount);\r\n    \r\n    // Log and notify\r\n    const transaction = {\r\n      from: fromAccount,\r\n      to: toAccount,\r\n      amount: amount,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.auditService.logTransaction(transaction);\r\n    this.notificationService.sendEmail("user@example.com", \r\n      `Transfer of $${amount} completed successfully`);\r\n    \r\n    console.log("\\n\u2705 Money transfer completed!");\r\n    return true;\r\n  }\r\n  \r\n  checkBalanceWithNotification(accountNumber, username, password, email) {\r\n    console.log(`\\n\ud83d\udcb0 Checking account balance...\\n`);\r\n    \r\n    if (!this.securityService.authenticateUser(username, password)) {\r\n      console.log("\u274c Authentication failed!");\r\n      return null;\r\n    }\r\n    \r\n    const balance = this.accountService.getBalance(accountNumber);\r\n    \r\n    this.notificationService.sendEmail(email, \r\n      `Your account balance is $${balance}`);\r\n    \r\n    this.auditService.logTransaction({\r\n      type: \'balance_check\',\r\n      account: accountNumber,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    console.log(`\\n\ud83d\udcb0 Current balance: $${balance}`);\r\n    return balance;\r\n  }\r\n  \r\n  internationalTransfer(fromAccount, toAccount, amount, fromCurrency, toCurrency, username, password) {\r\n    console.log(`\\n\ud83c\udf0d Processing international transfer...\\n`);\r\n    \r\n    if (!this.securityService.authenticateUser(username, password)) {\r\n      console.log("\u274c Authentication failed!");\r\n      return false;\r\n    }\r\n    \r\n    // Convert currency\r\n    const convertedAmount = this.exchangeService.convertCurrency(amount, fromCurrency, toCurrency);\r\n    \r\n    // Process transfer with converted amount\r\n    return this.transferMoney(fromAccount, toAccount, convertedAmount, username, password);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Banking System Facade Demo ===\\n");\r\n\r\nconst bank = new BankingFacade();\r\n\r\n// Simple interface for complex banking operations\r\nconst transferResult = bank.transferMoney(\r\n  "ACC123456", \r\n  "ACC789012", \r\n  500, \r\n  "john_doe", \r\n  "password123"\r\n);\r\n\r\nconsole.log("\\n" + "=".repeat(50));\r\n\r\nbank.checkBalanceWithNotification(\r\n  "ACC123456", \r\n  "john_doe", \r\n  "password123", \r\n  "john@example.com"\r\n);\r\n\r\nconsole.log("\\n" + "=".repeat(50));\r\n\r\nbank.internationalTransfer(\r\n  "ACC123456", \r\n  "ACC999888", \r\n  1000, \r\n  "USD", \r\n  "EUR", \r\n  "john_doe", \r\n  "password123"\r\n);\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Simplified Interface"}),": Provides easy-to-use interface for complex systems"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Loose Coupling"}),": Reduces dependencies between clients and subsystem"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Subsystem Protection"}),": Shields clients from subsystem complexity"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Easy to Use"}),": Makes complex operations accessible with simple method calls"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Centralized Control"}),": Single point of control for subsystem interactions"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Limited Flexibility"}),": May not expose all subsystem capabilities"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"God Object Risk"}),": Facade can become too large and complex"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Additional Layer"}),": Adds another layer of abstraction"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Maintenance"}),": Changes in subsystem may require facade updates"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Complex Subsystems"}),": When you have complex subsystems with many classes"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Simple Interface"}),": When you want to provide a simple interface for common operations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Legacy Integration"}),": When working with complex legacy systems"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"API Simplification"}),": When you want to create a simplified API for third parties"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Layer Separation"}),": When you want to separate different layers of your system"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-facade-variations",children:"\ud83d\udd04 Facade Variations"}),"\n",(0,t.jsxs)(e.h3,{id:"1-multiple-facades",children:["1. ",(0,t.jsx)(e.strong,{children:"Multiple Facades"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Different facades for different user types\r\nclass AdminBankingFacade extends BankingFacade {\r\n  generateReport() {\r\n    // Admin-specific functionality\r\n  }\r\n}\r\n\r\nclass CustomerBankingFacade extends BankingFacade {\r\n  // Only customer-relevant methods exposed\r\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"2-configurable-facade",children:["2. ",(0,t.jsx)(e.strong,{children:"Configurable Facade"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"class ConfigurableFacade {\r\n  constructor(config) {\r\n    this.subsystems = this.createSubsystems(config);\r\n  }\r\n  \r\n  createSubsystems(config) {\r\n    // Create subsystems based on configuration\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Adapter"}),": Both provide interface to other code, but Adapter makes incompatible interfaces compatible while Facade simplifies complex interfaces"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Mediator"}),": Both provide intermediary objects, but Mediator enables communication between objects while Facade simplifies subsystem interface"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Proxy"}),": Both provide surrogate access, but Proxy controls access while Facade simplifies access"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Abstract Factory"}),": Can be used with Facade to create subsystem objects"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://refactoring.guru/design-patterns/facade",children:"Facade Pattern - Refactoring.Guru"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.dofactory.com/javascript/design-patterns/facade",children:"JavaScript Facade Pattern Examples"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>i});var s=r(6540);const t={},o=s.createContext(t);function a(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);