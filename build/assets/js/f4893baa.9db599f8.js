"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7277],{8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(n){const e=s.useContext(t);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(t.Provider,{value:e},n.children)}},9292:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"dsa-key-pattern/Dynamic-Programming","title":"Dynamic Programming","description":"Description","source":"@site/docs/dsa-key-pattern/19-Dynamic-Programming.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Dynamic-Programming","permalink":"/docs/dsa-key-pattern/Dynamic-Programming","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":19,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Trees","permalink":"/docs/dsa-key-pattern/Trees"},"next":{"title":"Graphs","permalink":"/docs/dsa-key-pattern/Graphs"}}');var r=i(4848),t=i(8453);const l={},o="Dynamic Programming",c={},a=[{value:"Description",id:"description",level:2},{value:"Categories",id:"categories",level:2},{value:"Take / Not take (DP)",id:"take--not-take-dp",level:2},{value:"Infinite Supply (DP)",id:"infinite-supply-dp",level:2},{value:"Longest Increasing Subsequence",id:"longest-increasing-subsequence",level:2},{value:"DP on Grids",id:"dp-on-grids",level:2},{value:"DP on Strings",id:"dp-on-strings",level:2},{value:"DP on Stocks",id:"dp-on-stocks",level:2},{value:"Partition DP (MCM)",id:"partition-dp-mcm",level:2}];function d(n){const e={a:"a",br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"dynamic-programming",children:"Dynamic Programming"})}),"\n",(0,r.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(e.p,{children:"Dynamic Programming solves complex problems by breaking them down into simpler subproblems and storing results to avoid redundant calculations."}),"\n",(0,r.jsx)(e.h2,{id:"categories",children:"Categories"}),"\n",(0,r.jsx)(e.h2,{id:"take--not-take-dp",children:"Take / Not take (DP)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Solve optimization problems like selecting items with the max/min value under certain constraints."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(n \xd7 target)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(n \xd7 target)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"House Robber II"}),"\n",(0,r.jsx)(e.li,{children:"Target Sum"}),"\n",(0,r.jsx)(e.li,{children:"Partition Equal Subset Sum"}),"\n",(0,r.jsx)(e.li,{children:"Ones and Zeroes"}),"\n",(0,r.jsx)(e.li,{children:"Last Stone Weight II"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," For each item, decide whether to take it or not. Optimize based on constraints."]}),"\n",(0,r.jsx)(e.h2,{id:"infinite-supply-dp",children:"Infinite Supply (DP)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Similar to the 0/1 knapsack, but items can be chosen multiple times."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(n \xd7 amount)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(amount)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Coin Change"}),"\n",(0,r.jsx)(e.li,{children:"Coin Change II"}),"\n",(0,r.jsx)(e.li,{children:"Perfect Squares"}),"\n",(0,r.jsx)(e.li,{children:"Minimum Cost For Tickets"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Each item can be used unlimited times. Build solution incrementally."]}),"\n",(0,r.jsx)(e.h2,{id:"longest-increasing-subsequence",children:"Longest Increasing Subsequence"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Find the longest subsequence of a given sequence where the elements are in ascending order."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(n log n)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(n)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Longest Increasing Subsequence"}),"\n",(0,r.jsx)(e.li,{children:"Largest Divisible Subset"}),"\n",(0,r.jsx)(e.li,{children:"Maximum Length of Pair Chain"}),"\n",(0,r.jsx)(e.li,{children:"Number of LIS"}),"\n",(0,r.jsx)(e.li,{children:"Longest String Chain"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Use patience sorting or DP with binary search optimization."]}),"\n",(0,r.jsx)(e.h2,{id:"dp-on-grids",children:"DP on Grids"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Dynamic Programming on matrices involves solving problems that can be broken down into smaller overlapping subproblems within a matrix."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(m \xd7 n)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(m \xd7 n)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Unique Paths II"}),"\n",(0,r.jsx)(e.li,{children:"Minimum Path Sum"}),"\n",(0,r.jsx)(e.li,{children:"Triangle"}),"\n",(0,r.jsx)(e.li,{children:"Minimum Falling Path Sum"}),"\n",(0,r.jsx)(e.li,{children:"Maximal Square"}),"\n",(0,r.jsx)(e.li,{children:"Cherry Pickup"}),"\n",(0,r.jsx)(e.li,{children:"Dungeon Game"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Build solution cell by cell, often considering paths from top and left."]}),"\n",(0,r.jsx)(e.h2,{id:"dp-on-strings",children:"DP on Strings"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Problems involving 2 strings, focus on what happens when the last characters match or don't match."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(m \xd7 n) where m and n are string lengths",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(m \xd7 n)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Longest Common Subsequence"}),"\n",(0,r.jsx)(e.li,{children:"Longest Palindromic Subsequence"}),"\n",(0,r.jsx)(e.li,{children:"Palindromic Substrings"}),"\n",(0,r.jsx)(e.li,{children:"Longest Palindromic Substrings"}),"\n",(0,r.jsx)(e.li,{children:"Edit Distance"}),"\n",(0,r.jsx)(e.li,{children:"Minimum ASCII Delete Sum for Two Strings"}),"\n",(0,r.jsx)(e.li,{children:"Distinct Subsequences"}),"\n",(0,r.jsx)(e.li,{children:"Shortest Common Supersequence"}),"\n",(0,r.jsx)(e.li,{children:"Wildcard Matching"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Compare characters and decide based on match/mismatch."]}),"\n",(0,r.jsx)(e.h2,{id:"dp-on-stocks",children:"DP on Stocks"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Maximize profit from buying and selling stocks over time while considering constraints."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(n)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(1) to O(n)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Buy and Sell Stocks II"}),"\n",(0,r.jsx)(e.li,{children:"Buy and Sell Stocks III"}),"\n",(0,r.jsx)(e.li,{children:"Buy and Sell Stocks IV"}),"\n",(0,r.jsx)(e.li,{children:"Buy and Sell Stocks with Cooldown"}),"\n",(0,r.jsx)(e.li,{children:"Buy and Sell Stocks with Transaction fee"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Track states (holding/not holding stock, transactions used)."]}),"\n",(0,r.jsx)(e.h2,{id:"partition-dp-mcm",children:"Partition DP (MCM)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"})," Divide sequence into partitions optimally. Explore all possible partitions and combine results."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity:"})," O(n\xb3)",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.strong,{children:"Space Complexity:"})," O(n\xb2)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Partition array for Maximum Sum"}),"\n",(0,r.jsx)(e.li,{children:"Burst Balloons"}),"\n",(0,r.jsx)(e.li,{children:"Minimum Cost to Cut a Stick"}),"\n",(0,r.jsx)(e.li,{children:"Palindrome Partitioning II"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Pattern:"})," Try all possible partition points and combine optimal solutions of subproblems."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://leetcode.com/discuss/post/458695/dynamic-programming-patterns-by-aatalyk-pmgr/",children:"https://leetcode.com/discuss/post/458695/dynamic-programming-patterns-by-aatalyk-pmgr/"}),"\r\n",(0,r.jsx)(e.a,{href:"https://leetcode.com/discuss/post/662866/dp-for-beginners-problems-patterns-sampl-atdb/",children:"https://leetcode.com/discuss/post/662866/dp-for-beginners-problems-patterns-sampl-atdb/"})]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);