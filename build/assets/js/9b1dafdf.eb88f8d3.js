"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4158],{3765:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"javascript/types-of-identifiers","title":"CHAPTER 1 | Data TYPES OR TYPES OF IDENTIFIERS","description":"The var keyword is used to define or declare a variable identifier.","source":"@site/docs/javascript/types-of-identifiers.md","sourceDirName":"javascript","slug":"/javascript/types-of-identifiers","permalink":"/docs/javascript/types-of-identifiers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Type Casting and Coercion","permalink":"/docs/javascript/type-casting-and-coercion"},"next":{"title":"use strict","permalink":"/docs/javascript/use-strict"}}');var s=a(4848),i=a(8453);const t={},l="CHAPTER 1 | Data TYPES OR TYPES OF IDENTIFIERS",c={},o=[];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chapter-1--data-types-or-types-of-identifiers",children:"CHAPTER 1 | Data TYPES OR TYPES OF IDENTIFIERS"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The var keyword is used to define or declare a variable identifier."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var  variableName;\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Programmers can also initialize using the assignment operator."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var  variableName = value;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Computer memory is in the form of bits(0 or 1) and generally, ram memory is utilized for programming.when we create a variable with the variableName, we assign a memory address and the size of memory is dependent on the value being assigned to the variable."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Rules for variables names"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The first character must be a letter or an underscore (_). You can't use a number as the first character."}),"\n",(0,s.jsx)(n.li,{children:"The rest of the variable name can include any letter, any number, or the underscore. You can't use any other characters, including spaces, symbols, and punctuation marks."}),"\n",(0,s.jsx)(n.li,{children:"Variable names are case sensitive."}),"\n",(0,s.jsx)(n.li,{children:"There's no limit to the length of the variable name."}),"\n",(0,s.jsx)(n.li,{children:"You can't use one of JavaScript's reserved words as a variable name."}),"\n",(0,s.jsx)(n.li,{children:"Additionally, As a rule of naming convention, we use camel case for variable name and pascal case for a class or constructor name."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"e.g."})," of camel case (the first character is always the small case and other from the character of words are capitalized )"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var firstName = "sparsh";\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"e.g."})," of pascal case (the first character of the word is always the upper case and generally class or constructor name is in pascal case)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class Student{};\n"})}),"\n",(0,s.jsx)(n.p,{children:"JavaScript is a loosely typed or weakly typed language, i.e., while declaring the variable we don't define the type of value the variable holds. It's also a dynamic language, as the creation of variables at runtime is possible and the type of variable is determined at runtime or type checking is runtime."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"In JavaScript, Actually two types of type of identifier:-"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reference types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"stored in heap memory"}),"\n",(0,s.jsx)(n.li,{children:"Dynamically stored and considered to be faster. e.g., Object, Array, Function (which is called object of function)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Primitive types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"stored in stack memory and are of fixed size"}),"\n",(0,s.jsx)(n.li,{children:"stored in stack memory e.g., number, null, string, boolean, undefined, symbol, and BigInt"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Below are the types of value an identifier can hold in JavaScript:-"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"number"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var  num = 13; // typeof num -> number\nvar  num = 12.4; // typeof num -> number\nvar  num = -1; // typeof num -> number\nvar  num = NaN; // typeof num -> number\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"string"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var  str = "sparsh"; // typeof num -> string\nvar  str = "s"; // typeof num -> string\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"boolean"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var  flag = true; // typeof num -> boolean\nvar  flag = false; // typeof num -> boolean\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"undefined"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var  value; // typeof value-> undefined\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"object"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var  arr = []; // typeof arr -> object\nvar  value = null; // typeof value-> object\nvar  obj = { name:  "sparsh" }; // typeof obj -> object\ntypeof  alert; // alert is one of inbuilt functions\nfunction  num() {} // typeof num; -> function symbol;\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Symbol"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var  unique = Symbol("id"); // typeof unique -> symbol\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implied globals [obsolete]"}),"\nAny variable which is not defined or declared is considered a global variable by default.\ne.g;-","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"variableName = value;\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var r=a(6540);const s={},i=r.createContext(s);function t(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);