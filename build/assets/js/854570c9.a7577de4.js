"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[654],{2174:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"dsa-key-pattern/Sliding-Window","title":"Sliding Window","description":"Description","source":"@site/docs/dsa-key-pattern/04-Sliding-Window.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Sliding-Window","permalink":"/docs/dsa-key-pattern/Sliding-Window","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Prefix Sum","permalink":"/docs/dsa-key-pattern/Prefix-Sum"},"next":{"title":"Two Pointers","permalink":"/docs/dsa-key-pattern/Two-Pointers"}}');var s=i(4848),r=i(8453);const l={},o="Sliding Window",d={},a=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Types of Sliding Window",id:"types-of-sliding-window",level:2},{value:"Fixed Size",id:"fixed-size",level:3},{value:"Variable Size",id:"variable-size",level:3},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Implementation Template",id:"implementation-template",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sliding-window",children:"Sliding Window"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"A sliding window is a subarray or substring that moves over data to solve problems efficiently in linear time."}),"\n",(0,s.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(n)"}),"\n",(0,s.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(k) where k is the window size"}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fixed Size Window"}),": Window size remains constant throughout"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Variable Size Window"}),": Window size changes based on conditions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Two Pointer Approach"}),": Left and right pointers define window boundaries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Window State"}),": Maintain relevant information about current window"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-sliding-window",children:"Types of Sliding Window"}),"\n",(0,s.jsx)(n.h3,{id:"fixed-size",children:"Fixed Size"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Window size is given in the problem"}),"\n",(0,s.jsx)(n.li,{children:"Move window by removing leftmost and adding rightmost element"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Problems:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maximum Sum Subarray of Size K"}),"\n",(0,s.jsx)(n.li,{children:"Number of Subarrays having Average Greater or Equal to Threshold"}),"\n",(0,s.jsx)(n.li,{children:"Repeated DNA sequences"}),"\n",(0,s.jsx)(n.li,{children:"Permutation in String"}),"\n",(0,s.jsx)(n.li,{children:"Sliding Subarray Beauty"}),"\n",(0,s.jsx)(n.li,{children:"Sliding Window Maximum"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/discuss/post/1773891/sliding-window-technique-and-question-ba-9tt4/",children:"https://leetcode.com/discuss/post/1773891/sliding-window-technique-and-question-ba-9tt4/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/frequency-of-the-most-frequent-element/solutions/1175088/C++-Maximum-Sliding-Window-Cheatsheet-Template/",children:"https://leetcode.com/problems/frequency-of-the-most-frequent-element/solutions/1175088/C++-Maximum-Sliding-Window-Cheatsheet-Template/"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"variable-size",children:"Variable Size"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Window size changes based on problem constraints"}),"\n",(0,s.jsx)(n.li,{children:"Expand window when condition not met, shrink when met"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Problems:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Longest Substring Without Repeating Characters"}),"\n",(0,s.jsx)(n.li,{children:"Minimum Size Subarray Sum"}),"\n",(0,s.jsx)(n.li,{children:"Subarray Product Less Than K"}),"\n",(0,s.jsx)(n.li,{children:"Max Consecutive Ones"}),"\n",(0,s.jsx)(n.li,{children:"Fruits Into Baskets"}),"\n",(0,s.jsx)(n.li,{children:"Count Number of Nice Subarrays"}),"\n",(0,s.jsx)(n.li,{children:"Minimum Window Substring"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Problems involving contiguous subarrays or substrings"}),"\n",(0,s.jsx)(n.li,{children:"Finding optimal subarray/substring with certain conditions"}),"\n",(0,s.jsx)(n.li,{children:"When brute force would be O(n\xb2) or O(n\xb3)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Find maximum/minimum in subarray of size k"'}),"\n",(0,s.jsx)(n.li,{children:'"Longest substring with condition"'}),"\n",(0,s.jsx)(n.li,{children:'"Shortest subarray with condition"'}),"\n",(0,s.jsx)(n.li,{children:'"Count subarrays/substrings with property"'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-template",children:"Implementation Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Fixed Window:\r\n- Initialize window of size k\r\n- Slide window: remove left, add right\r\n- Update result at each step\r\n\r\nVariable Window:\r\n- Expand window (add right element)\r\n- While condition violated, shrink window (remove left)\r\n- Update result when condition satisfied\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);