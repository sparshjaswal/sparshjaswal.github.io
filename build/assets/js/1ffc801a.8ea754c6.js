"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1161],{8033:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"design-pattern/behavioral/observer","title":"Observer Pattern \ud83d\udd14","description":"Definition: The Observer pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.","source":"@site/docs/design-pattern/behavioral/observer.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/observer","permalink":"/docs/design-pattern/behavioral/observer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Memento Pattern \ud83d\udcbe","permalink":"/docs/design-pattern/behavioral/memento"},"next":{"title":"State Pattern \ud83c\udf9b\ufe0f","permalink":"/docs/design-pattern/behavioral/state"}}');var t=n(4848),i=n(8453);const a={},o="Observer Pattern \ud83d\udd14",c={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Code Example",id:"-code-example",level:2},{value:"Basic Implementation",id:"basic-implementation",level:3},{value:"\ud83c\udf1f Real-World Examples",id:"-real-world-examples",level:2},{value:"1. Stock Price Monitor",id:"1-stock-price-monitor",level:3},{value:"2. Model-View Architecture",id:"2-model-view-architecture",level:3},{value:"3. Event System with Custom Events",id:"3-event-system-with-custom-events",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83c\udfad Variations",id:"-variations",level:2},{value:"1. <strong>Push vs Pull Model</strong>",id:"1-push-vs-pull-model",level:3},{value:"2. <strong>Async Observer</strong>",id:"2-async-observer",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"observer-pattern-",children:"Observer Pattern \ud83d\udd14"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Definition"}),": The Observer pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,t.jsx)(r.p,{children:"Create a subscription mechanism to notify multiple objects about any events that happen to the object they're observing."}),"\n",(0,t.jsx)(r.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,t.jsx)(r.p,{children:"Imagine you're building an e-commerce application. Customers are interested in a particular product that's currently out of stock. You could have customers check the availability every day, but this would be wasteful. Alternatively, you could send emails to all customers whenever any product becomes available, but this would spam customers who aren't interested in that specific product."}),"\n",(0,t.jsx)(r.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,t.jsx)(r.p,{children:"The Observer pattern suggests that you add a subscription mechanism to the publisher class so individual objects can subscribe to event notifications. This mechanism consists of:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Subject (Publisher)"}),": Maintains a list of observers and provides methods to add/remove observers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Observer (Subscriber)"}),": Defines an interface for objects that should be notified of changes"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Concrete Subject"}),": Stores state of interest and notifies observers when state changes"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Concrete Observer"}),": Implements the Observer interface to keep state consistent with the subject"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Subject (Publisher)\r\n\u251c\u2500\u2500 observers: Observer[]\r\n\u251c\u2500\u2500 subscribe(observer)\r\n\u251c\u2500\u2500 unsubscribe(observer)\r\n\u2514\u2500\u2500 notify()\r\n\r\nObserver (Subscriber)\r\n\u2514\u2500\u2500 update(data)\r\n\r\nConcreteSubject extends Subject\r\n\u251c\u2500\u2500 state\r\n\u251c\u2500\u2500 setState(state)\r\n\u2514\u2500\u2500 getState()\r\n\r\nConcreteObserver implements Observer\r\n\u251c\u2500\u2500 update(data)\r\n\u2514\u2500\u2500 doSomething()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-code-example",children:"\ud83d\udcbb Code Example"}),"\n",(0,t.jsx)(r.h3,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:'// Observer interface\r\nclass Observer {\r\n  update(data) {\r\n    throw new Error("update() method must be implemented");\r\n  }\r\n}\r\n\r\n// Subject (Publisher)\r\nclass Subject {\r\n  constructor() {\r\n    this.observers = [];\r\n  }\r\n  \r\n  subscribe(observer) {\r\n    this.observers.push(observer);\r\n  }\r\n  \r\n  unsubscribe(observer) {\r\n    this.observers = this.observers.filter(obs => obs !== observer);\r\n  }\r\n  \r\n  notify(data) {\r\n    this.observers.forEach(observer => observer.update(data));\r\n  }\r\n}\r\n\r\n// Concrete Subject\r\nclass NewsAgency extends Subject {\r\n  constructor() {\r\n    super();\r\n    this.news = "";\r\n  }\r\n  \r\n  setNews(news) {\r\n    this.news = news;\r\n    this.notify(news);\r\n  }\r\n  \r\n  getNews() {\r\n    return this.news;\r\n  }\r\n}\r\n\r\n// Concrete Observers\r\nclass NewsChannel extends Observer {\r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n    this.news = "";\r\n  }\r\n  \r\n  update(news) {\r\n    this.news = news;\r\n    console.log(`${this.name} broadcasting: ${news}`);\r\n  }\r\n}\r\n\r\nclass OnlinePortal extends Observer {\r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n    this.news = "";\r\n  }\r\n  \r\n  update(news) {\r\n    this.news = news;\r\n    console.log(`${this.name} published online: ${news}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconst agency = new NewsAgency();\r\nconst cnn = new NewsChannel("CNN");\r\nconst bbc = new NewsChannel("BBC");\r\nconst portal = new OnlinePortal("News Portal");\r\n\r\nagency.subscribe(cnn);\r\nagency.subscribe(bbc);\r\nagency.subscribe(portal);\r\n\r\nagency.setNews("Breaking: New JavaScript framework released!");\r\n// Output:\r\n// CNN broadcasting: Breaking: New JavaScript framework released!\r\n// BBC broadcasting: Breaking: New JavaScript framework released!\r\n// News Portal published online: Breaking: New JavaScript framework released!\n'})}),"\n",(0,t.jsx)(r.h2,{id:"-real-world-examples",children:"\ud83c\udf1f Real-World Examples"}),"\n",(0,t.jsx)(r.h3,{id:"1-stock-price-monitor",children:"1. Stock Price Monitor"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:'class Stock extends Subject {\r\n  constructor(symbol, price) {\r\n    super();\r\n    this.symbol = symbol;\r\n    this.price = price;\r\n  }\r\n  \r\n  setPrice(price) {\r\n    this.price = price;\r\n    this.notify({\r\n      symbol: this.symbol,\r\n      price: price,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n}\r\n\r\nclass StockDisplay extends Observer {\r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n  \r\n  update(stockData) {\r\n    console.log(`${this.name}: ${stockData.symbol} is now $${stockData.price}`);\r\n  }\r\n}\r\n\r\nclass StockAlert extends Observer {\r\n  constructor(threshold) {\r\n    super();\r\n    this.threshold = threshold;\r\n  }\r\n  \r\n  update(stockData) {\r\n    if (stockData.price > this.threshold) {\r\n      console.log(`\ud83d\udea8 ALERT: ${stockData.symbol} exceeded $${this.threshold}!`);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconst appleStock = new Stock("AAPL", 150);\r\nconst dashboard = new StockDisplay("Dashboard");\r\nconst mobileApp = new StockDisplay("Mobile App");\r\nconst priceAlert = new StockAlert(180);\r\n\r\nappleStock.subscribe(dashboard);\r\nappleStock.subscribe(mobileApp);\r\nappleStock.subscribe(priceAlert);\r\n\r\nappleStock.setPrice(185);\n'})}),"\n",(0,t.jsx)(r.h3,{id:"2-model-view-architecture",children:"2. Model-View Architecture"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class UserModel extends Subject {\r\n  constructor() {\r\n    super();\r\n    this.users = [];\r\n  }\r\n  \r\n  addUser(user) {\r\n    this.users.push(user);\r\n    this.notify({ action: 'add', user, users: this.users });\r\n  }\r\n  \r\n  removeUser(userId) {\r\n    const user = this.users.find(u => u.id === userId);\r\n    this.users = this.users.filter(u => u.id !== userId);\r\n    this.notify({ action: 'remove', user, users: this.users });\r\n  }\r\n}\r\n\r\nclass UserListView extends Observer {\r\n  update(data) {\r\n    console.log(`\ud83d\udccb User List updated: ${data.users.length} users`);\r\n    if (data.action === 'add') {\r\n      console.log(`\u2795 Added: ${data.user.name}`);\r\n    } else if (data.action === 'remove') {\r\n      console.log(`\u2796 Removed: ${data.user.name}`);\r\n    }\r\n  }\r\n}\r\n\r\nclass UserStatsView extends Observer {\r\n  update(data) {\r\n    const totalUsers = data.users.length;\r\n    const activeUsers = data.users.filter(u => u.active).length;\r\n    console.log(`\ud83d\udcca Stats: ${totalUsers} total, ${activeUsers} active`);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-event-system-with-custom-events",children:"3. Event System with Custom Events"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class EventEmitter extends Subject {\r\n  constructor() {\r\n    super();\r\n    this.events = new Map();\r\n  }\r\n  \r\n  on(event, observer) {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event).push(observer);\r\n  }\r\n  \r\n  off(event, observer) {\r\n    if (this.events.has(event)) {\r\n      const observers = this.events.get(event);\r\n      this.events.set(event, observers.filter(obs => obs !== observer));\r\n    }\r\n  }\r\n  \r\n  emit(event, data) {\r\n    if (this.events.has(event)) {\r\n      this.events.get(event).forEach(observer => observer.update(data));\r\n    }\r\n  }\r\n}\r\n\r\nclass Logger extends Observer {\r\n  update(data) {\r\n    console.log(`\ud83d\udcdd Log: ${JSON.stringify(data)}`);\r\n  }\r\n}\r\n\r\nclass EmailService extends Observer {\r\n  update(data) {\r\n    if (data.type === 'user_registered') {\r\n      console.log(`\ud83d\udce7 Welcome email sent to ${data.email}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconst eventBus = new EventEmitter();\r\nconst logger = new Logger();\r\nconst emailService = new EmailService();\r\n\r\neventBus.on('user_registered', logger);\r\neventBus.on('user_registered', emailService);\r\n\r\neventBus.emit('user_registered', {\r\n  type: 'user_registered',\r\n  userId: 123,\r\n  email: 'john@example.com'\r\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Open/Closed Principle"}),": You can introduce new subscriber classes without changing publisher code"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Loose Coupling"}),": The publisher doesn't need to know concrete classes of subscribers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Dynamic Relationships"}),": You can establish relations between objects at runtime"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Broadcast Communication"}),": One-to-many communication is easy to implement"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Random Order"}),": Subscribers are notified in random order"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Memory Leaks"}),": Observers might not get garbage collected if not properly unsubscribed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Performance"}),": If there are many observers, notifications can be slow"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Complex Dependencies"}),": Can create complex webs of dependencies that are hard to understand"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Model-View architectures"}),": When changes to one object require updating multiple UI components"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Event handling systems"}),": When you need to handle events in multiple places"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Publish-Subscribe systems"}),": When you need loose coupling between components"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Real-time data updates"}),": Stock prices, chat messages, live feeds"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Caching"}),": When cached data needs to be invalidated across multiple caches"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-variations",children:"\ud83c\udfad Variations"}),"\n",(0,t.jsxs)(r.h3,{id:"1-push-vs-pull-model",children:["1. ",(0,t.jsx)(r.strong,{children:"Push vs Pull Model"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Push Model - Subject sends data\r\nclass PushSubject extends Subject {\r\n  notify(data) {\r\n    this.observers.forEach(observer => observer.update(data));\r\n  }\r\n}\r\n\r\n// Pull Model - Observer requests data\r\nclass PullSubject extends Subject {\r\n  notify() {\r\n    this.observers.forEach(observer => observer.update(this));\r\n  }\r\n}\r\n\r\nclass PullObserver extends Observer {\r\n  update(subject) {\r\n    const data = subject.getData(); // Observer pulls data\r\n    this.handleData(data);\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"2-async-observer",children:["2. ",(0,t.jsx)(r.strong,{children:"Async Observer"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class AsyncSubject extends Subject {\r\n  async notify(data) {\r\n    const promises = this.observers.map(observer => observer.update(data));\r\n    await Promise.all(promises);\r\n  }\r\n}\r\n\r\nclass AsyncObserver extends Observer {\r\n  async update(data) {\r\n    // Perform async operations\r\n    await this.processDataAsync(data);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Mediator"}),": Both patterns promote loose coupling, but Observer distributes communication by introducing observer objects"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Command"}),": Can use Observer to notify about command execution"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"MVC/MVP"}),": Observer is fundamental to these architectural patterns"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://refactoring.guru/design-patterns/observer",children:"Observer Pattern - Refactoring.Guru"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Events",children:"JavaScript Event System"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var s=n(6540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);