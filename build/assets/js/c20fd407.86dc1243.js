"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7177],{6625:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"javascript/async-await","title":"Async & Await","description":"What is Async/Await?","source":"@site/docs/javascript/async-await.md","sourceDirName":"javascript","slug":"/javascript/async-await","permalink":"/docs/javascript/async-await","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u23f0 Async/Await - Complete Guide","permalink":"/docs/javascript/async-await-enhanced"},"next":{"title":"What is Asynchronous?","permalink":"/docs/javascript/asynchronous"}}');var r=s(4848),t=s(8453);const i={},c="Async & Await",o={},l=[{value:"What is Async/Await?",id:"what-is-asyncawait",level:2},{value:"Basic Syntax",id:"basic-syntax",level:2},{value:"Async Function",id:"async-function",level:3},{value:"Await Keyword",id:"await-keyword",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Fetching Data",id:"fetching-data",level:3},{value:"Sequential vs Parallel Execution",id:"sequential-vs-parallel-execution",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Try-Catch",id:"try-catch",level:3},{value:"Multiple Async Operations",id:"multiple-async-operations",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Timeout with Async/Await",id:"timeout-with-asyncawait",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Processing Arrays",id:"processing-arrays",level:3},{value:"Important Rules",id:"important-rules",level:2},{value:"Async/Await vs Promises",id:"asyncawait-vs-promises",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"async--await",children:"Async & Await"})}),"\n",(0,r.jsx)(e.h2,{id:"what-is-asyncawait",children:"What is Async/Await?"}),"\n",(0,r.jsx)(e.p,{children:"Async/await is syntactic sugar built on top of Promises, making asynchronous code look and behave more like synchronous code."}),"\n",(0,r.jsx)(e.h2,{id:"basic-syntax",children:"Basic Syntax"}),"\n",(0,r.jsx)(e.h3,{id:"async-function",children:"Async Function"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// Always returns a Promise\nasync function fetchData() {\n    return "Hello World"; // Automatically wrapped in Promise.resolve()\n}\n\nfetchData().then(data => console.log(data)); // "Hello World"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"await-keyword",children:"Await Keyword"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'async function getData() {\n    // Wait for the promise to resolve\n    const data = await fetchData();\n    console.log(data); // "Hello World"\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,r.jsx)(e.h3,{id:"fetching-data",children:"Fetching Data"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// Using Promises (older way)\nfunction fetchUserData() {\n    return fetch('/api/user')\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            return data;\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n}\n\n// Using Async/Await (modern way)\nasync function fetchUserData() {\n    try {\n        const response = await fetch('/api/user');\n        const data = await response.json();\n        console.log(data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"sequential-vs-parallel-execution",children:"Sequential vs Parallel Execution"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// Sequential execution (slower)\nasync function sequential() {\n    const user = await fetchUser();\n    const posts = await fetchPosts();\n    const comments = await fetchComments();\n    \n    return { user, posts, comments };\n}\n\n// Parallel execution (faster)\nasync function parallel() {\n    const [user, posts, comments] = await Promise.all([\n        fetchUser(),\n        fetchPosts(),\n        fetchComments()\n    ]);\n    \n    return { user, posts, comments };\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(e.h3,{id:"try-catch",children:"Try-Catch"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"async function handleErrors() {\n    try {\n        const data = await riskyOperation();\n        console.log('Success:', data);\n    } catch (error) {\n        console.error('Failed:', error.message);\n    } finally {\n        console.log('Cleanup operations');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"multiple-async-operations",children:"Multiple Async Operations"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"async function processData() {\n    try {\n        const step1 = await firstOperation();\n        const step2 = await secondOperation(step1);\n        const step3 = await thirdOperation(step2);\n        \n        return step3;\n    } catch (error) {\n        // Handle any error from any step\n        console.error('Process failed:', error);\n        throw error; // Re-throw if needed\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsx)(e.h3,{id:"timeout-with-asyncawait",children:"Timeout with Async/Await"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"function timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function delayedOperation() {\n    console.log('Starting...');\n    await timeout(2000);\n    console.log('Done after 2 seconds');\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"async function retryOperation(operation, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const result = await operation();\n            return result;\n        } catch (error) {\n            if (i === maxRetries - 1) throw error;\n            console.log(`Attempt ${i + 1} failed, retrying...`);\n            await timeout(1000); // Wait before retry\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"processing-arrays",children:"Processing Arrays"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const urls = ['url1', 'url2', 'url3'];\n\n// Sequential processing\nasync function processSequentially() {\n    const results = [];\n    for (const url of urls) {\n        const result = await fetch(url);\n        results.push(result);\n    }\n    return results;\n}\n\n// Parallel processing\nasync function processInParallel() {\n    const promises = urls.map(url => fetch(url));\n    const results = await Promise.all(promises);\n    return results;\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"important-rules",children:"Important Rules"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"await can only be used inside async functions"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// \u274c Wrong\nfunction regularFunction() {\n    const data = await fetchData(); // SyntaxError\n}\n\n// \u2705 Correct\nasync function asyncFunction() {\n    const data = await fetchData();\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"async functions always return Promises"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"async function example() {\n    return 42;\n}\n\nexample().then(value => console.log(value)); // 42\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Error handling is crucial"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// \u274c Unhandled promise rejection\nasync function badExample() {\n    await riskyOperation(); // If this fails, error is unhandled\n}\n\n// \u2705 Properly handled\nasync function goodExample() {\n    try {\n        await riskyOperation();\n    } catch (error) {\n        console.error('Handled:', error);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"asyncawait-vs-promises",children:"Async/Await vs Promises"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// Promise chain\nfunction promiseWay() {\n    return fetchUser()\n        .then(user => fetchPosts(user.id))\n        .then(posts => fetchComments(posts[0].id))\n        .then(comments => ({ user, posts, comments }))\n        .catch(error => console.error(error));\n}\n\n// Async/await\nasync function asyncWay() {\n    try {\n        const user = await fetchUser();\n        const posts = await fetchPosts(user.id);\n        const comments = await fetchComments(posts[0].id);\n        return { user, posts, comments };\n    } catch (error) {\n        console.error(error);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Always use try-catch for error handling"}),"\n",(0,r.jsx)(e.li,{children:"Use Promise.all() for parallel operations"}),"\n",(0,r.jsx)(e.li,{children:"Don't forget to handle rejections"}),"\n",(0,r.jsx)(e.li,{children:"Keep async functions focused and small"}),"\n",(0,r.jsx)(e.li,{children:"Use async/await consistently throughout your codebase"}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>c});var a=s(6540);const r={},t=a.createContext(r);function i(n){const e=a.useContext(t);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);