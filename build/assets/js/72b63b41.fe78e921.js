"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2050],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},8469:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"dsa-key-pattern/Backtracking","title":"Backtracking","description":"Description","source":"@site/docs/dsa-key-pattern/11-Backtracking.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Backtracking","permalink":"/docs/dsa-key-pattern/Backtracking","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Depth First Search (DFS)","permalink":"/docs/dsa-key-pattern/Depth-First-Search"},"next":{"title":"Modified Binary Search","permalink":"/docs/dsa-key-pattern/Modified-Binary-Search"}}');var r=i(4848),s=i(8453);const l={},a="Backtracking",c={},o=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Backtracking Template",id:"backtracking-template",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Combination/Subset Generation",id:"combinationsubset-generation",level:3},{value:"Permutation Generation",id:"permutation-generation",level:3},{value:"Constraint Satisfaction",id:"constraint-satisfaction",level:3},{value:"Path Finding",id:"path-finding",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"backtracking",children:"Backtracking"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Backtracking helps in problems where you need to explore all potential solutions, such as solving puzzles, generating combinations, or finding paths."}),"\n",(0,r.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,r.jsx)(n.p,{children:"O(b^d) where b is branching factor and d is depth"}),"\n",(0,r.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,r.jsx)(n.p,{children:"O(d) for recursion stack"}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explore and Backtrack"}),": Try a choice, if it doesn't work, undo and try next"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Decision Tree"}),": Each choice creates a branch in the solution tree"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pruning"}),": Skip branches that can't lead to valid solutions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Management"}),": Track current state and undo changes when backtracking"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Permutation II"}),"\n",(0,r.jsx)(n.li,{children:"Combination Sum"}),"\n",(0,r.jsx)(n.li,{children:"Generate Parenthesis"}),"\n",(0,r.jsx)(n.li,{children:"N-Queens"}),"\n",(0,r.jsx)(n.li,{children:"Sudoku Solver"}),"\n",(0,r.jsx)(n.li,{children:"Palindrome Partitioning"}),"\n",(0,r.jsx)(n.li,{children:"Word Search"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generate all possible combinations/permutations"}),"\n",(0,r.jsx)(n.li,{children:"Solve constraint satisfaction problems (puzzles)"}),"\n",(0,r.jsx)(n.li,{children:"Find all valid arrangements or paths"}),"\n",(0,r.jsx)(n.li,{children:"Problems with multiple choices at each step"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Find all possible..."'}),"\n",(0,r.jsx)(n.li,{children:'"Generate all combinations/permutations"'}),"\n",(0,r.jsx)(n.li,{children:'"Solve puzzle" (Sudoku, N-Queens)'}),"\n",(0,r.jsx)(n.li,{children:'"Count number of ways"'}),"\n",(0,r.jsx)(n.li,{children:'"Find all valid paths/arrangements"'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"backtracking-template",children:"Backtracking Template"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Base Case"}),": Check if current solution is complete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Make Choice"}),": Try each possible choice"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recurse"}),": Continue with the choice made"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backtrack"}),": Undo the choice and try next option"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"combinationsubset-generation",children:"Combination/Subset Generation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Choose or don't choose each element"}),"\n",(0,r.jsx)(n.li,{children:"Maintain current combination"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"permutation-generation",children:"Permutation Generation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Try each unused element at current position"}),"\n",(0,r.jsx)(n.li,{children:"Track used elements"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"constraint-satisfaction",children:"Constraint Satisfaction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Try each possible value"}),"\n",(0,r.jsx)(n.li,{children:"Check if choice violates constraints"}),"\n",(0,r.jsx)(n.li,{children:"Backtrack if constraint violated"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"path-finding",children:"Path Finding"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Try each possible direction/move"}),"\n",(0,r.jsx)(n.li,{children:"Mark visited, recurse, unmark when backtracking"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);