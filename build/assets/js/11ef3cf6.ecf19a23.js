"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[478],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},9138:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"javascript/javascript-engine-basic-unit","title":"Unit of JavaScript Compiler","description":"Parser","source":"@site/docs/javascript/javascript-engine-basic-unit.md","sourceDirName":"javascript","slug":"/javascript/javascript-engine-basic-unit","permalink":"/docs/javascript/javascript-engine-basic-unit","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Iterators & Generators","permalink":"/docs/javascript/iterators-and-generators"},"next":{"title":"\ud83d\ude80 Modern JavaScript Best Practices & Performance Guide","permalink":"/docs/javascript/js-best-practices"}}');var t=s(4848),o=s(8453);const r={},l="Unit of JavaScript Compiler",a={},c=[{value:"Parser",id:"parser",level:3},{value:"AST",id:"ast",level:3},{value:"Interpreter",id:"interpreter",level:3},{value:"Profiler",id:"profiler",level:3},{value:"Complier",id:"complier",level:3},{value:"Optimize code",id:"optimize-code",level:3},{value:"ByteCode",id:"bytecode",level:3},{value:"\ud83d\udcd6 Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83c\udfaf What is the Event Loop?",id:"-what-is-the-event-loop",level:2},{value:"\ud83e\udde0 Mental Model",id:"-mental-model",level:3},{value:"\ud83c\udfd7\ufe0f JavaScript Engine Architecture",id:"\ufe0f-javascript-engine-architecture",level:2},{value:"\ud83d\udd27 Key Components",id:"-key-components",level:2},{value:"\ud83d\udcda <strong>Call Stack</strong> (LIFO - Last In, First Out)",id:"-call-stack-lifo---last-in-first-out",level:3},{value:"\ud83c\udfea <strong>Heap</strong> (Memory Storage)",id:"-heap-memory-storage",level:3},{value:"\ud83c\udf10 <strong>Web APIs</strong> (Browser/Node.js Environment)",id:"-web-apis-browsernodejs-environment",level:3},{value:"\ud83d\udcec <strong>Callback Queue</strong> (FIFO - First In, First Out)",id:"-callback-queue-fifo---first-in-first-out",level:3},{value:"\ud83d\udd04 <strong>Event Loop</strong> (The Coordinator)",id:"-event-loop-the-coordinator",level:3},{value:"\u2699\ufe0f How the Event Loop Works",id:"\ufe0f-how-the-event-loop-works",level:2},{value:"\ud83d\udd04 The Event Loop Cycle",id:"-the-event-loop-cycle",level:3},{value:"\ud83d\udcca Execution Flow Diagram",id:"-execution-flow-diagram",level:3},{value:"\ud83d\udca1 Practical Examples",id:"-practical-examples",level:2},{value:"Example 1: Basic Async Behavior",id:"example-1-basic-async-behavior",level:3},{value:"Example 2: Understanding Microtasks vs Macrotasks",id:"example-2-understanding-microtasks-vs-macrotasks",level:3},{value:"Example 3: Complex Execution Order",id:"example-3-complex-execution-order",level:3},{value:"Example 4: Event Handling",id:"example-4-event-handling",level:3},{value:"\u274c Common Misconceptions",id:"-common-misconceptions",level:2},{value:"Myth 1: &quot;setTimeout(fn, 0) executes immediately&quot;",id:"myth-1-settimeoutfn-0-executes-immediately",level:3},{value:"Myth 2: &quot;JavaScript is multi-threaded&quot;",id:"myth-2-javascript-is-multi-threaded",level:3},{value:"Myth 3: &quot;Promises are always faster than setTimeout&quot;",id:"myth-3-promises-are-always-faster-than-settimeout",level:3},{value:"\ud83d\ude80 Performance Implications",id:"-performance-implications",level:2},{value:"\u26a0\ufe0f Blocking the Event Loop",id:"\ufe0f-blocking-the-event-loop",level:3},{value:"\u2705 Non-blocking Solutions",id:"-non-blocking-solutions",level:3},{value:"\ud83d\udcca Performance Monitoring",id:"-performance-monitoring",level:3},{value:"\u2705 Best Practices",id:"-best-practices",level:2},{value:"1. \ud83d\udd04 <strong>Keep the Event Loop Free</strong>",id:"1--keep-the-event-loop-free",level:3},{value:"2. \ud83c\udfaf <strong>Understand Task Priorities</strong>",id:"2--understand-task-priorities",level:3},{value:"3. \ud83d\udcc8 <strong>Optimize Async Operations</strong>",id:"3--optimize-async-operations",level:3},{value:"4. \ud83d\udd0d <strong>Debug with Tools</strong>",id:"4--debug-with-tools",level:3},{value:"\u2753 Interview Questions",id:"-interview-questions",level:2},{value:"\ud83c\udfaf <strong>Beginner Level</strong>",id:"-beginner-level",level:3},{value:"\ud83d\udd25 <strong>Intermediate Level</strong>",id:"-intermediate-level",level:3},{value:"\ud83d\ude80 <strong>Advanced Level</strong>",id:"-advanced-level",level:3},{value:"\ud83c\udfaf Key Takeaways",id:"-key-takeaways",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unit-of-javascript-compiler",children:"Unit of JavaScript Compiler"})}),"\n",(0,t.jsx)(n.h3,{id:"parser",children:"Parser"}),"\n",(0,t.jsx)(n.p,{children:"lexical Code"}),"\n",(0,t.jsx)(n.h3,{id:"ast",children:"AST"}),"\n",(0,t.jsx)(n.p,{children:"Abstract syntax tree"}),"\n",(0,t.jsx)(n.h3,{id:"interpreter",children:"Interpreter"}),"\n",(0,t.jsx)(n.p,{children:"Reads/Scans the code line by line and no intermediate code is generated."}),"\n",(0,t.jsx)(n.h3,{id:"profiler",children:"Profiler"}),"\n",(0,t.jsx)(n.h3,{id:"complier",children:"Complier"}),"\n",(0,t.jsx)(n.p,{children:"Reads/Scans the complete code and translate into machine code."}),"\n",(0,t.jsx)(n.h3,{id:"optimize-code",children:"Optimize code"}),"\n",(0,t.jsx)(n.h3,{id:"bytecode",children:"ByteCode"}),"\n",(0,t.jsx)(n.h1,{id:"-javascript-event-loop---complete-guide",children:"\u26a1 JavaScript Event Loop - Complete Guide"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Understanding the heart of JavaScript's asynchronous execution model"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-table-of-contents",children:"\ud83d\udcd6 Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-the-event-loop",children:"What is the Event Loop?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#javascript-engine-architecture",children:"JavaScript Engine Architecture"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#key-components",children:"Key Components"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#how-the-event-loop-works",children:"How the Event Loop Works"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#practical-examples",children:"Practical Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#common-misconceptions",children:"Common Misconceptions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#performance-implications",children:"Performance Implications"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#interview-questions",children:"Interview Questions"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-the-event-loop",children:"\ud83c\udfaf What is the Event Loop?"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Event Loop"})," is JavaScript's mechanism for handling ",(0,t.jsx)(n.strong,{children:"asynchronous operations"})," in a ",(0,t.jsx)(n.strong,{children:"single-threaded environment"}),". It's the reason JavaScript can perform non-blocking operations despite being single-threaded."]}),"\n",(0,t.jsx)(n.h3,{id:"-mental-model",children:"\ud83e\udde0 Mental Model"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Think of the Event Loop as a ",(0,t.jsx)(n.strong,{children:"restaurant waiter"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Takes orders (events) from customers (your code)"}),"\n",(0,t.jsx)(n.li,{children:"Delivers orders to the kitchen (Web APIs)"}),"\n",(0,t.jsx)(n.li,{children:"Brings completed dishes back to customers (executes callbacks)"}),"\n",(0,t.jsx)(n.li,{children:"Manages multiple tables efficiently without keeping anyone waiting too long"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-javascript-engine-architecture",children:"\ud83c\udfd7\ufe0f JavaScript Engine Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Call Stack    \u2502    \u2502   Web APIs      \u2502\n\u2502                 \u2502    \u2502  - setTimeout   \u2502\n\u2502  function3()    \u2502    \u2502  - DOM Events   \u2502\n\u2502  function2()    \u2502    \u2502  - HTTP Requests\u2502\n\u2502  function1()    \u2502\u25c4\u2500\u2500\u25ba\u2502  - File I/O     \u2502\n\u2502                 \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u25b2                       \u2502\n         \u2502                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Event Loop    \u2502    \u2502 Callback Queue  \u2502\n\u2502                 \u2502    \u2502                 \u2502\n\u2502 Monitors Stack  \u2502    \u2502  callback1()    \u2502\n\u2502 & Queues        \u2502    \u2502  callback2()    \u2502\n\u2502                 \u2502    \u2502  callback3()    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-key-components",children:"\ud83d\udd27 Key Components"}),"\n",(0,t.jsxs)(n.h3,{id:"-call-stack-lifo---last-in-first-out",children:["\ud83d\udcda ",(0,t.jsx)(n.strong,{children:"Call Stack"})," (LIFO - Last In, First Out)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Keeps track of function calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structure"}),": Stack data structure"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Functions are pushed when called, popped when completed"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function first() {\n    console.log('First function');\n    second();\n}\n\nfunction second() {\n    console.log('Second function');\n    third();\n}\n\nfunction third() {\n    console.log('Third function');\n}\n\nfirst();\n\n// Call Stack execution:\n// 1. first() pushed\n// 2. second() pushed  \n// 3. third() pushed\n// 4. third() popped (completed)\n// 5. second() popped (completed)\n// 6. first() popped (completed)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-heap-memory-storage",children:["\ud83c\udfea ",(0,t.jsx)(n.strong,{children:"Heap"})," (Memory Storage)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Stores objects and variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structure"}),": Unorganized memory region"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Objects allocated here, garbage collected when not referenced"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const user = {          // Object stored in heap\n    name: 'John',       // Properties stored in heap\n    age: 30             // Referenced by 'user' variable\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-web-apis-browsernodejs-environment",children:["\ud83c\udf10 ",(0,t.jsx)(n.strong,{children:"Web APIs"})," (Browser/Node.js Environment)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Handle asynchronous operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Examples"}),": setTimeout, DOM events, HTTP requests, File I/O"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Execute outside the main thread"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"-callback-queue-fifo---first-in-first-out",children:["\ud83d\udcec ",(0,t.jsx)(n.strong,{children:"Callback Queue"})," (FIFO - First In, First Out)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Holds completed async operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structure"}),": Queue data structure"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Callbacks wait here until Call Stack is empty"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"-event-loop-the-coordinator",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Event Loop"})," (The Coordinator)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Manages execution flow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job"}),": Monitors Call Stack and moves callbacks from queue to stack"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule"}),": Only moves callbacks when Call Stack is empty"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-how-the-event-loop-works",children:"\u2699\ufe0f How the Event Loop Works"}),"\n",(0,t.jsx)(n.h3,{id:"-the-event-loop-cycle",children:"\ud83d\udd04 The Event Loop Cycle"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Step-by-step execution example\nconsole.log('Start');                    // 1. Executes immediately\n\nsetTimeout(() => {                       // 2. Goes to Web APIs\n    console.log('Timeout callback');     // 5. Executes after stack is empty\n}, 0);\n\nconsole.log('End');                      // 3. Executes immediately\n\n// Output:\n// Start\n// End  \n// Timeout callback\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-execution-flow-diagram",children:"\ud83d\udcca Execution Flow Diagram"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'1. Execute: console.log(\'Start\')\n   Call Stack: [console.log]\n   Output: "Start"\n\n2. Encounter: setTimeout(callback, 0)\n   Call Stack: [setTimeout]\n   Web APIs: [Timer: 0ms]\n   \n3. Timer completes immediately\n   Web APIs: []\n   Callback Queue: [callback]\n   \n4. Execute: console.log(\'End\')\n   Call Stack: [console.log]\n   Output: "End"\n   \n5. Call Stack empty, Event Loop moves callback\n   Call Stack: [callback]\n   Output: "Timeout callback"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-practical-examples",children:"\ud83d\udca1 Practical Examples"}),"\n",(0,t.jsx)(n.h3,{id:"example-1-basic-async-behavior",children:"Example 1: Basic Async Behavior"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"console.log('A');\n\nsetTimeout(() => console.log('B'), 0);\n\nPromise.resolve().then(() => console.log('C'));\n\nconsole.log('D');\n\n// Output: A, D, C, B\n// Explanation:\n// - A, D: Synchronous, execute immediately\n// - C: Microtask (Promise), higher priority than setTimeout\n// - B: Macrotask (setTimeout), lowest priority\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2-understanding-microtasks-vs-macrotasks",children:"Example 2: Understanding Microtasks vs Macrotasks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Macrotasks (lower priority)\nsetTimeout(() => console.log('setTimeout 1'), 0);\nsetTimeout(() => console.log('setTimeout 2'), 0);\n\n// Microtasks (higher priority)\nPromise.resolve().then(() => console.log('Promise 1'));\nPromise.resolve().then(() => console.log('Promise 2'));\n\nconsole.log('Sync');\n\n// Output:\n// Sync\n// Promise 1\n// Promise 2  \n// setTimeout 1\n// setTimeout 2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3-complex-execution-order",children:"Example 3: Complex Execution Order"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"console.log('=== Start ===');\n\nsetTimeout(() => {\n    console.log('Timeout 1');\n    Promise.resolve().then(() => console.log('Promise in Timeout'));\n}, 0);\n\nPromise.resolve().then(() => {\n    console.log('Promise 1');\n    setTimeout(() => console.log('Timeout in Promise'), 0);\n});\n\nqueueMicrotask(() => console.log('Microtask'));\n\nconsole.log('=== End ===');\n\n// Output:\n// === Start ===\n// === End ===\n// Promise 1\n// Microtask\n// Timeout 1\n// Promise in Timeout\n// Timeout in Promise\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-4-event-handling",children:"Example 4: Event Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// HTML: <button id=\"btn\">Click me</button>\n\ndocument.getElementById('btn').addEventListener('click', () => {\n    console.log('Button clicked');\n    \n    setTimeout(() => console.log('Click timeout'), 0);\n    \n    Promise.resolve().then(() => console.log('Click promise'));\n});\n\n// When button is clicked:\n// Button clicked\n// Click promise\n// Click timeout\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-common-misconceptions",children:"\u274c Common Misconceptions"}),"\n",(0,t.jsx)(n.h3,{id:"myth-1-settimeoutfn-0-executes-immediately",children:'Myth 1: "setTimeout(fn, 0) executes immediately"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Wrong understanding\nsetTimeout(() => console.log('This runs immediately'), 0);\n\n// Reality: It goes to callback queue and waits for stack to be empty\nconsole.log('This actually runs first');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"myth-2-javascript-is-multi-threaded",children:'Myth 2: "JavaScript is multi-threaded"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// JavaScript engine is single-threaded\n// Web APIs provide the illusion of concurrency\n// But JavaScript code execution is always single-threaded\n"})}),"\n",(0,t.jsx)(n.h3,{id:"myth-3-promises-are-always-faster-than-settimeout",children:'Myth 3: "Promises are always faster than setTimeout"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Correct: Promises are microtasks (higher priority)\nPromise.resolve().then(() => console.log('Promise'));\nsetTimeout(() => console.log('Timeout'), 0);\n\n// But this doesn't mean Promises are \"faster\" - they have higher priority\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-performance-implications",children:"\ud83d\ude80 Performance Implications"}),"\n",(0,t.jsx)(n.h3,{id:"\ufe0f-blocking-the-event-loop",children:"\u26a0\ufe0f Blocking the Event Loop"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// BAD: Blocks the event loop\nfunction heavyTask() {\n    const start = Date.now();\n    while (Date.now() - start < 5000) {\n        // Blocks for 5 seconds - nothing else can run!\n    }\n}\n\nheavyTask(); // Browser becomes unresponsive\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-non-blocking-solutions",children:"\u2705 Non-blocking Solutions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Break heavy tasks into chunks\nfunction heavyTaskNonBlocking(dataChunk, callback) {\n    // Process small chunk\n    processChunk(dataChunk);\n    \n    // Continue with next chunk asynchronously\n    if (hasMoreData()) {\n        setTimeout(() => {\n            heavyTaskNonBlocking(nextChunk(), callback);\n        }, 0);\n    } else {\n        callback();\n    }\n}\n\n// BETTER: Use Web Workers for CPU-intensive tasks\nconst worker = new Worker('heavy-task-worker.js');\nworker.postMessage(data);\nworker.onmessage = (result) => {\n    // Handle result without blocking main thread\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-performance-monitoring",children:"\ud83d\udcca Performance Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Monitor Event Loop lag\nfunction measureEventLoopLag() {\n    const start = process.hrtime.bigint();\n    \n    setImmediate(() => {\n        const lag = process.hrtime.bigint() - start;\n        console.log(`Event Loop Lag: ${lag / 1000000n}ms`);\n    });\n}\n\nsetInterval(measureEventLoopLag, 1000);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(n.h3,{id:"1--keep-the-event-loop-free",children:["1. \ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Keep the Event Loop Free"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Avoid long-running synchronous operations\n// Break them into smaller async chunks\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2--understand-task-priorities",children:["2. \ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Understand Task Priorities"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Microtasks: process.nextTick, Promises, queueMicrotask\n// Macrotasks: setTimeout, setInterval, I/O operations\n\n// Use appropriately based on urgency\nPromise.resolve().then(() => {\n    // High priority update\n});\n\nsetTimeout(() => {\n    // Lower priority operation\n}, 0);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3--optimize-async-operations",children:["3. \ud83d\udcc8 ",(0,t.jsx)(n.strong,{children:"Optimize Async Operations"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Group similar operations\nconst promises = [\n    fetch('/api/data1'),\n    fetch('/api/data2'), \n    fetch('/api/data3')\n];\n\nPromise.all(promises).then(results => {\n    // Handle all results together\n});\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"4--debug-with-tools",children:["4. \ud83d\udd0d ",(0,t.jsx)(n.strong,{children:"Debug with Tools"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Use browser DevTools Performance tab\n// Monitor Call Stack and Async operations\n// Look for long tasks that block the event loop\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-interview-questions",children:"\u2753 Interview Questions"}),"\n",(0,t.jsxs)(n.h3,{id:"-beginner-level",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Beginner Level"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Q1: What is the Event Loop?"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"A: The Event Loop is JavaScript's mechanism for handling asynchronous \noperations. It continuously monitors the Call Stack and callback queues, \nmoving callbacks to the stack when it's empty.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Q2: Predict the output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"console.log('A');\nsetTimeout(() => console.log('B'), 0);\nconsole.log('C');\n\n// Answer: A, C, B\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-intermediate-level",children:["\ud83d\udd25 ",(0,t.jsx)(n.strong,{children:"Intermediate Level"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Q3: Explain microtasks vs macrotasks"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Microtasks: Promises, queueMicrotask\n// Macrotasks: setTimeout, setInterval, I/O\n// Microtasks have higher priority and run before macrotasks\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Q4: What's wrong with this code?"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"for (var i = 0; i < 3; i++) {\n    setTimeout(() => console.log(i), 0);\n}\n// Issue: Prints 3, 3, 3 instead of 0, 1, 2\n// Solution: Use let or closures\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-advanced-level",children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Advanced Level"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Q5: How would you implement a non-blocking loop?"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function nonBlockingLoop(array, processor, callback) {\n    function processChunk(index) {\n        const chunkSize = 100;\n        let processed = 0;\n        \n        while (processed < chunkSize && index < array.length) {\n            processor(array[index++]);\n            processed++;\n        }\n        \n        if (index < array.length) {\n            setTimeout(() => processChunk(index), 0);\n        } else {\n            callback();\n        }\n    }\n    \n    processChunk(0);\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-key-takeaways",children:"\ud83c\udfaf Key Takeaways"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JavaScript is single-threaded"})," but uses the Event Loop for concurrency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Call Stack"})," executes functions synchronously"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Web APIs"})," handle asynchronous operations outside the main thread"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Loop"})," coordinates between stack and queues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Microtasks"})," (Promises) have higher priority than ",(0,t.jsx)(n.strong,{children:"macrotasks"})," (setTimeout)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Blocking operations"})," should be avoided or broken into chunks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Understanding the Event Loop"})," is crucial for debugging async issues"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop",children:"MDN: Concurrency model and Event Loop"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",children:"Philip Roberts: What the heck is the event loop anyway?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",children:"Jake Archibald: Tasks, microtasks, queues and schedules"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Ready to master asynchronous JavaScript? Practice these examples and experiment with different async patterns!"})," \ud83d\ude80"]}),"\n",(0,t.jsx)(n.h1,{id:"event-loop",children:"Event Loop"}),"\n",(0,t.jsx)(n.p,{children:"Concurrency Model And Event Loop"}),"\n",(0,t.jsx)(n.p,{children:"JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Concurrency"})," means multiple computations are happening at the same time"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Stack"})," A Stack is an ordered collection of items where the addition and removal of item items happens at one end. This ordering principle is sometimes called LIFO, last-in first-out."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Queue"})," :- A queue is an ordered collection of items where the addition of new items happens at one end, called the \u201crear,\u201d and the removal of existing items occurs at the other end, commonly called the \u201cfront.\u201d This ordering principle is sometimes called FIFO, first-in first-out. It is also known as \u201cfirst-come first-served.\u201d"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Heap"})," it is group of memory space available for developer for store object in any random order."]}),"\n",(0,t.jsx)(n.p,{children:"The Event Loop has one simple job \u2014 to monitor the Call Stack and the Callback Queue. If the Call Stack is empty, it will take the first event from the queue and will push it to the Call Stack, which effectively runs it. Such an iteration is called a tick in the Event Loop. Each event is just a function callback."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);