"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3914],{3004:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"design-pattern/behavioral/chain-of-responsibility","title":"Chain of Responsibility Pattern \u26d3\ufe0f","description":"Definition: The Chain of Responsibility pattern passes requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.","source":"@site/docs/design-pattern/behavioral/chain-of-responsibility.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/chain-of-responsibility","permalink":"/docs/design-pattern/behavioral/chain-of-responsibility","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfa8 Design Patterns","permalink":"/docs/design-pattern/"},"next":{"title":"Command Pattern \ud83c\udfae","permalink":"/docs/design-pattern/behavioral/command"}}');var s=r(4848),i=r(8453);const o={},l="Chain of Responsibility Pattern \u26d3\ufe0f",a={},d=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Support Ticket System",id:"support-ticket-system",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"HTTP Request Middleware Chain",id:"http-request-middleware-chain",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Chain Variations",id:"-chain-variations",level:2},{value:"1. <strong>Pure Chain of Responsibility</strong>",id:"1-pure-chain-of-responsibility",level:3},{value:"2. <strong>Chain with Fallback</strong> (shown in examples)",id:"2-chain-with-fallback-shown-in-examples",level:3},{value:"3. <strong>Processing Chain</strong>",id:"3-processing-chain",level:3},{value:"4. <strong>Conditional Chain</strong>",id:"4-conditional-chain",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chain-of-responsibility-pattern-\ufe0f",children:"Chain of Responsibility Pattern \u26d3\ufe0f"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": The Chain of Responsibility pattern passes requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,s.jsx)(n.p,{children:"Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it."}),"\n",(0,s.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,s.jsx)(n.p,{children:"You want to process a request through a series of handlers without coupling the sender to specific handlers. Consider scenarios like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Processing"}),": HTTP request filters, middleware"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handling"}),": GUI event propagation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Approval Workflow"}),": Document approval chain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Different error handlers for different error types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Multi-step validation process"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The sender shouldn't know which handler will process the request or the order of handlers."}),"\n",(0,s.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,s.jsx)(n.p,{children:"The Chain of Responsibility pattern suggests linking handlers into a chain. Each handler has a field for storing a reference to the next handler. When a handler receives a request, it can either process it or pass it along to the next handler."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Handler (abstract)\r\n\u251c\u2500\u2500 +nextHandler: Handler\r\n\u251c\u2500\u2500 +setNext(handler: Handler): Handler\r\n\u2514\u2500\u2500 +handle(request): void\r\n\r\nConcreteHandler1 extends Handler\r\n\u251c\u2500\u2500 +handle(request): void \u2192 process or super.handle(request)\r\n\r\nConcreteHandler2 extends Handler  \r\n\u251c\u2500\u2500 +handle(request): void \u2192 process or super.handle(request)\r\n\r\nClient \u2192 handler1.setNext(handler2).setNext(handler3)\r\n      \u2192 handler1.handle(request)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,s.jsx)(n.h3,{id:"support-ticket-system",children:"Support Ticket System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Abstract Handler\r\nclass SupportHandler {\r\n  constructor() {\r\n    this.nextHandler = null;\r\n  }\r\n  \r\n  setNext(handler) {\r\n    this.nextHandler = handler;\r\n    return handler; // Return handler for method chaining\r\n  }\r\n  \r\n  handle(ticket) {\r\n    if (this.canHandle(ticket)) {\r\n      return this.process(ticket);\r\n    } else if (this.nextHandler) {\r\n      console.log(`\ud83d\udd04 ${this.constructor.name}: Passing to next handler`);\r\n      return this.nextHandler.handle(ticket);\r\n    } else {\r\n      console.log(`\u274c No handler available for ticket: ${ticket.type} (Priority: ${ticket.priority})`);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  canHandle(ticket) {\r\n    throw new Error(\"canHandle() method must be implemented\");\r\n  }\r\n  \r\n  process(ticket) {\r\n    throw new Error(\"process() method must be implemented\");\r\n  }\r\n}\r\n\r\n// Concrete Handler - Level 1 Support\r\nclass Level1Support extends SupportHandler {\r\n  canHandle(ticket) {\r\n    return ticket.type === 'basic' && ticket.priority <= 2;\r\n  }\r\n  \r\n  process(ticket) {\r\n    console.log(`\ud83d\udc68\u200d\ud83d\udcbb Level 1 Support: Handling ticket #${ticket.id}`);\r\n    console.log(`   Type: ${ticket.type}`);\r\n    console.log(`   Priority: ${ticket.priority}`);\r\n    console.log(`   Issue: ${ticket.description}`);\r\n    console.log(`   \u2705 Resolved with standard procedure`);\r\n    \r\n    return {\r\n      handledBy: 'Level 1 Support',\r\n      resolution: 'Standard procedure applied',\r\n      ticketId: ticket.id,\r\n      resolvedAt: new Date()\r\n    };\r\n  }\r\n}\r\n\r\n// Concrete Handler - Level 2 Support\r\nclass Level2Support extends SupportHandler {\r\n  canHandle(ticket) {\r\n    return (ticket.type === 'technical' && ticket.priority <= 3) || \r\n           (ticket.type === 'basic' && ticket.priority <= 4);\r\n  }\r\n  \r\n  process(ticket) {\r\n    console.log(`\ud83d\udd27 Level 2 Support: Handling ticket #${ticket.id}`);\r\n    console.log(`   Type: ${ticket.type}`);\r\n    console.log(`   Priority: ${ticket.priority}`);\r\n    console.log(`   Issue: ${ticket.description}`);\r\n    console.log(`   \u2705 Resolved with technical expertise`);\r\n    \r\n    return {\r\n      handledBy: 'Level 2 Support',\r\n      resolution: 'Technical solution provided',\r\n      ticketId: ticket.id,\r\n      resolvedAt: new Date()\r\n    };\r\n  }\r\n}\r\n\r\n// Concrete Handler - Level 3 Support (Senior/Expert)\r\nclass Level3Support extends SupportHandler {\r\n  canHandle(ticket) {\r\n    return ticket.type === 'critical' || ticket.priority >= 4;\r\n  }\r\n  \r\n  process(ticket) {\r\n    console.log(`\ud83d\udea8 Level 3 Support: Handling ticket #${ticket.id}`);\r\n    console.log(`   Type: ${ticket.type}`);\r\n    console.log(`   Priority: ${ticket.priority}`);\r\n    console.log(`   Issue: ${ticket.description}`);\r\n    console.log(`   \u2705 Resolved by senior expert`);\r\n    \r\n    return {\r\n      handledBy: 'Level 3 Support',\r\n      resolution: 'Expert-level solution provided',\r\n      ticketId: ticket.id,\r\n      resolvedAt: new Date()\r\n    };\r\n  }\r\n}\r\n\r\n// Ticket class\r\nclass SupportTicket {\r\n  constructor(id, type, priority, description) {\r\n    this.id = id;\r\n    this.type = type; // 'basic', 'technical', 'critical'\r\n    this.priority = priority; // 1-5 (1=lowest, 5=highest)\r\n    this.description = description;\r\n    this.createdAt = new Date();\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"=== Support Ticket Chain Demo ===\\n\");\r\n\r\nconsole.log(\"Setting up support chain:\");\r\nconsole.log(\"-\".repeat(25));\r\n\r\n// Create handlers\r\nconst level1 = new Level1Support();\r\nconst level2 = new Level2Support();\r\nconst level3 = new Level3Support();\r\n\r\n// Set up chain: Level1 \u2192 Level2 \u2192 Level3\r\nlevel1.setNext(level2).setNext(level3);\r\n\r\nconsole.log(\"\u2705 Support chain established: Level1 \u2192 Level2 \u2192 Level3\\n\");\r\n\r\nconsole.log(\"Processing various tickets:\");\r\nconsole.log(\"-\".repeat(30));\r\n\r\n// Test different types of tickets\r\nconst tickets = [\r\n  new SupportTicket(1001, 'basic', 1, 'Password reset request'),\r\n  new SupportTicket(1002, 'technical', 2, 'Software installation issue'),\r\n  new SupportTicket(1003, 'basic', 3, 'Account access problem'),\r\n  new SupportTicket(1004, 'critical', 5, 'Server outage - production down'),\r\n  new SupportTicket(1005, 'technical', 4, 'Database performance issues'),\r\n  new SupportTicket(1006, 'unknown', 1, 'Unhandled ticket type')\r\n];\r\n\r\ntickets.forEach((ticket, index) => {\r\n  console.log(`\\n${index + 1}. Processing Ticket #${ticket.id}:`);\r\n  console.log(\"-\".repeat(35));\r\n  \r\n  const result = level1.handle(ticket);\r\n  \r\n  if (result) {\r\n    console.log(`\ud83d\udccb Resolution Summary: ${result.resolution} by ${result.handledBy}`);\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,s.jsx)(n.h3,{id:"http-request-middleware-chain",children:"HTTP Request Middleware Chain"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Abstract Middleware Handler\r\nclass Middleware {\r\n  constructor() {\r\n    this.next = null;\r\n  }\r\n  \r\n  setNext(middleware) {\r\n    this.next = middleware;\r\n    return middleware;\r\n  }\r\n  \r\n  handle(request, response) {\r\n    if (this.process(request, response)) {\r\n      if (this.next) {\r\n        return this.next.handle(request, response);\r\n      }\r\n      return true; // Request processed successfully\r\n    }\r\n    return false; // Request rejected\r\n  }\r\n  \r\n  process(request, response) {\r\n    throw new Error(\"process() method must be implemented\");\r\n  }\r\n}\r\n\r\n// Concrete Middleware - Authentication\r\nclass AuthenticationMiddleware extends Middleware {\r\n  process(request, response) {\r\n    console.log(`\ud83d\udd10 AuthenticationMiddleware: Checking authentication`);\r\n    \r\n    const authHeader = request.headers['authorization'];\r\n    \r\n    if (!authHeader) {\r\n      console.log(`\u274c Authentication failed: No authorization header`);\r\n      response.status = 401;\r\n      response.body = { error: 'Authentication required' };\r\n      return false;\r\n    }\r\n    \r\n    // Simulate token validation\r\n    const token = authHeader.replace('Bearer ', '');\r\n    if (token === 'invalid_token') {\r\n      console.log(`\u274c Authentication failed: Invalid token`);\r\n      response.status = 401;\r\n      response.body = { error: 'Invalid token' };\r\n      return false;\r\n    }\r\n    \r\n    // Add user info to request\r\n    request.user = { id: 123, username: 'john_doe', role: 'user' };\r\n    console.log(`\u2705 Authentication successful: User ${request.user.username}`);\r\n    return true;\r\n  }\r\n}\r\n\r\n// Concrete Middleware - Authorization\r\nclass AuthorizationMiddleware extends Middleware {\r\n  constructor(requiredRole = 'user') {\r\n    super();\r\n    this.requiredRole = requiredRole;\r\n  }\r\n  \r\n  process(request, response) {\r\n    console.log(`\ud83d\udee1\ufe0f AuthorizationMiddleware: Checking authorization`);\r\n    \r\n    if (!request.user) {\r\n      console.log(`\u274c Authorization failed: No user information`);\r\n      response.status = 401;\r\n      response.body = { error: 'User not authenticated' };\r\n      return false;\r\n    }\r\n    \r\n    const userRole = request.user.role;\r\n    const roleHierarchy = { 'user': 1, 'admin': 2, 'superadmin': 3 };\r\n    \r\n    if (roleHierarchy[userRole] < roleHierarchy[this.requiredRole]) {\r\n      console.log(`\u274c Authorization failed: Insufficient permissions (has: ${userRole}, needs: ${this.requiredRole})`);\r\n      response.status = 403;\r\n      response.body = { error: 'Insufficient permissions' };\r\n      return false;\r\n    }\r\n    \r\n    console.log(`\u2705 Authorization successful: User has ${userRole} role`);\r\n    return true;\r\n  }\r\n}\r\n\r\n// Concrete Middleware - Rate Limiting\r\nclass RateLimitMiddleware extends Middleware {\r\n  constructor(maxRequests = 10, windowMinutes = 1) {\r\n    super();\r\n    this.maxRequests = maxRequests;\r\n    this.windowMs = windowMinutes * 60 * 1000;\r\n    this.requests = new Map(); // userId -> { count, resetTime }\r\n  }\r\n  \r\n  process(request, response) {\r\n    console.log(`\u23f1\ufe0f RateLimitMiddleware: Checking rate limits`);\r\n    \r\n    const userId = request.user?.id || request.ip;\r\n    const now = Date.now();\r\n    \r\n    if (!this.requests.has(userId)) {\r\n      this.requests.set(userId, { count: 0, resetTime: now + this.windowMs });\r\n    }\r\n    \r\n    const userRequests = this.requests.get(userId);\r\n    \r\n    // Reset window if expired\r\n    if (now > userRequests.resetTime) {\r\n      userRequests.count = 0;\r\n      userRequests.resetTime = now + this.windowMs;\r\n    }\r\n    \r\n    userRequests.count++;\r\n    \r\n    if (userRequests.count > this.maxRequests) {\r\n      const resetIn = Math.ceil((userRequests.resetTime - now) / 1000);\r\n      console.log(`\u274c Rate limit exceeded: ${userRequests.count}/${this.maxRequests} (resets in ${resetIn}s)`);\r\n      \r\n      response.status = 429;\r\n      response.body = { \r\n        error: 'Rate limit exceeded',\r\n        resetIn: resetIn\r\n      };\r\n      return false;\r\n    }\r\n    \r\n    console.log(`\u2705 Rate limit OK: ${userRequests.count}/${this.maxRequests} requests`);\r\n    return true;\r\n  }\r\n}\r\n\r\n// Concrete Middleware - Request Validation\r\nclass ValidationMiddleware extends Middleware {\r\n  constructor(requiredFields = []) {\r\n    super();\r\n    this.requiredFields = requiredFields;\r\n  }\r\n  \r\n  process(request, response) {\r\n    console.log(`\u2714\ufe0f ValidationMiddleware: Validating request`);\r\n    \r\n    const missingFields = [];\r\n    \r\n    // Check required fields in body\r\n    this.requiredFields.forEach(field => {\r\n      if (!request.body || !request.body[field]) {\r\n        missingFields.push(field);\r\n      }\r\n    });\r\n    \r\n    if (missingFields.length > 0) {\r\n      console.log(`\u274c Validation failed: Missing fields: ${missingFields.join(', ')}`);\r\n      response.status = 400;\r\n      response.body = { \r\n        error: 'Validation failed',\r\n        missingFields: missingFields\r\n      };\r\n      return false;\r\n    }\r\n    \r\n    console.log(`\u2705 Validation successful: All required fields present`);\r\n    return true;\r\n  }\r\n}\r\n\r\n// Concrete Middleware - Request Logger\r\nclass LoggerMiddleware extends Middleware {\r\n  process(request, response) {\r\n    const timestamp = new Date().toISOString();\r\n    console.log(`\ud83d\udcdd LoggerMiddleware: ${timestamp} ${request.method} ${request.path}`);\r\n    console.log(`   User-Agent: ${request.headers['user-agent'] || 'Unknown'}`);\r\n    console.log(`   IP: ${request.ip}`);\r\n    \r\n    // Always continue to next middleware\r\n    return true;\r\n  }\r\n}\r\n\r\n// HTTP Request/Response classes for demo\r\nclass HTTPRequest {\r\n  constructor(method, path, headers = {}, body = null) {\r\n    this.method = method;\r\n    this.path = path;\r\n    this.headers = headers;\r\n    this.body = body;\r\n    this.ip = '192.168.1.1';\r\n    this.user = null; // Will be set by authentication middleware\r\n  }\r\n}\r\n\r\nclass HTTPResponse {\r\n  constructor() {\r\n    this.status = 200;\r\n    this.body = null;\r\n    this.headers = {};\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"\\n=== HTTP Middleware Chain Demo ===\\n\");\r\n\r\nconsole.log(\"Setting up middleware chain:\");\r\nconsole.log(\"-\".repeat(30));\r\n\r\n// Create middleware components\r\nconst logger = new LoggerMiddleware();\r\nconst auth = new AuthenticationMiddleware();\r\nconst authorization = new AuthorizationMiddleware('user');\r\nconst rateLimit = new RateLimitMiddleware(3, 1); // 3 requests per minute\r\nconst validation = new ValidationMiddleware(['title', 'content']);\r\n\r\n// Set up middleware chain\r\nlogger\r\n  .setNext(auth)\r\n  .setNext(authorization)  \r\n  .setNext(rateLimit)\r\n  .setNext(validation);\r\n\r\nconsole.log(\"\u2705 Middleware chain: Logger \u2192 Auth \u2192 Authorization \u2192 RateLimit \u2192 Validation\\n\");\r\n\r\nconsole.log(\"Processing different requests:\");\r\nconsole.log(\"-\".repeat(35));\r\n\r\n// Test requests\r\nconst testRequests = [\r\n  {\r\n    name: \"Valid authenticated request\",\r\n    request: new HTTPRequest('POST', '/api/posts', {\r\n      'authorization': 'Bearer valid_token',\r\n      'user-agent': 'MyApp/1.0'\r\n    }, { title: 'My Post', content: 'Post content here' })\r\n  },\r\n  {\r\n    name: \"Request without authentication\",\r\n    request: new HTTPRequest('POST', '/api/posts', {\r\n      'user-agent': 'MyApp/1.0'\r\n    }, { title: 'My Post', content: 'Post content here' })\r\n  },\r\n  {\r\n    name: \"Request with invalid token\",\r\n    request: new HTTPRequest('POST', '/api/posts', {\r\n      'authorization': 'Bearer invalid_token',\r\n      'user-agent': 'MyApp/1.0'\r\n    }, { title: 'My Post', content: 'Post content here' })\r\n  },\r\n  {\r\n    name: \"Request with missing validation fields\",\r\n    request: new HTTPRequest('POST', '/api/posts', {\r\n      'authorization': 'Bearer valid_token',\r\n      'user-agent': 'MyApp/1.0'\r\n    }, { title: 'My Post' }) // Missing 'content' field\r\n  }\r\n];\r\n\r\ntestRequests.forEach((test, index) => {\r\n  console.log(`\\n${index + 1}. ${test.name}:`);\r\n  console.log(\"-\".repeat(40));\r\n  \r\n  const response = new HTTPResponse();\r\n  const success = logger.handle(test.request, response);\r\n  \r\n  console.log(`\\n\ud83d\udcca Result: ${success ? 'SUCCESS' : 'FAILED'}`);\r\n  if (response.status !== 200) {\r\n    console.log(`   Status: ${response.status}`);\r\n    console.log(`   Error:`, response.body);\r\n  }\r\n});\r\n\r\n// Test rate limiting\r\nconsole.log(`\\n${\"=\".repeat(50)}\\n`);\r\nconsole.log(\"Testing rate limiting with multiple requests:\");\r\nconsole.log(\"-\".repeat(45));\r\n\r\nfor (let i = 1; i <= 5; i++) {\r\n  console.log(`\\nRequest ${i}:`);\r\n  console.log(\"-\".repeat(12));\r\n  \r\n  const request = new HTTPRequest('POST', '/api/posts', {\r\n    'authorization': 'Bearer valid_token',\r\n    'user-agent': 'MyApp/1.0'\r\n  }, { title: `Post ${i}`, content: `Content for post ${i}` });\r\n  \r\n  const response = new HTTPResponse();\r\n  const success = logger.handle(request, response);\r\n  \r\n  console.log(`\ud83d\udcca Result: ${success ? 'SUCCESS' : 'FAILED'}`);\r\n  if (response.status !== 200) {\r\n    console.log(`   Status: ${response.status}`);\r\n    console.log(`   Error:`, response.body);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decoupling"}),": Decouples sender from receivers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Can add/remove handlers dynamically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"}),": Each handler has one responsibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime Configuration"}),": Chain can be configured at runtime"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Processing"}),": Multiple handlers can process the same request"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Request might traverse the entire chain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debugging"}),": Can be difficult to debug the chain execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Guarantee"}),": No guarantee that request will be handled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Chain Management"}),": Managing the chain can become complex"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Processors"}),": Multiple objects can handle a request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Handler Set"}),": The set of handlers should be specified dynamically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unknown Recipients"}),": You don't want to specify receivers explicitly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Filtering"}),": Need to filter requests through multiple criteria"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handling"}),": GUI events that bubble up through components"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-chain-variations",children:"\ud83d\udd04 Chain Variations"}),"\n",(0,s.jsxs)(n.h3,{id:"1-pure-chain-of-responsibility",children:["1. ",(0,s.jsx)(n.strong,{children:"Pure Chain of Responsibility"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only one handler processes the request"}),"\n",(0,s.jsx)(n.li,{children:"Request stops after first successful handling"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-chain-with-fallback-shown-in-examples",children:["2. ",(0,s.jsx)(n.strong,{children:"Chain with Fallback"})," (shown in examples)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handlers can reject and pass to next handler"}),"\n",(0,s.jsx)(n.li,{children:"Default handler at the end"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-processing-chain",children:["3. ",(0,s.jsx)(n.strong,{children:"Processing Chain"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All handlers in the chain process the request"}),"\n",(0,s.jsx)(n.li,{children:"Each handler modifies the request"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-conditional-chain",children:["4. ",(0,s.jsx)(n.strong,{children:"Conditional Chain"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ConditionalHandler extends Handler {\r\n  constructor(condition) {\r\n    super();\r\n    this.condition = condition;\r\n  }\r\n  \r\n  handle(request) {\r\n    if (this.condition(request)) {\r\n      return this.process(request);\r\n    } else if (this.nextHandler) {\r\n      return this.nextHandler.handle(request);\r\n    }\r\n    return null;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decorator"}),": Both use object composition, but Chain of Responsibility passes requests while Decorator adds behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command"}),": Both can implement undo/redo, but Command encapsulates requests while Chain of Responsibility processes them"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Composite"}),": Chain uses composition to build handlers, similar to Composite's tree structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Template Method"}),": Handlers might use Template Method to define processing steps"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/chain-of-responsibility",children:"Chain of Responsibility - Refactoring.Guru"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://expressjs.com/en/guide/using-middleware.html",children:"JavaScript Middleware Patterns"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);