"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6317],{4144:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"javascript/promises-enhanced","title":"\ud83e\udd1d JavaScript Promises - Complete Guide","description":"Master asynchronous programming with Promises for cleaner, more maintainable code","source":"@site/docs/javascript/promises-enhanced.md","sourceDirName":"javascript","slug":"/javascript/promises-enhanced","permalink":"/docs/javascript/promises-enhanced","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OPERATORS & OPERANDS","permalink":"/docs/javascript/operators-and-operands"},"next":{"title":"\ud83d\ude80 JavaScript Quick Reference Cheatsheet","permalink":"/docs/javascript/quick-reference-cheatsheet"}}');var t=n(4848),o=n(8453);const a={},i="\ud83e\udd1d JavaScript Promises - Complete Guide",l={},c=[{value:"\ud83d\udcd6 Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83c\udfaf What are Promises?",id:"-what-are-promises",level:2},{value:"\ud83e\udde0 Mental Model",id:"-mental-model",level:3},{value:"\u2728 Why Promises?",id:"-why-promises",level:3},{value:"<strong>Before Promises (Callback Hell)</strong>",id:"before-promises-callback-hell",level:4},{value:"<strong>With Promises (Clean Chain)</strong>",id:"with-promises-clean-chain",level:4},{value:"\ud83d\udd04 Promise States",id:"-promise-states",level:2},{value:"\ud83d\udcca State Properties",id:"-state-properties",level:3},{value:"\ud83c\udfd7\ufe0f Creating Promises",id:"\ufe0f-creating-promises",level:2},{value:"\ud83c\udd95 <strong>Promise Constructor</strong>",id:"-promise-constructor",level:3},{value:"\u26a1 <strong>Promise.resolve() and Promise.reject()</strong>",id:"-promiseresolve-and-promisereject",level:3},{value:"\ud83d\udd04 <strong>Converting Callbacks to Promises</strong>",id:"-converting-callbacks-to-promises",level:3},{value:"\ud83c\udfaf Consuming Promises",id:"-consuming-promises",level:2},{value:"\ud83d\udce5 <strong>.then() Method</strong>",id:"-then-method",level:3},{value:"\u274c <strong>.catch() Method</strong>",id:"-catch-method",level:3},{value:"\ud83d\udd04 <strong>.finally() Method</strong>",id:"-finally-method",level:3},{value:"\ud83d\udee0\ufe0f Promise Methods",id:"\ufe0f-promise-methods",level:2},{value:"\ud83d\udd17 <strong>Promise.all()</strong>",id:"-promiseall",level:3},{value:"\ud83c\udfc1 <strong>Promise.race()</strong>",id:"-promiserace",level:3},{value:"\ud83c\udfaf <strong>Promise.allSettled()</strong>",id:"-promiseallsettled",level:3},{value:"\ud83e\udd47 <strong>Promise.any()</strong>",id:"-promiseany",level:3},{value:"\u26d3\ufe0f Promise Chaining",id:"\ufe0f-promise-chaining",level:2},{value:"\ud83d\udd17 <strong>Linear Chaining</strong>",id:"-linear-chaining",level:3},{value:"\ud83c\udf3f <strong>Branching Chains</strong>",id:"-branching-chains",level:3},{value:"\u26a0\ufe0f Error Handling",id:"\ufe0f-error-handling",level:2},{value:"\ud83c\udfaf <strong>Error Propagation</strong>",id:"-error-propagation",level:3},{value:"\ud83d\udd04 <strong>Error Recovery</strong>",id:"-error-recovery",level:3},{value:"\ud83d\udd01 <strong>Retry Logic</strong>",id:"-retry-logic",level:3},{value:"\ud83d\ude80 Advanced Patterns",id:"-advanced-patterns",level:2},{value:"\ud83c\udfed <strong>Promise Factories</strong>",id:"-promise-factories",level:3},{value:"\ud83c\udfaf <strong>Promise Pools (Concurrency Limiting)</strong>",id:"-promise-pools-concurrency-limiting",level:3},{value:"\ud83d\udcca <strong>Promise Memoization</strong>",id:"-promise-memoization",level:3},{value:"\ud83c\udf0d Real-World Examples",id:"-real-world-examples",level:2},{value:"\ud83d\udcf1 <strong>Loading Screen with Progress</strong>",id:"-loading-screen-with-progress",level:3},{value:"\ud83d\udd04 <strong>Auto-retry with Exponential Backoff</strong>",id:"-auto-retry-with-exponential-backoff",level:3},{value:"\u2705 Best Practices",id:"-best-practices",level:2},{value:"1. \ud83c\udfaf <strong>Always Handle Errors</strong>",id:"1--always-handle-errors",level:3},{value:"2. \ud83d\udd04 <strong>Return Promises in .then()</strong>",id:"2--return-promises-in-then",level:3},{value:"3. \ud83c\udfad <strong>Use Promise.all() for Independent Operations</strong>",id:"3--use-promiseall-for-independent-operations",level:3},{value:"4. \ud83d\udd12 <strong>Don&#39;t Mix Async/Await with .then()</strong>",id:"4--dont-mix-asyncawait-with-then",level:3},{value:"\ud83d\udcca Promise vs Callback vs Async/Await",id:"-promise-vs-callback-vs-asyncawait",level:2},{value:"\ud83c\udfaf Key Takeaways",id:"-key-takeaways",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"-javascript-promises---complete-guide",children:"\ud83e\udd1d JavaScript Promises - Complete Guide"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Master asynchronous programming with Promises for cleaner, more maintainable code"})}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-table-of-contents",children:"\ud83d\udcd6 Table of Contents"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#what-are-promises",children:"What are Promises?"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#promise-states",children:"Promise States"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#creating-promises",children:"Creating Promises"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#consuming-promises",children:"Consuming Promises"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#promise-methods",children:"Promise Methods"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#promise-chaining",children:"Promise Chaining"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#real-world-examples",children:"Real-World Examples"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-what-are-promises",children:"\ud83c\udfaf What are Promises?"}),"\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.strong,{children:"Promise"})," is an object representing the eventual completion (or failure) of an asynchronous operation. It's a placeholder for a future value that allows you to write asynchronous code in a more synchronous-looking way."]}),"\n",(0,t.jsx)(r.h3,{id:"-mental-model",children:"\ud83e\udde0 Mental Model"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Think of a Promise like a ",(0,t.jsx)(r.strong,{children:"restaurant order receipt"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"You place an order (start async operation)"}),"\n",(0,t.jsx)(r.li,{children:"Get a receipt (Promise object)"}),"\n",(0,t.jsx)(r.li,{children:"Receipt has order number (pending state)"}),"\n",(0,t.jsx)(r.li,{children:"Eventually: food arrives (resolved) or order cancelled (rejected)"}),"\n",(0,t.jsx)(r.li,{children:'You can attach actions: "when ready, eat it" (.then) or "if cancelled, get refund" (.catch)'}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"-why-promises",children:"\u2728 Why Promises?"}),"\n",(0,t.jsx)(r.h4,{id:"before-promises-callback-hell",children:(0,t.jsx)(r.strong,{children:"Before Promises (Callback Hell)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Nested callbacks - hard to read and maintain\r\ngetData(function(a) {\r\n    getMoreData(a, function(b) {\r\n        getEvenMoreData(b, function(c) {\r\n            getFinalData(c, function(d) {\r\n                // Finally use the data\r\n                console.log(d);\r\n            }, function(error) {\r\n                console.error(error);\r\n            });\r\n        }, function(error) {\r\n            console.error(error);\r\n        });\r\n    }, function(error) {\r\n        console.error(error);\r\n    });\r\n}, function(error) {\r\n    console.error(error);\r\n});\n"})}),"\n",(0,t.jsx)(r.h4,{id:"with-promises-clean-chain",children:(0,t.jsx)(r.strong,{children:"With Promises (Clean Chain)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Clean, readable chain\r\ngetData()\r\n    .then(a => getMoreData(a))\r\n    .then(b => getEvenMoreData(b))\r\n    .then(c => getFinalData(c))\r\n    .then(d => console.log(d))\r\n    .catch(error => console.error(error));\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-promise-states",children:"\ud83d\udd04 Promise States"}),"\n",(0,t.jsx)(r.p,{children:"A Promise has three possible states:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Visual representation of Promise states\r\n/*\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   PENDING   \u2502 \u2500\u2500\u2510\r\n\u2502 (initial)   \u2502   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\r\n                  \u2502\r\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n        \u2502                  \u2502\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   FULFILLED  \u2502  \u2502    REJECTED     \u2502\r\n\u2502 (resolved)   \u2502  \u2502    (error)      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n*/\r\n\r\n// Example of state transitions\r\nconst promise = new Promise((resolve, reject) => {\r\n    console.log('State: PENDING');\r\n    \r\n    setTimeout(() => {\r\n        const success = Math.random() > 0.5;\r\n        \r\n        if (success) {\r\n            resolve('Success!'); // State: FULFILLED\r\n        } else {\r\n            reject('Error!');    // State: REJECTED\r\n        }\r\n    }, 1000);\r\n});\r\n\r\npromise\r\n    .then(result => console.log('FULFILLED:', result))\r\n    .catch(error => console.log('REJECTED:', error));\n"})}),"\n",(0,t.jsx)(r.h3,{id:"-state-properties",children:"\ud83d\udcca State Properties"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Checking Promise state (for educational purposes)\r\nconst pendingPromise = new Promise(() => {}); // Never resolves\r\nconst resolvedPromise = Promise.resolve('Done');\r\nconst rejectedPromise = Promise.reject('Failed');\r\n\r\n// Note: You can't directly check state in production code\r\n// Use .then()/.catch() instead\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-creating-promises",children:"\ud83c\udfd7\ufe0f Creating Promises"}),"\n",(0,t.jsxs)(r.h3,{id:"-promise-constructor",children:["\ud83c\udd95 ",(0,t.jsx)(r.strong,{children:"Promise Constructor"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Basic Promise creation\r\nconst myPromise = new Promise((resolve, reject) => {\r\n    // Async operation simulation\r\n    const isSuccess = Math.random() > 0.5;\r\n    \r\n    setTimeout(() => {\r\n        if (isSuccess) {\r\n            resolve('Operation successful!'); // Fulfill the promise\r\n        } else {\r\n            reject(new Error('Operation failed!')); // Reject the promise\r\n        }\r\n    }, 1000);\r\n});\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promiseresolve-and-promisereject",children:["\u26a1 ",(0,t.jsx)(r.strong,{children:"Promise.resolve() and Promise.reject()"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Create immediately resolved promise\r\nconst resolvedPromise = Promise.resolve('Immediate success');\r\nconst resolvedWithValue = Promise.resolve({ data: 'Some data' });\r\n\r\n// Create immediately rejected promise\r\nconst rejectedPromise = Promise.reject('Immediate failure');\r\nconst rejectedWithError = Promise.reject(new Error('Something went wrong'));\r\n\r\n// Usage\r\nresolvedPromise.then(value => console.log(value)); // \"Immediate success\"\r\nrejectedPromise.catch(error => console.log(error)); // \"Immediate failure\"\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-converting-callbacks-to-promises",children:["\ud83d\udd04 ",(0,t.jsx)(r.strong,{children:"Converting Callbacks to Promises"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Old callback-style function\r\nfunction fetchDataCallback(callback) {\r\n    setTimeout(() => {\r\n        callback(null, 'Data fetched');\r\n    }, 1000);\r\n}\r\n\r\n// Convert to Promise\r\nfunction fetchDataPromise() {\r\n    return new Promise((resolve, reject) => {\r\n        fetchDataCallback((error, data) => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(data);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Modern usage\r\nfetchDataPromise()\r\n    .then(data => console.log(data))\r\n    .catch(error => console.error(error));\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-consuming-promises",children:"\ud83c\udfaf Consuming Promises"}),"\n",(0,t.jsxs)(r.h3,{id:"-then-method",children:["\ud83d\udce5 ",(0,t.jsx)(r.strong,{children:".then() Method"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const promise = fetch('https://api.example.com/data');\r\n\r\n// Basic .then()\r\npromise.then(response => {\r\n    console.log('Response received:', response);\r\n});\r\n\r\n// .then() with transformation\r\npromise\r\n    .then(response => response.json()) // Transform response\r\n    .then(data => {\r\n        console.log('Parsed data:', data);\r\n        return data.items; // Return for next .then()\r\n    })\r\n    .then(items => {\r\n        console.log('Items:', items);\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-catch-method",children:["\u274c ",(0,t.jsx)(r.strong,{children:".catch() Method"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"fetch('https://api.example.com/data')\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP ${response.status}`);\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => console.log(data))\r\n    .catch(error => {\r\n        console.error('Error occurred:', error.message);\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-finally-method",children:["\ud83d\udd04 ",(0,t.jsx)(r.strong,{children:".finally() Method"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"let loading = true;\r\n\r\nfetch('https://api.example.com/data')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log('Data:', data);\r\n    })\r\n    .catch(error => {\r\n        console.error('Error:', error);\r\n    })\r\n    .finally(() => {\r\n        loading = false; // Always executed\r\n        console.log('Request completed');\r\n    });\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-promise-methods",children:"\ud83d\udee0\ufe0f Promise Methods"}),"\n",(0,t.jsxs)(r.h3,{id:"-promiseall",children:["\ud83d\udd17 ",(0,t.jsx)(r.strong,{children:"Promise.all()"})]}),"\n",(0,t.jsx)(r.p,{children:"Waits for ALL promises to resolve, fails if ANY rejects."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const promise1 = fetch('/api/users');\r\nconst promise2 = fetch('/api/posts');\r\nconst promise3 = fetch('/api/comments');\r\n\r\nPromise.all([promise1, promise2, promise3])\r\n    .then(responses => {\r\n        console.log('All requests completed');\r\n        // All responses available\r\n        return Promise.all(responses.map(r => r.json()));\r\n    })\r\n    .then(([users, posts, comments]) => {\r\n        console.log('Users:', users);\r\n        console.log('Posts:', posts);\r\n        console.log('Comments:', comments);\r\n    })\r\n    .catch(error => {\r\n        console.error('One or more requests failed:', error);\r\n    });\r\n\r\n// Practical example: Loading dashboard data\r\nasync function loadDashboard() {\r\n    try {\r\n        const [userProfile, notifications, analytics] = await Promise.all([\r\n            fetch('/api/profile').then(r => r.json()),\r\n            fetch('/api/notifications').then(r => r.json()),\r\n            fetch('/api/analytics').then(r => r.json())\r\n        ]);\r\n        \r\n        renderDashboard({ userProfile, notifications, analytics });\r\n    } catch (error) {\r\n        showErrorMessage('Failed to load dashboard');\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promiserace",children:["\ud83c\udfc1 ",(0,t.jsx)(r.strong,{children:"Promise.race()"})]}),"\n",(0,t.jsx)(r.p,{children:"Resolves/rejects with the FIRST promise that settles."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const fastAPI = fetch('/api/fast-server');\r\nconst slowAPI = fetch('/api/slow-server');\r\n\r\nPromise.race([fastAPI, slowAPI])\r\n    .then(response => {\r\n        console.log('First response received');\r\n        return response.json();\r\n    })\r\n    .then(data => console.log(data))\r\n    .catch(error => console.error('First error:', error));\r\n\r\n// Practical example: Timeout implementation\r\nfunction fetchWithTimeout(url, timeout = 5000) {\r\n    const fetchPromise = fetch(url);\r\n    const timeoutPromise = new Promise((_, reject) => \r\n        setTimeout(() => reject(new Error('Request timeout')), timeout)\r\n    );\r\n    \r\n    return Promise.race([fetchPromise, timeoutPromise]);\r\n}\r\n\r\n// Usage\r\nfetchWithTimeout('/api/data', 3000)\r\n    .then(response => response.json())\r\n    .then(data => console.log(data))\r\n    .catch(error => {\r\n        if (error.message === 'Request timeout') {\r\n            console.log('Request took too long');\r\n        } else {\r\n            console.log('Request failed:', error);\r\n        }\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promiseallsettled",children:["\ud83c\udfaf ",(0,t.jsx)(r.strong,{children:"Promise.allSettled()"})]}),"\n",(0,t.jsx)(r.p,{children:"Waits for ALL promises to settle, returns results for all."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const promises = [\r\n    fetch('/api/user/1'),\r\n    fetch('/api/user/2'), \r\n    fetch('/api/user/999'), // This might fail\r\n    fetch('/api/user/3')\r\n];\r\n\r\nPromise.allSettled(promises)\r\n    .then(results => {\r\n        results.forEach((result, index) => {\r\n            if (result.status === 'fulfilled') {\r\n                console.log(`Promise ${index} succeeded:`, result.value);\r\n            } else {\r\n                console.log(`Promise ${index} failed:`, result.reason);\r\n            }\r\n        });\r\n    });\r\n\r\n// Practical example: Batch operations with partial failures\r\nasync function syncUsers(userIds) {\r\n    const syncPromises = userIds.map(id => \r\n        fetch(`/api/sync-user/${id}`).catch(err => ({ error: err, userId: id }))\r\n    );\r\n    \r\n    const results = await Promise.allSettled(syncPromises);\r\n    \r\n    const succeeded = results.filter(r => r.status === 'fulfilled').length;\r\n    const failed = results.filter(r => r.status === 'rejected').length;\r\n    \r\n    console.log(`Sync completed: ${succeeded} succeeded, ${failed} failed`);\r\n    return results;\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promiseany",children:["\ud83e\udd47 ",(0,t.jsx)(r.strong,{children:"Promise.any()"})]}),"\n",(0,t.jsx)(r.p,{children:"Resolves with the FIRST successful promise, rejects only if ALL fail."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const mirrors = [\r\n    fetch('https://api1.example.com/data'),\r\n    fetch('https://api2.example.com/data'),\r\n    fetch('https://api3.example.com/data')\r\n];\r\n\r\nPromise.any(mirrors)\r\n    .then(response => {\r\n        console.log('Got data from fastest working mirror');\r\n        return response.json();\r\n    })\r\n    .then(data => console.log(data))\r\n    .catch(error => {\r\n        console.error('All mirrors failed:', error);\r\n    });\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-promise-chaining",children:"\u26d3\ufe0f Promise Chaining"}),"\n",(0,t.jsxs)(r.h3,{id:"-linear-chaining",children:["\ud83d\udd17 ",(0,t.jsx)(r.strong,{children:"Linear Chaining"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Each .then() receives the return value of the previous .then()\r\nfetch('/api/user')\r\n    .then(response => {\r\n        console.log('1. Response received');\r\n        return response.json(); // Return promise\r\n    })\r\n    .then(user => {\r\n        console.log('2. User data parsed:', user);\r\n        return fetch(`/api/user/${user.id}/posts`); // Return another promise\r\n    })\r\n    .then(response => {\r\n        console.log('3. Posts response received');\r\n        return response.json();\r\n    })\r\n    .then(posts => {\r\n        console.log('4. Posts data:', posts);\r\n        return posts.map(post => post.title); // Return regular value\r\n    })\r\n    .then(titles => {\r\n        console.log('5. Post titles:', titles);\r\n    })\r\n    .catch(error => {\r\n        console.error('Error in chain:', error);\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-branching-chains",children:["\ud83c\udf3f ",(0,t.jsx)(r.strong,{children:"Branching Chains"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const userPromise = fetch('/api/user').then(r => r.json());\r\n\r\n// Branch 1: Get user posts\r\nconst postsPromise = userPromise\r\n    .then(user => fetch(`/api/user/${user.id}/posts`))\r\n    .then(r => r.json());\r\n\r\n// Branch 2: Get user followers\r\nconst followersPromise = userPromise\r\n    .then(user => fetch(`/api/user/${user.id}/followers`))\r\n    .then(r => r.json());\r\n\r\n// Combine results\r\nPromise.all([userPromise, postsPromise, followersPromise])\r\n    .then(([user, posts, followers]) => {\r\n        console.log('User profile:', { user, posts, followers });\r\n    });\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-error-handling",children:"\u26a0\ufe0f Error Handling"}),"\n",(0,t.jsxs)(r.h3,{id:"-error-propagation",children:["\ud83c\udfaf ",(0,t.jsx)(r.strong,{children:"Error Propagation"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"fetch('/api/data')\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => {\r\n        if (!data.valid) {\r\n            throw new Error('Invalid data received');\r\n        }\r\n        return processData(data);\r\n    })\r\n    .then(result => {\r\n        console.log('Success:', result);\r\n    })\r\n    .catch(error => {\r\n        // Catches errors from any step above\r\n        console.error('Error in chain:', error.message);\r\n        \r\n        // Different handling based on error type\r\n        if (error.message.includes('HTTP 404')) {\r\n            showNotFoundMessage();\r\n        } else if (error.message.includes('Invalid data')) {\r\n            showDataErrorMessage();\r\n        } else {\r\n            showGenericErrorMessage();\r\n        }\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-error-recovery",children:["\ud83d\udd04 ",(0,t.jsx)(r.strong,{children:"Error Recovery"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"fetch('/api/primary-data')\r\n    .catch(() => {\r\n        console.log('Primary API failed, trying backup...');\r\n        return fetch('/api/backup-data');\r\n    })\r\n    .catch(() => {\r\n        console.log('Backup API failed, using cached data...');\r\n        return getCachedData();\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log('Data obtained:', data);\r\n    })\r\n    .catch(error => {\r\n        console.error('All data sources failed:', error);\r\n        showOfflineMessage();\r\n    });\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-retry-logic",children:["\ud83d\udd01 ",(0,t.jsx)(r.strong,{children:"Retry Logic"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"function fetchWithRetry(url, options = {}, retries = 3) {\r\n    return fetch(url, options)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP ${response.status}`);\r\n            }\r\n            return response;\r\n        })\r\n        .catch(error => {\r\n            if (retries > 0) {\r\n                console.log(`Retrying... ${retries} attempts left`);\r\n                return new Promise(resolve => {\r\n                    setTimeout(() => {\r\n                        resolve(fetchWithRetry(url, options, retries - 1));\r\n                    }, 1000); // Wait 1 second before retry\r\n                });\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n}\r\n\r\n// Usage\r\nfetchWithRetry('/api/unreliable-endpoint')\r\n    .then(response => response.json())\r\n    .then(data => console.log('Data:', data))\r\n    .catch(error => console.error('Failed after retries:', error));\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-advanced-patterns",children:"\ud83d\ude80 Advanced Patterns"}),"\n",(0,t.jsxs)(r.h3,{id:"-promise-factories",children:["\ud83c\udfed ",(0,t.jsx)(r.strong,{children:"Promise Factories"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Create promises on demand\r\nfunction createDelayedPromise(value, delay) {\r\n    return () => new Promise(resolve => {\r\n        setTimeout(() => resolve(value), delay);\r\n    });\r\n}\r\n\r\n// Sequential execution of promise factories\r\nasync function executeSequentially(factories) {\r\n    const results = [];\r\n    for (const factory of factories) {\r\n        const result = await factory();\r\n        results.push(result);\r\n    }\r\n    return results;\r\n}\r\n\r\n// Usage\r\nconst tasks = [\r\n    createDelayedPromise('Task 1', 1000),\r\n    createDelayedPromise('Task 2', 500),\r\n    createDelayedPromise('Task 3', 800)\r\n];\r\n\r\nexecuteSequentially(tasks)\r\n    .then(results => console.log('Sequential results:', results));\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promise-pools-concurrency-limiting",children:["\ud83c\udfaf ",(0,t.jsx)(r.strong,{children:"Promise Pools (Concurrency Limiting)"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class PromisePool {\r\n    constructor(limit = 3) {\r\n        this.limit = limit;\r\n        this.running = 0;\r\n        this.queue = [];\r\n    }\r\n    \r\n    async add(promiseFactory) {\r\n        return new Promise((resolve, reject) => {\r\n            this.queue.push({\r\n                promiseFactory,\r\n                resolve,\r\n                reject\r\n            });\r\n            this.process();\r\n        });\r\n    }\r\n    \r\n    async process() {\r\n        if (this.running >= this.limit || this.queue.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        this.running++;\r\n        const { promiseFactory, resolve, reject } = this.queue.shift();\r\n        \r\n        try {\r\n            const result = await promiseFactory();\r\n            resolve(result);\r\n        } catch (error) {\r\n            reject(error);\r\n        } finally {\r\n            this.running--;\r\n            this.process();\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nconst pool = new PromisePool(2); // Max 2 concurrent requests\r\n\r\nconst urls = [\r\n    '/api/data1',\r\n    '/api/data2', \r\n    '/api/data3',\r\n    '/api/data4',\r\n    '/api/data5'\r\n];\r\n\r\nconst promises = urls.map(url => \r\n    pool.add(() => fetch(url).then(r => r.json()))\r\n);\r\n\r\nPromise.all(promises)\r\n    .then(results => console.log('All data:', results));\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-promise-memoization",children:["\ud83d\udcca ",(0,t.jsx)(r.strong,{children:"Promise Memoization"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"function memoizePromise(fn) {\r\n    const cache = new Map();\r\n    \r\n    return function(...args) {\r\n        const key = JSON.stringify(args);\r\n        \r\n        if (cache.has(key)) {\r\n            return cache.get(key);\r\n        }\r\n        \r\n        const promise = fn.apply(this, args);\r\n        cache.set(key, promise);\r\n        \r\n        // Remove from cache if promise rejects\r\n        promise.catch(() => cache.delete(key));\r\n        \r\n        return promise;\r\n    };\r\n}\r\n\r\n// Usage\r\nconst fetchUser = memoizePromise(async (userId) => {\r\n    console.log(`Fetching user ${userId}...`);\r\n    const response = await fetch(`/api/users/${userId}`);\r\n    return response.json();\r\n});\r\n\r\n// First call: makes API request\r\nfetchUser(1).then(user => console.log('User 1:', user));\r\n\r\n// Second call: returns cached promise\r\nfetchUser(1).then(user => console.log('User 1 (cached):', user));\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-real-world-examples",children:"\ud83c\udf0d Real-World Examples"}),"\n",(0,t.jsxs)(r.h3,{id:"-loading-screen-with-progress",children:["\ud83d\udcf1 ",(0,t.jsx)(r.strong,{children:"Loading Screen with Progress"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class LoadingManager {\r\n    constructor() {\r\n        this.tasks = [];\r\n        this.completed = 0;\r\n    }\r\n    \r\n    addTask(name, promise) {\r\n        this.tasks.push({ name, promise });\r\n        this.updateProgress();\r\n        \r\n        promise.finally(() => {\r\n            this.completed++;\r\n            this.updateProgress();\r\n        });\r\n        \r\n        return promise;\r\n    }\r\n    \r\n    updateProgress() {\r\n        const progress = (this.completed / this.tasks.length) * 100;\r\n        document.querySelector('.progress-bar').style.width = `${progress}%`;\r\n        document.querySelector('.progress-text').textContent = \r\n            `Loading... ${this.completed}/${this.tasks.length}`;\r\n    }\r\n    \r\n    async loadAll() {\r\n        const results = await Promise.allSettled(\r\n            this.tasks.map(task => task.promise)\r\n        );\r\n        \r\n        document.querySelector('.loading-screen').style.display = 'none';\r\n        return results;\r\n    }\r\n}\r\n\r\n// Usage\r\nconst loader = new LoadingManager();\r\n\r\nloader.addTask('User Profile', fetch('/api/profile').then(r => r.json()));\r\nloader.addTask('Dashboard Data', fetch('/api/dashboard').then(r => r.json()));\r\nloader.addTask('Notifications', fetch('/api/notifications').then(r => r.json()));\r\n\r\nloader.loadAll().then(results => {\r\n    console.log('Application loaded', results);\r\n});\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"-auto-retry-with-exponential-backoff",children:["\ud83d\udd04 ",(0,t.jsx)(r.strong,{children:"Auto-retry with Exponential Backoff"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class ApiClient {\r\n    constructor(baseURL) {\r\n        this.baseURL = baseURL;\r\n    }\r\n    \r\n    async request(endpoint, options = {}, retries = 3) {\r\n        const url = `${this.baseURL}${endpoint}`;\r\n        \r\n        for (let attempt = 0; attempt <= retries; attempt++) {\r\n            try {\r\n                const response = await fetch(url, {\r\n                    ...options,\r\n                    timeout: 5000\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP ${response.status}`);\r\n                }\r\n                \r\n                return await response.json();\r\n                \r\n            } catch (error) {\r\n                const isLastAttempt = attempt === retries;\r\n                \r\n                if (isLastAttempt) {\r\n                    throw new Error(`Request failed after ${retries + 1} attempts: ${error.message}`);\r\n                }\r\n                \r\n                // Exponential backoff: 1s, 2s, 4s, 8s...\r\n                const delay = Math.pow(2, attempt) * 1000;\r\n                console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\r\n                \r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nconst api = new ApiClient('https://api.example.com');\r\n\r\napi.request('/users')\r\n    .then(users => console.log('Users:', users))\r\n    .catch(error => console.error('Failed to fetch users:', error));\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(r.h3,{id:"1--always-handle-errors",children:["1. \ud83c\udfaf ",(0,t.jsx)(r.strong,{children:"Always Handle Errors"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// BAD: Unhandled promise rejection\r\nfetch('/api/data').then(data => console.log(data));\r\n\r\n// GOOD: Proper error handling\r\nfetch('/api/data')\r\n    .then(response => response.json())\r\n    .then(data => console.log(data))\r\n    .catch(error => console.error('Request failed:', error));\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"2--return-promises-in-then",children:["2. \ud83d\udd04 ",(0,t.jsx)(r.strong,{children:"Return Promises in .then()"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// BAD: Breaking the chain\r\nfetch('/api/user')\r\n    .then(response => {\r\n        response.json().then(user => {\r\n            console.log(user); // Nested promise\r\n        });\r\n    });\r\n\r\n// GOOD: Proper chaining\r\nfetch('/api/user')\r\n    .then(response => response.json())\r\n    .then(user => console.log(user));\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"3--use-promiseall-for-independent-operations",children:["3. \ud83c\udfad ",(0,t.jsx)(r.strong,{children:"Use Promise.all() for Independent Operations"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// BAD: Sequential when could be parallel\r\nconst user = await fetch('/api/user').then(r => r.json());\r\nconst posts = await fetch('/api/posts').then(r => r.json());\r\nconst comments = await fetch('/api/comments').then(r => r.json());\r\n\r\n// GOOD: Parallel execution\r\nconst [user, posts, comments] = await Promise.all([\r\n    fetch('/api/user').then(r => r.json()),\r\n    fetch('/api/posts').then(r => r.json()),\r\n    fetch('/api/comments').then(r => r.json())\r\n]);\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"4--dont-mix-asyncawait-with-then",children:["4. \ud83d\udd12 ",(0,t.jsx)(r.strong,{children:"Don't Mix Async/Await with .then()"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// BAD: Mixing patterns\r\nasync function fetchData() {\r\n    const response = await fetch('/api/data');\r\n    return response.json().then(data => data.items);\r\n}\r\n\r\n// GOOD: Consistent async/await\r\nasync function fetchData() {\r\n    const response = await fetch('/api/data');\r\n    const data = await response.json();\r\n    return data.items;\r\n}\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-promise-vs-callback-vs-asyncawait",children:"\ud83d\udcca Promise vs Callback vs Async/Await"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Feature"}),(0,t.jsx)(r.th,{children:"Callbacks"}),(0,t.jsx)(r.th,{children:"Promises"}),(0,t.jsx)(r.th,{children:"Async/Await"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Readability"})}),(0,t.jsx)(r.td,{children:"Poor (callback hell)"}),(0,t.jsx)(r.td,{children:"Good"}),(0,t.jsx)(r.td,{children:"Excellent"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Error Handling"})}),(0,t.jsx)(r.td,{children:"Manual per callback"}),(0,t.jsx)(r.td,{children:".catch()"}),(0,t.jsx)(r.td,{children:"try/catch"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Composability"})}),(0,t.jsx)(r.td,{children:"Difficult"}),(0,t.jsx)(r.td,{children:"Good"}),(0,t.jsx)(r.td,{children:"Excellent"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Debugging"})}),(0,t.jsx)(r.td,{children:"Hard"}),(0,t.jsx)(r.td,{children:"Better"}),(0,t.jsx)(r.td,{children:"Best"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Learning Curve"})}),(0,t.jsx)(r.td,{children:"Low"}),(0,t.jsx)(r.td,{children:"Medium"}),(0,t.jsx)(r.td,{children:"Medium"})]})]})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-key-takeaways",children:"\ud83c\udfaf Key Takeaways"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Promises solve callback hell"})," with cleaner, more readable code"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Three states"}),": pending, fulfilled, rejected"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Always handle errors"})," with .catch() or try/catch"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Chain operations"})," with .then() for sequential execution"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use Promise.all()"})," for parallel independent operations"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Promise.race()"})," for timeout or fastest response scenarios"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Convert callbacks to promises"})," for better code organization"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Combine with async/await"})," for even cleaner syntax"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"MDN: Promise"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://promisesaplus.com/",children:"Promises/A+ Specification"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://javascript.info/promise-basics",children:"JavaScript.info: Promises"})}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"Ready to write better asynchronous code? Start using Promises to eliminate callback hell today!"})," \ud83d\ude80"]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var s=n(6540);const t={},o=s.createContext(t);function a(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);