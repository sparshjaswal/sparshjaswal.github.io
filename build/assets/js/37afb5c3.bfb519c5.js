"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1865],{5916:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"dsa-key-pattern/Graphs","title":"Graphs","description":"Description","source":"@site/docs/dsa-key-pattern/20-Graphs.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Graphs","permalink":"/docs/dsa-key-pattern/Graphs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic Programming","permalink":"/docs/dsa-key-pattern/Dynamic-Programming"},"next":{"title":"Greedy","permalink":"/docs/dsa-key-pattern/Greedy"}}');var r=i(4848),t=i(8453);const l={},o="Graphs",c={},h=[{value:"Description",id:"description",level:2},{value:"Categories",id:"categories",level:2},{value:"Topological Sort",id:"topological-sort",level:2},{value:"Union Find (Disjoint Set)",id:"union-find-disjoint-set",level:2},{value:"Graph Algorithms",id:"graph-algorithms",level:2},{value:"When to Use Graph Algorithms",id:"when-to-use-graph-algorithms",level:2},{value:"Topological Sort",id:"topological-sort-1",level:3},{value:"Union Find",id:"union-find",level:3},{value:"Shortest Path Algorithms",id:"shortest-path-algorithms",level:3},{value:"Minimum Spanning Tree",id:"minimum-spanning-tree",level:3}];function a(e){const n={a:"a",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"graphs",children:"Graphs"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Graph algorithms solve problems involving nodes and edges, including traversal, shortest paths, and connectivity."}),"\n",(0,r.jsx)(n.h2,{id:"categories",children:"Categories"}),"\n",(0,r.jsx)(n.h2,{id:"topological-sort",children:"Topological Sort"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Topological sorting is useful for tasks that require dependency resolution (InDegree) in directed acyclic graphs (DAGs)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(V + E)",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(V)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Course Schedule"}),"\n",(0,r.jsx)(n.li,{children:"Course Schedule II"}),"\n",(0,r.jsx)(n.li,{children:"Strange Printer II"}),"\n",(0,r.jsx)(n.li,{children:"Sequence Reconstruction"}),"\n",(0,r.jsx)(n.li,{children:"Alien Dictionary"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern:"})," Use Kahn's algorithm or DFS-based approach to find ordering of vertices."]}),"\n",(0,r.jsx)(n.h2,{id:"union-find-disjoint-set",children:"Union Find (Disjoint Set)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Union-Find is used to solve problems involving connectivity or grouping, often in graphs."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(\u03b1(n)) where \u03b1 is inverse Ackermann function",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(n)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Number of Operations to Make Network Connected"}),"\n",(0,r.jsx)(n.li,{children:"Redundant Connection"}),"\n",(0,r.jsx)(n.li,{children:"Accounts Merge"}),"\n",(0,r.jsx)(n.li,{children:"Satisfiability of Equality Equations"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern:"})," Use path compression and union by rank for efficient set operations."]}),"\n",(0,r.jsx)(n.h2,{id:"graph-algorithms",children:"Graph Algorithms"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Advanced graph algorithms for shortest paths, minimum spanning trees, and graph cycles."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," Varies by algorithm",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Space Complexity:"})," Varies by algorithm"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Problems:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Kruskal's Algorithm: Minimum Cost to connect all Points"}),"\n",(0,r.jsx)(n.li,{children:"Dijkstra's Algorithm: Cheapest Flights Within K Stops"}),"\n",(0,r.jsx)(n.li,{children:"Floyd-Warshall: Find the City with Smallest Number of Neighbours at a Threshold Distance"}),"\n",(0,r.jsx)(n.li,{children:"Bellman Ford: Network Delay time"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use-graph-algorithms",children:"When to Use Graph Algorithms"}),"\n",(0,r.jsx)(n.h3,{id:"topological-sort-1",children:"Topological Sort"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dependency resolution problems"}),"\n",(0,r.jsx)(n.li,{children:"Course scheduling"}),"\n",(0,r.jsx)(n.li,{children:"Build order problems"}),"\n",(0,r.jsx)(n.li,{children:"Detecting cycles in directed graphs"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"union-find",children:"Union Find"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Connected components problems"}),"\n",(0,r.jsx)(n.li,{children:"Dynamic connectivity"}),"\n",(0,r.jsx)(n.li,{children:"Cycle detection in undirected graphs"}),"\n",(0,r.jsx)(n.li,{children:"Grouping related elements"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"shortest-path-algorithms",children:"Shortest Path Algorithms"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dijkstra's"}),": Single source, non-negative weights"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bellman-Ford"}),": Single source, handles negative weights"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Floyd-Warshall"}),": All pairs shortest paths"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"minimum-spanning-tree",children:"Minimum Spanning Tree"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kruskal's"}),": Edge-based approach using Union-Find"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prim's"}),": Vertex-based approach using priority queue"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/discuss/post/655708/graph-for-beginners-problems-pattern-sam-06fb/",children:"https://leetcode.com/discuss/post/655708/graph-for-beginners-problems-pattern-sam-06fb/"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/discuss/post/2360573/become-master-in-graph-by-hi-malik-o4xy/",children:"https://leetcode.com/discuss/post/2360573/become-master-in-graph-by-hi-malik-o4xy/"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/discuss/post/1326900/graph-algorithms-problems-to-practice-by-9u6j/",children:"https://leetcode.com/discuss/post/1326900/graph-algorithms-problems-to-practice-by-9u6j/"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);