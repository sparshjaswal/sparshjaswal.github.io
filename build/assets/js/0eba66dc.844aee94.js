"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[202],{3124:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"dsa-key-pattern/Reversal-of-Linked-List","title":"Reversal of Linked List (In-place)","description":"Description","source":"@site/docs/dsa-key-pattern/07-Reversal-of-Linked-List.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Reversal-of-Linked-List","permalink":"/docs/dsa-key-pattern/Reversal-of-Linked-List","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Cyclic Sort (Index-Based)","permalink":"/docs/dsa-key-pattern/Cyclic-Sort"},"next":{"title":"Matrix Manipulation","permalink":"/docs/dsa-key-pattern/Matrix-Manipulation"}}');var s=i(4848),l=i(8453);const t={},a="Reversal of Linked List (In-place)",c={},o=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Key Techniques",id:"key-techniques",level:2},{value:"Basic Reversal (Iterative)",id:"basic-reversal-iterative",level:3},{value:"Basic Reversal (Recursive)",id:"basic-reversal-recursive",level:3},{value:"Partial Reversal",id:"partial-reversal",level:3},{value:"Group Reversal",id:"group-reversal",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"reversal-of-linked-list-in-place",children:"Reversal of Linked List (In-place)"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Reversing a linked list in place without using extra space is key for problems that require in-place list manipulations."}),"\n",(0,s.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(n)"}),"\n",(0,s.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(1)"}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Iterative Reversal"}),": Use three pointers (prev, current, next)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recursive Reversal"}),": Reverse recursively with O(n) call stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partial Reversal"}),": Reverse only a portion of the linked list"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Group Reversal"}),": Reverse nodes in groups of k"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reverse Linked List"}),"\n",(0,s.jsx)(n.li,{children:"Reverse Nodes in k-Group"}),"\n",(0,s.jsx)(n.li,{children:"Swap Nodes in Pairs"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Problems requiring linked list reversal"}),"\n",(0,s.jsx)(n.li,{children:"Swapping or rearranging nodes in specific patterns"}),"\n",(0,s.jsx)(n.li,{children:"Palindrome checking in linked lists"}),"\n",(0,s.jsx)(n.li,{children:'Problems mentioning "reverse", "swap", or "rearrange" nodes'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Reverse the entire linked list"'}),"\n",(0,s.jsx)(n.li,{children:'"Reverse nodes in groups of k"'}),"\n",(0,s.jsx)(n.li,{children:'"Swap every two adjacent nodes"'}),"\n",(0,s.jsx)(n.li,{children:'"Reverse linked list between positions m and n"'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-techniques",children:"Key Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"basic-reversal-iterative",children:"Basic Reversal (Iterative)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Three pointers: prev, current, next"}),"\n",(0,s.jsx)(n.li,{children:"Save next, reverse link, move pointers forward"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-reversal-recursive",children:"Basic Reversal (Recursive)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Base case: null or single node"}),"\n",(0,s.jsx)(n.li,{children:"Recursively reverse rest, then fix current node"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"partial-reversal",children:"Partial Reversal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Find the portion to reverse"}),"\n",(0,s.jsx)(n.li,{children:"Reverse that portion"}),"\n",(0,s.jsx)(n.li,{children:"Connect back to original list"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"group-reversal",children:"Group Reversal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Process k nodes at a time"}),"\n",(0,s.jsx)(n.li,{children:"Reverse each group"}),"\n",(0,s.jsx)(n.li,{children:"Connect groups together"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(6540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);