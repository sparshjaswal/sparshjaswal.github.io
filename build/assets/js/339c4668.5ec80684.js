"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[9233],{3743:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/structural/composite","title":"Composite Pattern \ud83c\udf33","description":"Definition: The Composite pattern lets you compose objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions uniformly.","source":"@site/docs/design-pattern/structural/composite.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/composite","permalink":"/docs/design-pattern/structural/composite","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bridge Pattern \ud83c\udf09","permalink":"/docs/design-pattern/structural/bridge"},"next":{"title":"Decorator Pattern \ud83c\udfa8","permalink":"/docs/design-pattern/structural/decorator"}}');var o=r(4848),s=r(8453);const i={},l="Composite Pattern \ud83c\udf33",a={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"File System",id:"file-system",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"UI Component System",id:"ui-component-system",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Organization Structure",id:"organization-structure",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Implementation Variants",id:"-implementation-variants",level:2},{value:"1. <strong>Transparent Composite</strong> (shown in examples)",id:"1-transparent-composite-shown-in-examples",level:3},{value:"2. <strong>Safe Composite</strong>",id:"2-safe-composite",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"composite-pattern-",children:"Composite Pattern \ud83c\udf33"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": The Composite pattern lets you compose objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions uniformly."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(n.p,{children:"Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly."}),"\n",(0,o.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(n.p,{children:"You need to work with tree-like structures where some objects contain other objects, and you want to treat both simple and complex objects the same way."}),"\n",(0,o.jsx)(n.p,{children:"For example, in a file system, you have files and folders. Folders can contain files and other folders. You want to perform operations (like calculating size) on both files and folders using the same interface."}),"\n",(0,o.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(n.p,{children:"The Composite pattern suggests using a common interface for both simple and complex objects. Complex objects (composites) can contain simple objects (leaves) and other composites, forming a tree structure."}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Component (interface)\r\n\u2514\u2500\u2500 operation()\r\n\r\nLeaf implements Component\r\n\u2514\u2500\u2500 operation()\r\n\r\nComposite implements Component\r\n\u251c\u2500\u2500 children: Component[]\r\n\u251c\u2500\u2500 add(component: Component)\r\n\u251c\u2500\u2500 remove(component: Component)\r\n\u2514\u2500\u2500 operation() \u2192 for each child: child.operation()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,o.jsx)(n.h3,{id:"file-system",children:"File System"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Component interface\r\nclass FileSystemItem {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n  \r\n  getSize() {\r\n    throw new Error("getSize() method must be implemented");\r\n  }\r\n  \r\n  display(indent = 0) {\r\n    throw new Error("display() method must be implemented");\r\n  }\r\n}\r\n\r\n// Leaf - represents a file\r\nclass File extends FileSystemItem {\r\n  constructor(name, size) {\r\n    super(name);\r\n    this.size = size;\r\n  }\r\n  \r\n  getSize() {\r\n    return this.size;\r\n  }\r\n  \r\n  display(indent = 0) {\r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udcc4 ${this.name} (${this.size} KB)`);\r\n  }\r\n}\r\n\r\n// Composite - represents a folder\r\nclass Folder extends FileSystemItem {\r\n  constructor(name) {\r\n    super(name);\r\n    this.children = [];\r\n  }\r\n  \r\n  add(item) {\r\n    this.children.push(item);\r\n    console.log(`\u2795 Added ${item.name} to ${this.name}`);\r\n  }\r\n  \r\n  remove(item) {\r\n    const index = this.children.indexOf(item);\r\n    if (index > -1) {\r\n      this.children.splice(index, 1);\r\n      console.log(`\u2796 Removed ${item.name} from ${this.name}`);\r\n    }\r\n  }\r\n  \r\n  getSize() {\r\n    let totalSize = 0;\r\n    for (const child of this.children) {\r\n      totalSize += child.getSize();\r\n    }\r\n    return totalSize;\r\n  }\r\n  \r\n  display(indent = 0) {\r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udcc1 ${this.name}/ (${this.getSize()} KB total)`);\r\n    \r\n    // Display all children\r\n    for (const child of this.children) {\r\n      child.display(indent + 2);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== File System Composite Demo ===\\n");\r\n\r\n// Create files\r\nconst file1 = new File("document.txt", 10);\r\nconst file2 = new File("image.jpg", 250);\r\nconst file3 = new File("video.mp4", 1500);\r\nconst file4 = new File("readme.md", 5);\r\n\r\nconsole.log("Creating folder structure:");\r\nconsole.log("-".repeat(25));\r\n\r\n// Create folders\r\nconst documents = new Folder("Documents");\r\nconst media = new Folder("Media");\r\nconst root = new Folder("Root");\r\n\r\n// Build the tree structure\r\ndocuments.add(file1);\r\ndocuments.add(file4);\r\n\r\nmedia.add(file2);\r\nmedia.add(file3);\r\n\r\nroot.add(documents);\r\nroot.add(media);\r\n\r\nconsole.log("\\nFolder structure:");\r\nconsole.log("-".repeat(17));\r\nroot.display();\r\n\r\nconsole.log(`\\n\ud83d\udcca Total size: ${root.getSize()} KB`);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,o.jsx)(n.h3,{id:"ui-component-system",children:"UI Component System"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Component interface for UI elements\r\nclass UIComponent {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.visible = true;\r\n  }\r\n  \r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n  \r\n  setVisible(visible) {\r\n    this.visible = visible;\r\n  }\r\n  \r\n  isVisible() {\r\n    return this.visible;\r\n  }\r\n}\r\n\r\n// Leaf components - Basic UI elements\r\nclass Button extends UIComponent {\r\n  constructor(name, text) {\r\n    super(name);\r\n    this.text = text;\r\n  }\r\n  \r\n  render(indent = 0) {\r\n    if (!this.visible) return;\r\n    \r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udd18 Button: "${this.text}"`);\r\n  }\r\n  \r\n  click() {\r\n    console.log(`\ud83d\udc46 ${this.text} button clicked!`);\r\n  }\r\n}\r\n\r\nclass TextInput extends UIComponent {\r\n  constructor(name, placeholder) {\r\n    super(name);\r\n    this.placeholder = placeholder;\r\n    this.value = "";\r\n  }\r\n  \r\n  render(indent = 0) {\r\n    if (!this.visible) return;\r\n    \r\n    const spaces = " ".repeat(indent);\r\n    const displayValue = this.value || `[${this.placeholder}]`;\r\n    console.log(`${spaces}\ud83d\udcdd Input: ${displayValue}`);\r\n  }\r\n  \r\n  setValue(value) {\r\n    this.value = value;\r\n    console.log(`\u270f\ufe0f  Input "${this.name}" set to: ${value}`);\r\n  }\r\n}\r\n\r\nclass Label extends UIComponent {\r\n  constructor(name, text) {\r\n    super(name);\r\n    this.text = text;\r\n  }\r\n  \r\n  render(indent = 0) {\r\n    if (!this.visible) return;\r\n    \r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83c\udff7\ufe0f  Label: ${this.text}`);\r\n  }\r\n}\r\n\r\n// Composite components - Containers\r\nclass Panel extends UIComponent {\r\n  constructor(name, title) {\r\n    super(name);\r\n    this.title = title;\r\n    this.components = [];\r\n  }\r\n  \r\n  add(component) {\r\n    this.components.push(component);\r\n    console.log(`\u2795 Added ${component.name} to ${this.name}`);\r\n  }\r\n  \r\n  remove(component) {\r\n    const index = this.components.indexOf(component);\r\n    if (index > -1) {\r\n      this.components.splice(index, 1);\r\n      console.log(`\u2796 Removed ${component.name} from ${this.name}`);\r\n    }\r\n  }\r\n  \r\n  render(indent = 0) {\r\n    if (!this.visible) return;\r\n    \r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udce6 Panel: "${this.title}"`);\r\n    \r\n    // Render all child components\r\n    for (const component of this.components) {\r\n      if (component.isVisible()) {\r\n        component.render(indent + 2);\r\n      }\r\n    }\r\n  }\r\n  \r\n  setVisible(visible) {\r\n    super.setVisible(visible);\r\n    // Optionally hide/show all children\r\n    console.log(`\ud83d\udc41\ufe0f  ${this.name} visibility: ${visible ? \'shown\' : \'hidden\'}`);\r\n  }\r\n}\r\n\r\nclass Form extends UIComponent {\r\n  constructor(name, title) {\r\n    super(name);\r\n    this.title = title;\r\n    this.components = [];\r\n  }\r\n  \r\n  add(component) {\r\n    this.components.push(component);\r\n    console.log(`\u2795 Added ${component.name} to form ${this.name}`);\r\n  }\r\n  \r\n  remove(component) {\r\n    const index = this.components.indexOf(component);\r\n    if (index > -1) {\r\n      this.components.splice(index, 1);\r\n      console.log(`\u2796 Removed ${component.name} from form ${this.name}`);\r\n    }\r\n  }\r\n  \r\n  render(indent = 0) {\r\n    if (!this.visible) return;\r\n    \r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udccb Form: "${this.title}"`);\r\n    console.log(`${spaces}${"\u2500".repeat(20)}`);\r\n    \r\n    // Render all form components\r\n    for (const component of this.components) {\r\n      if (component.isVisible()) {\r\n        component.render(indent + 2);\r\n      }\r\n    }\r\n    \r\n    console.log(`${spaces}${"\u2500".repeat(20)}`);\r\n  }\r\n  \r\n  submit() {\r\n    console.log(`\ud83d\udce8 Submitting form: ${this.title}`);\r\n    \r\n    // Collect data from input fields\r\n    const formData = {};\r\n    for (const component of this.components) {\r\n      if (component instanceof TextInput && component.isVisible()) {\r\n        formData[component.name] = component.value;\r\n      }\r\n    }\r\n    \r\n    console.log("\ud83d\udcca Form data:", formData);\r\n    return formData;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== UI Component System Demo ===\\n");\r\n\r\nconsole.log("Building UI components:");\r\nconsole.log("-".repeat(22));\r\n\r\n// Create basic components\r\nconst nameInput = new TextInput("name", "Enter your name");\r\nconst emailInput = new TextInput("email", "Enter your email");\r\nconst submitBtn = new Button("submit", "Submit Form");\r\nconst cancelBtn = new Button("cancel", "Cancel");\r\n\r\nconst titleLabel = new Label("title", "Contact Information");\r\nconst nameLabel = new Label("nameLabel", "Name:");\r\nconst emailLabel = new Label("emailLabel", "Email:");\r\n\r\n// Create containers\r\nconst headerPanel = new Panel("header", "Form Header");\r\nconst inputPanel = new Panel("inputs", "User Input");\r\nconst buttonPanel = new Panel("buttons", "Actions");\r\nconst mainForm = new Form("contactForm", "Contact Form");\r\n\r\n// Build the component tree\r\nheaderPanel.add(titleLabel);\r\n\r\ninputPanel.add(nameLabel);\r\ninputPanel.add(nameInput);\r\ninputPanel.add(emailLabel);\r\ninputPanel.add(emailInput);\r\n\r\nbuttonPanel.add(submitBtn);\r\nbuttonPanel.add(cancelBtn);\r\n\r\nmainForm.add(headerPanel);\r\nmainForm.add(inputPanel);\r\nmainForm.add(buttonPanel);\r\n\r\nconsole.log("\\nRendering UI:");\r\nconsole.log("-".repeat(13));\r\nmainForm.render();\r\n\r\nconsole.log("\\nUser interactions:");\r\nconsole.log("-".repeat(17));\r\nnameInput.setValue("John Doe");\r\nemailInput.setValue("john@example.com");\r\n\r\nconsole.log("\\nSubmitting form:");\r\nconsole.log("-".repeat(15));\r\nmainForm.submit();\r\n\r\nconsole.log("\\nHiding email field:");\r\nconsole.log("-".repeat(18));\r\nemailInput.setVisible(false);\r\ninputPanel.render();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,o.jsx)(n.h3,{id:"organization-structure",children:"Organization Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Component for organization entities\r\nclass OrganizationEntity {\r\n  constructor(name, role) {\r\n    this.name = name;\r\n    this.role = role;\r\n  }\r\n  \r\n  getSalaryBudget() {\r\n    throw new Error("getSalaryBudget() method must be implemented");\r\n  }\r\n  \r\n  getEmployeeCount() {\r\n    throw new Error("getEmployeeCount() method must be implemented");\r\n  }\r\n  \r\n  displayStructure(indent = 0) {\r\n    throw new Error("displayStructure() method must be implemented");\r\n  }\r\n}\r\n\r\n// Leaf - Individual employee\r\nclass Employee extends OrganizationEntity {\r\n  constructor(name, role, salary) {\r\n    super(name, role);\r\n    this.salary = salary;\r\n  }\r\n  \r\n  getSalaryBudget() {\r\n    return this.salary;\r\n  }\r\n  \r\n  getEmployeeCount() {\r\n    return 1;\r\n  }\r\n  \r\n  displayStructure(indent = 0) {\r\n    const spaces = " ".repeat(indent);\r\n    console.log(`${spaces}\ud83d\udc64 ${this.name} - ${this.role} ($${this.salary})`);\r\n  }\r\n}\r\n\r\n// Composite - Department with employees and sub-departments\r\nclass Department extends OrganizationEntity {\r\n  constructor(name) {\r\n    super(name, "Department");\r\n    this.entities = [];\r\n  }\r\n  \r\n  add(entity) {\r\n    this.entities.push(entity);\r\n    console.log(`\u2795 Added ${entity.name} to ${this.name} department`);\r\n  }\r\n  \r\n  remove(entity) {\r\n    const index = this.entities.indexOf(entity);\r\n    if (index > -1) {\r\n      this.entities.splice(index, 1);\r\n      console.log(`\u2796 Removed ${entity.name} from ${this.name} department`);\r\n    }\r\n  }\r\n  \r\n  getSalaryBudget() {\r\n    let totalBudget = 0;\r\n    for (const entity of this.entities) {\r\n      totalBudget += entity.getSalaryBudget();\r\n    }\r\n    return totalBudget;\r\n  }\r\n  \r\n  getEmployeeCount() {\r\n    let totalEmployees = 0;\r\n    for (const entity of this.entities) {\r\n      totalEmployees += entity.getEmployeeCount();\r\n    }\r\n    return totalEmployees;\r\n  }\r\n  \r\n  displayStructure(indent = 0) {\r\n    const spaces = " ".repeat(indent);\r\n    const budget = this.getSalaryBudget();\r\n    const employees = this.getEmployeeCount();\r\n    \r\n    console.log(`${spaces}\ud83c\udfe2 ${this.name} Department`);\r\n    console.log(`${spaces}   (${employees} employees, $${budget} budget)`);\r\n    \r\n    // Display all entities in this department\r\n    for (const entity of this.entities) {\r\n      entity.displayStructure(indent + 2);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Organization Structure Demo ===\\n");\r\n\r\nconsole.log("Building organization structure:");\r\nconsole.log("-".repeat(30));\r\n\r\n// Create employees\r\nconst ceo = new Employee("Alice Johnson", "CEO", 150000);\r\nconst cto = new Employee("Bob Smith", "CTO", 120000);\r\nconst dev1 = new Employee("Carol Davis", "Senior Developer", 80000);\r\nconst dev2 = new Employee("David Wilson", "Developer", 70000);\r\nconst qa = new Employee("Eve Brown", "QA Engineer", 65000);\r\nconst hr = new Employee("Frank Miller", "HR Manager", 75000);\r\nconst designer = new Employee("Grace Lee", "UI Designer", 70000);\r\n\r\n// Create departments\r\nconst engineering = new Department("Engineering");\r\nconst humanResources = new Department("Human Resources");\r\nconst company = new Department("TechCorp");\r\n\r\n// Build organization structure\r\nengineering.add(cto);\r\nengineering.add(dev1);\r\nengineering.add(dev2);\r\nengineering.add(qa);\r\nengineering.add(designer);\r\n\r\nhumanResources.add(hr);\r\n\r\ncompany.add(ceo);\r\ncompany.add(engineering);\r\ncompany.add(humanResources);\r\n\r\nconsole.log("\\nOrganization Chart:");\r\nconsole.log("-".repeat(18));\r\ncompany.displayStructure();\r\n\r\nconsole.log(`\\n\ud83d\udcca Company Statistics:`);\r\nconsole.log(`   Total Employees: ${company.getEmployeeCount()}`);\r\nconsole.log(`   Total Salary Budget: $${company.getSalaryBudget()}`);\r\n\r\nconsole.log(`\\n\ud83d\udcca Engineering Department:`);\r\nconsole.log(`   Employees: ${engineering.getEmployeeCount()}`);\r\nconsole.log(`   Budget: $${engineering.getSalaryBudget()}`);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uniform Treatment"}),": Treats simple and complex objects uniformly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easy to Add"}),": Easy to add new component types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Recursive Structure"}),": Natural representation of tree structures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Client Simplification"}),": Clients don't need to distinguish between leaves and composites"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Overly General Design"}),": Can make the design overly general"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type Safety"}),": Harder to restrict component types in the composite"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complexity"}),": Can become complex with deep hierarchies"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tree Structures"}),": When you need to represent part-whole hierarchies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uniform Interface"}),": When you want clients to treat simple and complex objects uniformly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Recursive Operations"}),": When operations need to be performed recursively on tree structures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UI Systems"}),": For building complex UI with nested components"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-implementation-variants",children:"\ud83d\udd04 Implementation Variants"}),"\n",(0,o.jsxs)(n.h3,{id:"1-transparent-composite-shown-in-examples",children:["1. ",(0,o.jsx)(n.strong,{children:"Transparent Composite"})," (shown in examples)"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Child management methods in the component interface"}),"\n",(0,o.jsx)(n.li,{children:"All components can have children (even if they don't use them)"}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"2-safe-composite",children:["2. ",(0,o.jsx)(n.strong,{children:"Safe Composite"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Child management only in composite classes\r\nclass SafeComposite extends Component {\r\n  add(component) { /* implementation */ }\r\n  remove(component) { /* implementation */ }\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visitor"}),": Often used together to perform operations on composite structures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterator"}),": Can be used to traverse composite structures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Decorator"}),": Both use tree structures but Decorator adds behavior while Composite represents hierarchies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flyweight"}),": Can be used to share leaf components in large composite structures"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/composite",children:"Composite Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/composite",children:"JavaScript Composite Pattern Examples"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);