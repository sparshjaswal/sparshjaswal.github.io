"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2243],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},8594:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dsa-key-pattern/Two-Pointers","title":"Two Pointers","description":"Description","source":"@site/docs/dsa-key-pattern/05-Two-Pointers.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Two-Pointers","permalink":"/docs/dsa-key-pattern/Two-Pointers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sliding Window","permalink":"/docs/dsa-key-pattern/Sliding-Window"},"next":{"title":"Cyclic Sort (Index-Based)","permalink":"/docs/dsa-key-pattern/Cyclic-Sort"}}');var t=i(4848),s=i(8453);const o={},l="Two Pointers",a={},c=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Common Approaches",id:"common-approaches",level:2},{value:"Opposite Direction (Converging)",id:"opposite-direction-converging",level:3},{value:"Same Direction (Fast-Slow)",id:"same-direction-fast-slow",level:3},{value:"Three Pointers",id:"three-pointers",level:3}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"two-pointers",children:"Two Pointers"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"The two pointers technique involves having two different indices move through the input at different speeds to solve various array or linked list problems."}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(n)"}),"\n",(0,t.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(1)"}),"\n",(0,t.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Opposite Direction"}),": Pointers start at opposite ends and move towards each other"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Same Direction"}),": Both pointers move in the same direction at different speeds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Target Sum"}),": Use sorted array property to find pairs with target sum"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Partitioning"}),": Separate elements based on certain criteria"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Two Sum II - Input Array is Sorted"}),"\n",(0,t.jsx)(n.li,{children:"Dutch National Flag: Sort Colors"}),"\n",(0,t.jsx)(n.li,{children:"Next Permutation"}),"\n",(0,t.jsx)(n.li,{children:"Bag of Tokens"}),"\n",(0,t.jsx)(n.li,{children:"Container with Most Water"}),"\n",(0,t.jsx)(n.li,{children:"Trapping Rain Water"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/discuss/post/1688903/solved-all-two-pointers-problems-in-100-z56cn/",children:"https://leetcode.com/discuss/post/1688903/solved-all-two-pointers-problems-in-100-z56cn/"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sorted arrays where you need to find pairs or triplets"}),"\n",(0,t.jsx)(n.li,{children:"Problems requiring partitioning or rearranging"}),"\n",(0,t.jsx)(n.li,{children:"Optimizing brute force O(n\xb2) solutions to O(n)"}),"\n",(0,t.jsx)(n.li,{children:"Palindrome checking in arrays/strings"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Find pair with target sum in sorted array"'}),"\n",(0,t.jsx)(n.li,{children:'"Remove duplicates from sorted array"'}),"\n",(0,t.jsx)(n.li,{children:'"Reverse or rearrange array elements"'}),"\n",(0,t.jsx)(n.li,{children:'"Find three numbers that sum to target"'}),"\n",(0,t.jsx)(n.li,{children:'"Separate elements based on condition"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-approaches",children:"Common Approaches"}),"\n",(0,t.jsx)(n.h3,{id:"opposite-direction-converging",children:"Opposite Direction (Converging)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start: left = 0, right = n-1"}),"\n",(0,t.jsx)(n.li,{children:"Move pointers based on condition"}),"\n",(0,t.jsx)(n.li,{children:"Used for: target sum, palindrome check, container problems"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"same-direction-fast-slow",children:"Same Direction (Fast-Slow)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Both pointers start from beginning"}),"\n",(0,t.jsx)(n.li,{children:"Fast pointer moves ahead based on condition"}),"\n",(0,t.jsx)(n.li,{children:"Used for: removing elements, partitioning"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"three-pointers",children:"Three Pointers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Extension for three-sum type problems"}),"\n",(0,t.jsx)(n.li,{children:"Fix one pointer, use two-pointer on remaining array"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);