"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2491],{2937:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"design-pattern/creational/prototype","title":"Prototype Pattern \ud83e\uddec","description":"Definition: The Prototype pattern allows you to create new objects by cloning existing instances (prototypes) rather than creating new instances from scratch.","source":"@site/docs/design-pattern/creational/prototype.md","sourceDirName":"design-pattern/creational","slug":"/design-pattern/creational/prototype","permalink":"/docs/design-pattern/creational/prototype","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Factory Method Pattern \ud83c\udfed","permalink":"/docs/design-pattern/creational/factory-method"},"next":{"title":"Singleton Pattern \ud83c\udfef","permalink":"/docs/design-pattern/creational/singleton"}}');var t=r(4848),s=r(8453);const l={},i="Prototype Pattern \ud83e\uddec",a={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Document Templates",id:"document-templates",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Game Character System",id:"game-character-system",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Configuration Templates",id:"configuration-templates",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Types of Cloning",id:"-types-of-cloning",level:2},{value:"1. <strong>Shallow Copy</strong>",id:"1-shallow-copy",level:3},{value:"2. <strong>Deep Copy</strong>",id:"2-deep-copy",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"prototype-pattern-",children:"Prototype Pattern \ud83e\uddec"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": The Prototype pattern allows you to create new objects by cloning existing instances (prototypes) rather than creating new instances from scratch."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,t.jsx)(n.p,{children:"Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype. This pattern is useful when object creation is costly or complex."}),"\n",(0,t.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,t.jsx)(n.p,{children:"You need to create objects that are similar to existing objects but with some modifications. Creating objects from scratch might be:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expensive"}),": Complex initialization or resource-intensive setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complex"}),": Requires many parameters or configuration steps"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic"}),": Object types are determined at runtime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration-heavy"}),": Objects have many settings that vary slightly"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,t.jsxs)(n.p,{children:["The Prototype pattern suggests creating objects by cloning existing instances rather than instantiating new ones. The pattern involves creating a prototype interface that declares a ",(0,t.jsx)(n.code,{children:"clone()"})," method, and concrete classes implement this method to return copies of themselves."]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Prototype (interface)\r\n\u2514\u2500\u2500 clone()\r\n\r\nConcretePrototype implements Prototype\r\n\u251c\u2500\u2500 field1, field2, field3\r\n\u2514\u2500\u2500 clone() \u2192 return copy of this\r\n\r\nClient\r\n\u251c\u2500\u2500 prototype: Prototype\r\n\u2514\u2500\u2500 operation() \u2192 prototype.clone()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,t.jsx)(n.h3,{id:"document-templates",children:"Document Templates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Prototype interface\r\nclass DocumentPrototype {\r\n  clone() {\r\n    throw new Error("clone() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete prototype - Resume document\r\nclass Resume extends DocumentPrototype {\r\n  constructor(name = "", experience = [], skills = [], template = "classic") {\r\n    super();\r\n    this.type = "Resume";\r\n    this.name = name;\r\n    this.experience = [...experience]; // Deep copy array\r\n    this.skills = [...skills]; // Deep copy array\r\n    this.template = template;\r\n    this.createdAt = new Date();\r\n    this.id = Math.random().toString(36).substr(2, 9);\r\n  }\r\n  \r\n  clone() {\r\n    console.log(`\ud83e\uddec Cloning resume: ${this.name || \'Unnamed\'}`);\r\n    \r\n    // Create a deep copy\r\n    const cloned = new Resume(\r\n      this.name,\r\n      this.experience.map(exp => ({...exp})), // Deep copy objects in array\r\n      [...this.skills], // Copy array\r\n      this.template\r\n    );\r\n    \r\n    // Reset some fields for the clone\r\n    cloned.id = Math.random().toString(36).substr(2, 9);\r\n    cloned.createdAt = new Date();\r\n    \r\n    console.log(`\u2705 Resume cloned with ID: ${cloned.id}`);\r\n    return cloned;\r\n  }\r\n  \r\n  addExperience(company, position, years) {\r\n    this.experience.push({ company, position, years });\r\n    console.log(`\ud83d\udcbc Added experience: ${position} at ${company}`);\r\n  }\r\n  \r\n  addSkill(skill) {\r\n    if (!this.skills.includes(skill)) {\r\n      this.skills.push(skill);\r\n      console.log(`\ud83c\udfaf Added skill: ${skill}`);\r\n    }\r\n  }\r\n  \r\n  setName(name) {\r\n    this.name = name;\r\n    console.log(`\ud83d\udc64 Name set to: ${name}`);\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\ud83d\udcc4 Resume Details:`);\r\n    console.log(`   ID: ${this.id}`);\r\n    console.log(`   Name: ${this.name}`);\r\n    console.log(`   Template: ${this.template}`);\r\n    console.log(`   Experience: ${this.experience.length} jobs`);\r\n    console.log(`   Skills: ${this.skills.join(\', \')}`);\r\n    console.log(`   Created: ${this.createdAt.toLocaleDateString()}`);\r\n  }\r\n}\r\n\r\n// Concrete prototype - Cover Letter document  \r\nclass CoverLetter extends DocumentPrototype {\r\n  constructor(recipientCompany = "", position = "", template = "formal") {\r\n    super();\r\n    this.type = "Cover Letter";\r\n    this.recipientCompany = recipientCompany;\r\n    this.position = position;\r\n    this.template = template;\r\n    this.paragraphs = [];\r\n    this.createdAt = new Date();\r\n    this.id = Math.random().toString(36).substr(2, 9);\r\n  }\r\n  \r\n  clone() {\r\n    console.log(`\ud83e\uddec Cloning cover letter for: ${this.position} at ${this.recipientCompany}`);\r\n    \r\n    const cloned = new CoverLetter(\r\n      this.recipientCompany,\r\n      this.position,\r\n      this.template\r\n    );\r\n    \r\n    // Deep copy paragraphs\r\n    cloned.paragraphs = [...this.paragraphs];\r\n    \r\n    // Reset some fields\r\n    cloned.id = Math.random().toString(36).substr(2, 9);\r\n    cloned.createdAt = new Date();\r\n    \r\n    console.log(`\u2705 Cover letter cloned with ID: ${cloned.id}`);\r\n    return cloned;\r\n  }\r\n  \r\n  addParagraph(content) {\r\n    this.paragraphs.push(content);\r\n    console.log(`\ud83d\udcdd Added paragraph (${content.substring(0, 30)}...)`);\r\n  }\r\n  \r\n  setRecipient(company, position) {\r\n    this.recipientCompany = company;\r\n    this.position = position;\r\n    console.log(`\ud83c\udfe2 Set recipient: ${position} at ${company}`);\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\ud83d\udcc4 Cover Letter Details:`);\r\n    console.log(`   ID: ${this.id}`);\r\n    console.log(`   Company: ${this.recipientCompany}`);\r\n    console.log(`   Position: ${this.position}`);\r\n    console.log(`   Template: ${this.template}`);\r\n    console.log(`   Paragraphs: ${this.paragraphs.length}`);\r\n    console.log(`   Created: ${this.createdAt.toLocaleDateString()}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Document Prototype Demo ===\\n");\r\n\r\nconsole.log("Creating master resume template:");\r\nconsole.log("-".repeat(35));\r\n\r\nconst masterResume = new Resume();\r\nmasterResume.setName("John Doe");\r\nmasterResume.addExperience("Tech Corp", "Senior Developer", 3);\r\nmasterResume.addExperience("StartupXYZ", "Full Stack Developer", 2);\r\nmasterResume.addSkill("JavaScript");\r\nmasterResume.addSkill("React");\r\nmasterResume.addSkill("Node.js");\r\n\r\nmasterResume.display();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Cloning resume for different applications:");\r\nconsole.log("-".repeat(45));\r\n\r\n// Clone for frontend position\r\nconst frontendResume = masterResume.clone();\r\nfrontendResume.setName("John Doe - Frontend Specialist");\r\nfrontendResume.addSkill("Vue.js");\r\nfrontendResume.addSkill("CSS/SASS");\r\n\r\nconsole.log();\r\nfrontendResume.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Clone for backend position\r\nconst backendResume = masterResume.clone();\r\nbackendResume.setName("John Doe - Backend Engineer");\r\nbackendResume.addExperience("DataCorp", "Backend Specialist", 1);\r\nbackendResume.addSkill("Python");\r\nbackendResume.addSkill("PostgreSQL");\r\n\r\nconsole.log();\r\nbackendResume.display();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Creating and cloning cover letters:");\r\nconsole.log("-".repeat(35));\r\n\r\nconst masterCoverLetter = new CoverLetter("TechCompany", "Software Engineer", "modern");\r\nmasterCoverLetter.addParagraph("I am writing to express my strong interest in the Software Engineer position...");\r\nmasterCoverLetter.addParagraph("With over 5 years of experience in software development...");\r\nmasterCoverLetter.addParagraph("I am particularly excited about this opportunity because...");\r\n\r\nmasterCoverLetter.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Clone for different companies\r\nconst googleCoverLetter = masterCoverLetter.clone();\r\ngoogleCoverLetter.setRecipient("Google", "Senior Software Engineer");\r\n\r\nconsole.log();\r\ngoogleCoverLetter.display();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,t.jsx)(n.h3,{id:"game-character-system",children:"Game Character System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Abstract prototype for game characters\r\nclass GameCharacter {\r\n  constructor() {\r\n    if (this.constructor === GameCharacter) {\r\n      throw new Error("GameCharacter is abstract and cannot be instantiated");\r\n    }\r\n  }\r\n  \r\n  clone() {\r\n    throw new Error("clone() method must be implemented");\r\n  }\r\n  \r\n  display() {\r\n    throw new Error("display() method must be implemented");\r\n  }\r\n}\r\n\r\n// Warrior character prototype\r\nclass Warrior extends GameCharacter {\r\n  constructor(name = "Unnamed Warrior", level = 1) {\r\n    super();\r\n    this.type = "Warrior";\r\n    this.name = name;\r\n    this.level = level;\r\n    this.health = 100 + (level * 10);\r\n    this.strength = 15 + (level * 2);\r\n    this.defense = 12 + (level * 1.5);\r\n    this.weapons = ["Iron Sword"];\r\n    this.armor = ["Leather Armor"];\r\n    this.skills = ["Sword Strike", "Shield Block"];\r\n    this.experience = level * 100;\r\n    this.id = Math.random().toString(36).substr(2, 9);\r\n  }\r\n  \r\n  clone() {\r\n    console.log(`\u2694\ufe0f Cloning warrior: ${this.name} (Level ${this.level})`);\r\n    \r\n    const cloned = new Warrior(this.name, this.level);\r\n    \r\n    // Deep copy arrays and objects\r\n    cloned.weapons = [...this.weapons];\r\n    cloned.armor = [...this.armor];\r\n    cloned.skills = [...this.skills];\r\n    cloned.health = this.health;\r\n    cloned.strength = this.strength;\r\n    cloned.defense = this.defense;\r\n    cloned.experience = this.experience;\r\n    \r\n    // Generate new ID\r\n    cloned.id = Math.random().toString(36).substr(2, 9);\r\n    \r\n    console.log(`\u2705 Warrior cloned with ID: ${cloned.id}`);\r\n    return cloned;\r\n  }\r\n  \r\n  levelUp() {\r\n    this.level++;\r\n    this.health += 10;\r\n    this.strength += 2;\r\n    this.defense += 1.5;\r\n    this.experience += 100;\r\n    console.log(`\ud83d\udcc8 ${this.name} leveled up to ${this.level}!`);\r\n  }\r\n  \r\n  addWeapon(weapon) {\r\n    this.weapons.push(weapon);\r\n    console.log(`\u2694\ufe0f ${this.name} acquired: ${weapon}`);\r\n  }\r\n  \r\n  addSkill(skill) {\r\n    if (!this.skills.includes(skill)) {\r\n      this.skills.push(skill);\r\n      console.log(`\ud83c\udfaf ${this.name} learned: ${skill}`);\r\n    }\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\u2694\ufe0f Warrior Character:`);\r\n    console.log(`   ID: ${this.id}`);\r\n    console.log(`   Name: ${this.name}`);\r\n    console.log(`   Level: ${this.level}`);\r\n    console.log(`   Health: ${this.health}`);\r\n    console.log(`   Strength: ${this.strength}`);\r\n    console.log(`   Defense: ${this.defense}`);\r\n    console.log(`   Weapons: ${this.weapons.join(\', \')}`);\r\n    console.log(`   Armor: ${this.armor.join(\', \')}`);\r\n    console.log(`   Skills: ${this.skills.join(\', \')}`);\r\n    console.log(`   Experience: ${this.experience}`);\r\n  }\r\n}\r\n\r\n// Mage character prototype\r\nclass Mage extends GameCharacter {\r\n  constructor(name = "Unnamed Mage", level = 1) {\r\n    super();\r\n    this.type = "Mage";\r\n    this.name = name;\r\n    this.level = level;\r\n    this.health = 70 + (level * 7);\r\n    this.mana = 100 + (level * 15);\r\n    this.intelligence = 18 + (level * 3);\r\n    this.defense = 8 + (level * 1);\r\n    this.spells = ["Magic Missile", "Heal"];\r\n    this.staff = "Wooden Staff";\r\n    this.robes = ["Apprentice Robes"];\r\n    this.spellbooks = ["Basic Magic"];\r\n    this.experience = level * 100;\r\n    this.id = Math.random().toString(36).substr(2, 9);\r\n  }\r\n  \r\n  clone() {\r\n    console.log(`\ud83d\udd2e Cloning mage: ${this.name} (Level ${this.level})`);\r\n    \r\n    const cloned = new Mage(this.name, this.level);\r\n    \r\n    // Deep copy arrays and properties\r\n    cloned.spells = [...this.spells];\r\n    cloned.robes = [...this.robes];\r\n    cloned.spellbooks = [...this.spellbooks];\r\n    cloned.health = this.health;\r\n    cloned.mana = this.mana;\r\n    cloned.intelligence = this.intelligence;\r\n    cloned.defense = this.defense;\r\n    cloned.staff = this.staff;\r\n    cloned.experience = this.experience;\r\n    \r\n    // Generate new ID\r\n    cloned.id = Math.random().toString(36).substr(2, 9);\r\n    \r\n    console.log(`\u2705 Mage cloned with ID: ${cloned.id}`);\r\n    return cloned;\r\n  }\r\n  \r\n  levelUp() {\r\n    this.level++;\r\n    this.health += 7;\r\n    this.mana += 15;\r\n    this.intelligence += 3;\r\n    this.defense += 1;\r\n    this.experience += 100;\r\n    console.log(`\ud83d\udcc8 ${this.name} leveled up to ${this.level}!`);\r\n  }\r\n  \r\n  learnSpell(spell) {\r\n    if (!this.spells.includes(spell)) {\r\n      this.spells.push(spell);\r\n      console.log(`\u2728 ${this.name} learned spell: ${spell}`);\r\n    }\r\n  }\r\n  \r\n  acquireSpellbook(book) {\r\n    this.spellbooks.push(book);\r\n    console.log(`\ud83d\udcda ${this.name} acquired spellbook: ${book}`);\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\ud83d\udd2e Mage Character:`);\r\n    console.log(`   ID: ${this.id}`);\r\n    console.log(`   Name: ${this.name}`);\r\n    console.log(`   Level: ${this.level}`);\r\n    console.log(`   Health: ${this.health}`);\r\n    console.log(`   Mana: ${this.mana}`);\r\n    console.log(`   Intelligence: ${this.intelligence}`);\r\n    console.log(`   Defense: ${this.defense}`);\r\n    console.log(`   Staff: ${this.staff}`);\r\n    console.log(`   Spells: ${this.spells.join(\', \')}`);\r\n    console.log(`   Robes: ${this.robes.join(\', \')}`);\r\n    console.log(`   Spellbooks: ${this.spellbooks.join(\', \')}`);\r\n    console.log(`   Experience: ${this.experience}`);\r\n  }\r\n}\r\n\r\n// Character factory using prototypes\r\nclass CharacterFactory {\r\n  constructor() {\r\n    this.prototypes = new Map();\r\n  }\r\n  \r\n  registerPrototype(key, prototype) {\r\n    this.prototypes.set(key, prototype);\r\n    console.log(`\ud83d\udcdd Registered prototype: ${key} (${prototype.type})`);\r\n  }\r\n  \r\n  createCharacter(key, customizations = {}) {\r\n    if (!this.prototypes.has(key)) {\r\n      throw new Error(`Prototype \'${key}\' not found`);\r\n    }\r\n    \r\n    console.log(`\ud83c\udfed Creating character from prototype: ${key}`);\r\n    const prototype = this.prototypes.get(key);\r\n    const character = prototype.clone();\r\n    \r\n    // Apply customizations\r\n    Object.keys(customizations).forEach(prop => {\r\n      if (character.hasOwnProperty(prop)) {\r\n        character[prop] = customizations[prop];\r\n        console.log(`\ud83c\udfa8 Customized ${prop}: ${customizations[prop]}`);\r\n      }\r\n    });\r\n    \r\n    return character;\r\n  }\r\n  \r\n  listPrototypes() {\r\n    console.log("\ud83d\udccb Available Prototypes:");\r\n    this.prototypes.forEach((prototype, key) => {\r\n      console.log(`   ${key}: ${prototype.type} (Level ${prototype.level})`);\r\n    });\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Game Character Prototype Demo ===\\n");\r\n\r\n// Create prototype characters\r\nconsole.log("Creating prototype characters:");\r\nconsole.log("-".repeat(30));\r\n\r\nconst warriorPrototype = new Warrior("Template Warrior", 5);\r\nwarriorPrototype.addWeapon("Steel Sword");\r\nwarriorPrototype.addWeapon("Battle Axe");\r\nwarriorPrototype.addSkill("Berserker Rage");\r\nwarriorPrototype.levelUp();\r\n\r\nconst magePrototype = new Mage("Template Mage", 4);\r\nmagePrototype.learnSpell("Fireball");\r\nmagePrototype.learnSpell("Lightning Bolt");\r\nmagePrototype.acquireSpellbook("Advanced Elementals");\r\nmagePrototype.levelUp();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\n// Setup character factory\r\nconsole.log("Setting up character factory:");\r\nconsole.log("-".repeat(30));\r\n\r\nconst factory = new CharacterFactory();\r\nfactory.registerPrototype("elite-warrior", warriorPrototype);\r\nfactory.registerPrototype("elite-mage", magePrototype);\r\n\r\nfactory.listPrototypes();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Creating characters from prototypes:");\r\nconsole.log("-".repeat(40));\r\n\r\n// Create customized characters from prototypes\r\nconst playerWarrior = factory.createCharacter("elite-warrior", {\r\n  name: "Sir Lancelot",\r\n  level: 8\r\n});\r\n\r\nconsole.log();\r\nplayerWarrior.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\nconst playerMage = factory.createCharacter("elite-mage", {\r\n  name: "Gandalf",\r\n  level: 10,\r\n  staff: "Staff of Power"\r\n});\r\n\r\nconsole.log();\r\nplayerMage.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Create multiple NPCs quickly\r\nconsole.log("Creating NPC army:");\r\nconsole.log("-".repeat(18));\r\n\r\nconst npcWarriors = [];\r\nfor (let i = 1; i <= 3; i++) {\r\n  const npc = factory.createCharacter("elite-warrior", {\r\n    name: `Guard ${i}`,\r\n    level: 3 + i\r\n  });\r\n  npcWarriors.push(npc);\r\n}\r\n\r\nnpcWarriors.forEach(npc => {\r\n  console.log(`\ud83d\udee1\ufe0f ${npc.name} - Level ${npc.level} - Health: ${npc.health}`);\r\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,t.jsx)(n.h3,{id:"configuration-templates",children:"Configuration Templates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Prototype for application configurations\r\nclass AppConfig {\r\n  constructor() {\r\n    this.database = {\r\n      host: \'localhost\',\r\n      port: 5432,\r\n      name: \'myapp\',\r\n      ssl: false\r\n    };\r\n    this.server = {\r\n      port: 3000,\r\n      host: \'localhost\',\r\n      cors: true\r\n    };\r\n    this.logging = {\r\n      level: \'info\',\r\n      file: \'./logs/app.log\',\r\n      console: true\r\n    };\r\n    this.cache = {\r\n      enabled: false,\r\n      ttl: 3600,\r\n      provider: \'redis\'\r\n    };\r\n    this.features = [];\r\n    this.environment = \'development\';\r\n    this.created = new Date();\r\n  }\r\n  \r\n  clone() {\r\n    console.log(`\u2699\ufe0f Cloning configuration for: ${this.environment}`);\r\n    \r\n    const cloned = new AppConfig();\r\n    \r\n    // Deep copy all configuration objects\r\n    cloned.database = { ...this.database };\r\n    cloned.server = { ...this.server };\r\n    cloned.logging = { ...this.logging };\r\n    cloned.cache = { ...this.cache };\r\n    cloned.features = [...this.features];\r\n    cloned.environment = this.environment;\r\n    cloned.created = new Date();\r\n    \r\n    console.log(`\u2705 Configuration cloned for: ${cloned.environment}`);\r\n    return cloned;\r\n  }\r\n  \r\n  setEnvironment(env) {\r\n    this.environment = env;\r\n    console.log(`\ud83c\udf0d Environment set to: ${env}`);\r\n  }\r\n  \r\n  enableFeature(feature) {\r\n    if (!this.features.includes(feature)) {\r\n      this.features.push(feature);\r\n      console.log(`\ud83c\udfaf Feature enabled: ${feature}`);\r\n    }\r\n  }\r\n  \r\n  updateDatabase(options) {\r\n    this.database = { ...this.database, ...options };\r\n    console.log(`\ud83d\udcbe Database config updated:`, options);\r\n  }\r\n  \r\n  display() {\r\n    console.log(`\u2699\ufe0f App Configuration [${this.environment.toUpperCase()}]:`);\r\n    console.log(`   Database: ${this.database.host}:${this.database.port}/${this.database.name}`);\r\n    console.log(`   Server: ${this.server.host}:${this.server.port}`);\r\n    console.log(`   Logging: ${this.logging.level} \u2192 ${this.logging.file}`);\r\n    console.log(`   Cache: ${this.cache.enabled ? \'Enabled\' : \'Disabled\'} (${this.cache.provider})`);\r\n    console.log(`   Features: ${this.features.join(\', \') || \'None\'}`);\r\n    console.log(`   Created: ${this.created.toLocaleString()}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Configuration Prototype Demo ===\\n");\r\n\r\nconsole.log("Creating base configuration:");\r\nconsole.log("-".repeat(30));\r\n\r\nconst baseConfig = new AppConfig();\r\nbaseConfig.enableFeature("user-authentication");\r\nbaseConfig.enableFeature("email-notifications");\r\nbaseConfig.display();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Creating environment-specific configs:");\r\nconsole.log("-".repeat(40));\r\n\r\n// Development config\r\nconst devConfig = baseConfig.clone();\r\ndevConfig.setEnvironment("development");\r\ndevConfig.updateDatabase({ host: \'localhost\', ssl: false });\r\ndevConfig.enableFeature("debug-mode");\r\ndevConfig.enableFeature("hot-reload");\r\n\r\nconsole.log();\r\ndevConfig.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Production config\r\nconst prodConfig = baseConfig.clone();\r\nprodConfig.setEnvironment("production");\r\nprodConfig.updateDatabase({ \r\n  host: \'prod-db.company.com\', \r\n  ssl: true,\r\n  port: 5433 \r\n});\r\nprodConfig.server.port = 8080;\r\nprodConfig.server.host = \'0.0.0.0\';\r\nprodConfig.logging.level = \'error\';\r\nprodConfig.cache.enabled = true;\r\n\r\nconsole.log();\r\nprodConfig.display();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Staging config\r\nconst stagingConfig = prodConfig.clone();\r\nstagingConfig.setEnvironment("staging");\r\nstagingConfig.updateDatabase({ host: \'staging-db.company.com\' });\r\nstagingConfig.logging.level = \'warn\';\r\nstagingConfig.enableFeature("performance-monitoring");\r\n\r\nconsole.log();\r\nstagingConfig.display();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Avoids expensive object creation operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility"}),": Can create objects dynamically at runtime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reduced Subclassing"}),": Alternative to creating many subclasses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration"}),": Easy to create pre-configured object templates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Independence"}),": Cloned objects are independent of their prototypes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deep Copying Complexity"}),": Implementing deep cloning can be complex"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Circular References"}),": Issues with objects that reference each other"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Usage"}),": May keep references to large prototype objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clone Method Maintenance"}),": Must maintain clone methods in all classes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expensive Object Creation"}),": When creating objects is costly (database connections, file operations)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complex Configuration"}),": Objects require extensive setup or configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime Object Creation"}),": Object types are determined at runtime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Template Objects"}),": Need to create many similar objects with slight variations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoiding Subclassing"}),": Alternative to creating many subclasses for similar objects"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-types-of-cloning",children:"\ud83d\udd04 Types of Cloning"}),"\n",(0,t.jsxs)(n.h3,{id:"1-shallow-copy",children:["1. ",(0,t.jsx)(n.strong,{children:"Shallow Copy"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Copies object properties but not nested objects"}),"\n",(0,t.jsx)(n.li,{children:"Faster but shares references to nested objects"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"2-deep-copy",children:["2. ",(0,t.jsx)(n.strong,{children:"Deep Copy"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Recursively copies all nested objects"}),"\n",(0,t.jsx)(n.li,{children:"Slower but creates completely independent objects"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Shallow copy example\r\nshallowClone() {\r\n  return Object.assign({}, this);\r\n}\r\n\r\n// Deep copy example (for simple objects)\r\ndeepClone() {\r\n  return JSON.parse(JSON.stringify(this));\r\n}\r\n\r\n// Custom deep copy with proper handling\r\ncustomDeepClone() {\r\n  const cloned = new this.constructor();\r\n  // Copy primitive properties\r\n  Object.keys(this).forEach(key => {\r\n    if (typeof this[key] !== 'object' || this[key] === null) {\r\n      cloned[key] = this[key];\r\n    } else if (Array.isArray(this[key])) {\r\n      cloned[key] = [...this[key]];\r\n    } else {\r\n      cloned[key] = { ...this[key] };\r\n    }\r\n  });\r\n  return cloned;\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Factory Method"}),": Both create objects, but Prototype clones existing instances while Factory Method creates new instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Abstract Factory"}),": Can use Prototype to store and clone product prototypes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Singleton"}),": Opposite approach - Prototype creates many instances while Singleton ensures only one"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Builder"}),": Both handle complex object creation, but Builder constructs step-by-step while Prototype clones existing objects"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/prototype",children:"Prototype Pattern - Refactoring.Guru"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",children:"JavaScript Object Cloning Techniques"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var o=r(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);