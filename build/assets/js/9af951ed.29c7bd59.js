"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2955],{4609:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"javascript/async-await-enhanced","title":"\u23f0 Async/Await - Complete Guide","description":"Master modern asynchronous JavaScript with clean, readable syntax","source":"@site/docs/javascript/async-await-enhanced.md","sourceDirName":"javascript","slug":"/javascript/async-await-enhanced","permalink":"/docs/javascript/async-await-enhanced","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Array","permalink":"/docs/javascript/arrays"},"next":{"title":"Async & Await","permalink":"/docs/javascript/async-await"}}');var t=e(4848),a=e(8453);const o={},i="\u23f0 Async/Await - Complete Guide",c={},l=[{value:"\ud83d\udcd6 Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83c\udfaf What is Async/Await?",id:"-what-is-asyncawait",level:2},{value:"\ud83e\udde0 Mental Model",id:"-mental-model",level:3},{value:"\u2728 Evolution of Asynchronous JavaScript",id:"-evolution-of-asynchronous-javascript",level:3},{value:"<strong>1. Callbacks (The Dark Ages)</strong>",id:"1-callbacks-the-dark-ages",level:4},{value:"<strong>2. Promises (The Renaissance)</strong>",id:"2-promises-the-renaissance",level:4},{value:"<strong>3. Async/Await (The Modern Era)</strong>",id:"3-asyncawait-the-modern-era",level:4},{value:"\ud83d\udd04 Async Functions",id:"-async-functions",level:2},{value:"\ud83d\udcdd <strong>Declaration Syntax</strong>",id:"-declaration-syntax",level:3},{value:"\ud83c\udf81 <strong>Return Values</strong>",id:"-return-values",level:3},{value:"\ud83c\udfaf <strong>Function Behavior</strong>",id:"-function-behavior",level:3},{value:"\u23f3 Await Keyword",id:"-await-keyword",level:2},{value:"\ud83c\udfaf <strong>Basic Usage</strong>",id:"-basic-usage",level:3},{value:"\ud83d\udd04 <strong>Sequential vs Parallel Execution</strong>",id:"-sequential-vs-parallel-execution",level:3},{value:"<strong>Sequential (one after another)</strong>",id:"sequential-one-after-another",level:4},{value:"<strong>Parallel (at the same time)</strong>",id:"parallel-at-the-same-time",level:4},{value:"\ud83c\udfb2 <strong>Awaiting Different Promise States</strong>",id:"-awaiting-different-promise-states",level:3},{value:"\u26a0\ufe0f Error Handling",id:"\ufe0f-error-handling",level:2},{value:"\ud83d\udee1\ufe0f <strong>Try/Catch Blocks</strong>",id:"\ufe0f-trycatch-blocks",level:3},{value:"\ud83d\udd04 <strong>Multiple Error Sources</strong>",id:"-multiple-error-sources",level:3},{value:"\ud83c\udfaf <strong>Error Recovery Patterns</strong>",id:"-error-recovery-patterns",level:3},{value:"\ud83d\ude80 Advanced Patterns",id:"-advanced-patterns",level:2},{value:"\ud83d\udd04 <strong>Retry Logic with Exponential Backoff</strong>",id:"-retry-logic-with-exponential-backoff",level:3},{value:"\ud83c\udfaf <strong>Timeout Implementation</strong>",id:"-timeout-implementation",level:3},{value:"\ud83d\udd00 <strong>Conditional Awaiting</strong>",id:"-conditional-awaiting",level:3},{value:"\ud83d\udd04 <strong>Async Iteration</strong>",id:"-async-iteration",level:3},{value:"\u26a1 Performance Considerations",id:"-performance-considerations",level:2},{value:"\ud83d\ude80 <strong>Parallel vs Sequential Execution</strong>",id:"-parallel-vs-sequential-execution",level:3},{value:"\ud83c\udfaf <strong>When to Use Sequential vs Parallel</strong>",id:"-when-to-use-sequential-vs-parallel",level:3},{value:"\ud83d\udd27 <strong>Memory and Resource Management</strong>",id:"-memory-and-resource-management",level:3},{value:"\ud83c\udf0d Real-World Examples",id:"-real-world-examples",level:2},{value:"\ud83d\udcf1 <strong>Progressive Data Loading</strong>",id:"-progressive-data-loading",level:3},{value:"\ud83d\udd04 <strong>Robust API Client</strong>",id:"-robust-api-client",level:3},{value:"\u2705 Best Practices",id:"-best-practices",level:2},{value:"1. \ud83c\udfaf <strong>Use Async/Await for Readability</strong>",id:"1--use-asyncawait-for-readability",level:3},{value:"2. \u26a1 <strong>Optimize for Performance</strong>",id:"2--optimize-for-performance",level:3},{value:"3. \ud83d\udee1\ufe0f <strong>Handle Errors Properly</strong>",id:"3-\ufe0f-handle-errors-properly",level:3},{value:"4. \ud83d\udd04 <strong>Use Appropriate Patterns</strong>",id:"4--use-appropriate-patterns",level:3},{value:"\u274c Common Pitfalls",id:"-common-pitfalls",level:2},{value:"1. \ud83d\udeab <strong>Forgetting await</strong>",id:"1--forgetting-await",level:3},{value:"2. \ud83d\udeab <strong>Sequential When Could Be Parallel</strong>",id:"2--sequential-when-could-be-parallel",level:3},{value:"3. \ud83d\udeab <strong>Improper Error Handling</strong>",id:"3--improper-error-handling",level:3},{value:"\ud83d\udcca Async/Await vs Promises vs Callbacks",id:"-asyncawait-vs-promises-vs-callbacks",level:2},{value:"\ud83c\udfaf Key Takeaways",id:"-key-takeaways",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(r){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-asyncawait---complete-guide",children:"\u23f0 Async/Await - Complete Guide"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Master modern asynchronous JavaScript with clean, readable syntax"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-table-of-contents",children:"\ud83d\udcd6 Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-asyncawait",children:"What is Async/Await?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#async-functions",children:"Async Functions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#await-keyword",children:"Await Keyword"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#performance-considerations",children:"Performance Considerations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#real-world-examples",children:"Real-World Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#common-pitfalls",children:"Common Pitfalls"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-asyncawait",children:"\ud83c\udfaf What is Async/Await?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Async/Await"})," is syntactic sugar built on top of Promises that allows you to write asynchronous code that looks and behaves more like synchronous code. It makes Promise-based code much more readable and easier to understand."]}),"\n",(0,t.jsx)(n.h3,{id:"-mental-model",children:"\ud83e\udde0 Mental Model"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Think of async/await like ",(0,t.jsx)(n.strong,{children:"waiting in line"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"async"}),' declares "this function might need to wait"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"await"}),' means "wait here until this is ready"']}),"\n",(0,t.jsxs)(n.li,{children:["The line (execution) pauses at each ",(0,t.jsx)(n.code,{children:"await"})," but doesn't block other lines (other functions)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-evolution-of-asynchronous-javascript",children:"\u2728 Evolution of Asynchronous JavaScript"}),"\n",(0,t.jsx)(n.h4,{id:"1-callbacks-the-dark-ages",children:(0,t.jsx)(n.strong,{children:"1. Callbacks (The Dark Ages)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function fetchUserData(userId, callback) {\r\n    fetchUser(userId, (userError, user) => {\r\n        if (userError) return callback(userError);\r\n        \r\n        fetchUserPosts(user.id, (postsError, posts) => {\r\n            if (postsError) return callback(postsError);\r\n            \r\n            fetchPostComments(posts[0].id, (commentsError, comments) => {\r\n                if (commentsError) return callback(commentsError);\r\n                \r\n                callback(null, { user, posts, comments });\r\n            });\r\n        });\r\n    });\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-promises-the-renaissance",children:(0,t.jsx)(n.strong,{children:"2. Promises (The Renaissance)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function fetchUserData(userId) {\r\n    return fetchUser(userId)\r\n        .then(user => fetchUserPosts(user.id))\r\n        .then(posts => fetchPostComments(posts[0].id))\r\n        .then(comments => ({ user, posts, comments }))\r\n        .catch(error => {\r\n            throw new Error(`Failed to fetch user data: ${error.message}`);\r\n        });\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-asyncawait-the-modern-era",children:(0,t.jsx)(n.strong,{children:"3. Async/Await (The Modern Era)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function fetchUserData(userId) {\r\n    try {\r\n        const user = await fetchUser(userId);\r\n        const posts = await fetchUserPosts(user.id);\r\n        const comments = await fetchPostComments(posts[0].id);\r\n        \r\n        return { user, posts, comments };\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch user data: ${error.message}`);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-async-functions",children:"\ud83d\udd04 Async Functions"}),"\n",(0,t.jsxs)(n.h3,{id:"-declaration-syntax",children:["\ud83d\udcdd ",(0,t.jsx)(n.strong,{children:"Declaration Syntax"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Function declaration\r\nasync function fetchData() {\r\n    // Async code here\r\n}\r\n\r\n// Function expression\r\nconst fetchData = async function() {\r\n    // Async code here\r\n};\r\n\r\n// Arrow function\r\nconst fetchData = async () => {\r\n    // Async code here\r\n};\r\n\r\n// Method in object\r\nconst api = {\r\n    async fetchData() {\r\n        // Async code here\r\n    }\r\n};\r\n\r\n// Method in class\r\nclass ApiClient {\r\n    async fetchData() {\r\n        // Async code here\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-return-values",children:["\ud83c\udf81 ",(0,t.jsx)(n.strong,{children:"Return Values"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Async functions ALWAYS return a Promise\r\nasync function example1() {\r\n    return 'Hello'; // Returns Promise.resolve('Hello')\r\n}\r\n\r\nasync function example2() {\r\n    return Promise.resolve('World'); // Returns Promise.resolve('World')\r\n}\r\n\r\nasync function example3() {\r\n    throw new Error('Oops'); // Returns Promise.reject(Error('Oops'))\r\n}\r\n\r\n// Usage\r\nexample1().then(value => console.log(value)); // \"Hello\"\r\nexample2().then(value => console.log(value)); // \"World\"\r\nexample3().catch(error => console.log(error.message)); // \"Oops\"\r\n\r\n// Or with await\r\nasync function main() {\r\n    try {\r\n        const result1 = await example1(); // \"Hello\"\r\n        const result2 = await example2(); // \"World\"\r\n        const result3 = await example3(); // Throws error\r\n    } catch (error) {\r\n        console.log('Caught:', error.message);\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-function-behavior",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Function Behavior"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function demonstrateAsyncBehavior() {\r\n    console.log('1. Function starts');\r\n    \r\n    const result = await new Promise(resolve => {\r\n        console.log('2. Promise executor runs immediately');\r\n        setTimeout(() => {\r\n            console.log('3. Promise resolves after 1 second');\r\n            resolve('Done!');\r\n        }, 1000);\r\n    });\r\n    \r\n    console.log('4. After await:', result);\r\n    return result;\r\n}\r\n\r\nconsole.log('Before calling async function');\r\ndemonstrateAsyncBehavior().then(result => {\r\n    console.log('5. Function completed with:', result);\r\n});\r\nconsole.log('After calling async function');\r\n\r\n// Output order:\r\n// Before calling async function\r\n// 1. Function starts\r\n// 2. Promise executor runs immediately\r\n// After calling async function\r\n// 3. Promise resolves after 1 second\r\n// 4. After await: Done!\r\n// 5. Function completed with: Done!\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-await-keyword",children:"\u23f3 Await Keyword"}),"\n",(0,t.jsxs)(n.h3,{id:"-basic-usage",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Basic Usage"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// await can only be used inside async functions\r\nasync function fetchUserProfile(userId) {\r\n    // await pauses execution until Promise resolves\r\n    const response = await fetch(`/api/users/${userId}`);\r\n    const user = await response.json();\r\n    \r\n    return user;\r\n}\r\n\r\n// This would cause a SyntaxError:\r\n// const user = await fetch('/api/user'); // Error: await outside async function\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-sequential-vs-parallel-execution",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Sequential vs Parallel Execution"})]}),"\n",(0,t.jsx)(n.h4,{id:"sequential-one-after-another",children:(0,t.jsx)(n.strong,{children:"Sequential (one after another)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function fetchDataSequentially() {\r\n    console.log('Starting sequential fetches...');\r\n    \r\n    const user = await fetch('/api/user').then(r => r.json());     // Wait 1 second\r\n    const posts = await fetch('/api/posts').then(r => r.json());   // Wait another 1 second\r\n    const todos = await fetch('/api/todos').then(r => r.json());   // Wait another 1 second\r\n    \r\n    // Total time: ~3 seconds\r\n    return { user, posts, todos };\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parallel-at-the-same-time",children:(0,t.jsx)(n.strong,{children:"Parallel (at the same time)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function fetchDataParallel() {\r\n    console.log('Starting parallel fetches...');\r\n    \r\n    // Start all requests simultaneously\r\n    const userPromise = fetch('/api/user').then(r => r.json());\r\n    const postsPromise = fetch('/api/posts').then(r => r.json());\r\n    const todosPromise = fetch('/api/todos').then(r => r.json());\r\n    \r\n    // Wait for all to complete\r\n    const [user, posts, todos] = await Promise.all([\r\n        userPromise,\r\n        postsPromise,\r\n        todosPromise\r\n    ]);\r\n    \r\n    // Total time: ~1 second (fastest request)\r\n    return { user, posts, todos };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-awaiting-different-promise-states",children:["\ud83c\udfb2 ",(0,t.jsx)(n.strong,{children:"Awaiting Different Promise States"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function awaitExamples() {\r\n    // Await resolved promise\r\n    const resolved = await Promise.resolve('Success!');\r\n    console.log(resolved); // \"Success!\"\r\n    \r\n    // Await rejected promise (throws error)\r\n    try {\r\n        const rejected = await Promise.reject('Failed!');\r\n    } catch (error) {\r\n        console.log('Caught:', error); // \"Caught: Failed!\"\r\n    }\r\n    \r\n    // Await pending promise\r\n    const delayed = await new Promise(resolve => {\r\n        setTimeout(() => resolve('After delay'), 1000);\r\n    });\r\n    console.log(delayed); // \"After delay\" (after 1 second)\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-error-handling",children:"\u26a0\ufe0f Error Handling"}),"\n",(0,t.jsxs)(n.h3,{id:"\ufe0f-trycatch-blocks",children:["\ud83d\udee1\ufe0f ",(0,t.jsx)(n.strong,{children:"Try/Catch Blocks"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function robustApiCall() {\r\n    try {\r\n        const response = await fetch('/api/data');\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        if (!data.valid) {\r\n            throw new Error('Invalid data received');\r\n        }\r\n        \r\n        return data;\r\n        \r\n    } catch (error) {\r\n        console.error('API call failed:', error.message);\r\n        \r\n        // Different handling based on error type\r\n        if (error.message.includes('HTTP 404')) {\r\n            return { error: 'Data not found' };\r\n        } else if (error.message.includes('Invalid data')) {\r\n            return { error: 'Data validation failed' };\r\n        } else {\r\n            throw error; // Re-throw unknown errors\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-multiple-error-sources",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Multiple Error Sources"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function complexOperation() {\r\n    try {\r\n        // Network error possibility\r\n        const response = await fetch('/api/data');\r\n        const data = await response.json();\r\n        \r\n        // Processing error possibility\r\n        const processed = await processData(data);\r\n        \r\n        // Validation error possibility\r\n        const validated = await validateData(processed);\r\n        \r\n        return validated;\r\n        \r\n    } catch (error) {\r\n        // Handle different error types\r\n        if (error instanceof TypeError) {\r\n            console.error('Network or parsing error:', error.message);\r\n        } else if (error instanceof ValidationError) {\r\n            console.error('Validation failed:', error.message);\r\n        } else {\r\n            console.error('Unknown error:', error.message);\r\n        }\r\n        \r\n        throw error;\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-error-recovery-patterns",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Error Recovery Patterns"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function fetchWithFallback(primaryUrl, fallbackUrl) {\r\n    try {\r\n        const response = await fetch(primaryUrl);\r\n        if (!response.ok) throw new Error('Primary source failed');\r\n        return await response.json();\r\n    } catch (primaryError) {\r\n        console.warn('Primary source failed, trying fallback...');\r\n        \r\n        try {\r\n            const response = await fetch(fallbackUrl);\r\n            if (!response.ok) throw new Error('Fallback source failed');\r\n            return await response.json();\r\n        } catch (fallbackError) {\r\n            console.error('Both sources failed');\r\n            throw new Error('All data sources unavailable');\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nasync function loadCriticalData() {\r\n    try {\r\n        const data = await fetchWithFallback('/api/data', '/api/backup-data');\r\n        return data;\r\n    } catch (error) {\r\n        // Use cached data as last resort\r\n        return getCachedData();\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-advanced-patterns",children:"\ud83d\ude80 Advanced Patterns"}),"\n",(0,t.jsxs)(n.h3,{id:"-retry-logic-with-exponential-backoff",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Retry Logic with Exponential Backoff"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {\r\n    let lastError;\r\n    \r\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n        try {\r\n            return await fn();\r\n        } catch (error) {\r\n            lastError = error;\r\n            \r\n            if (attempt === maxRetries) {\r\n                throw new Error(`Failed after ${maxRetries + 1} attempts: ${error.message}`);\r\n            }\r\n            \r\n            const delay = baseDelay * Math.pow(2, attempt); // Exponential backoff\r\n            console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\r\n            \r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nasync function unreliableOperation() {\r\n    const random = Math.random();\r\n    if (random < 0.7) {\r\n        throw new Error('Random failure');\r\n    }\r\n    return 'Success!';\r\n}\r\n\r\nretryWithBackoff(unreliableOperation)\r\n    .then(result => console.log('Result:', result))\r\n    .catch(error => console.error('Final error:', error.message));\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-timeout-implementation",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Timeout Implementation"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function timeout(ms) {\r\n    return new Promise((_, reject) => {\r\n        setTimeout(() => reject(new Error('Operation timed out')), ms);\r\n    });\r\n}\r\n\r\nasync function fetchWithTimeout(url, timeoutMs = 5000) {\r\n    try {\r\n        const result = await Promise.race([\r\n            fetch(url).then(r => r.json()),\r\n            timeout(timeoutMs)\r\n        ]);\r\n        return result;\r\n    } catch (error) {\r\n        if (error.message === 'Operation timed out') {\r\n            throw new Error(`Request to ${url} timed out after ${timeoutMs}ms`);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Usage\r\nfetchWithTimeout('/api/slow-endpoint', 3000)\r\n    .then(data => console.log('Data:', data))\r\n    .catch(error => console.error('Error:', error.message));\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-conditional-awaiting",children:["\ud83d\udd00 ",(0,t.jsx)(n.strong,{children:"Conditional Awaiting"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function smartDataFetcher(useCache = false) {\r\n    if (useCache) {\r\n        const cached = getCachedData();\r\n        if (cached) {\r\n            console.log('Using cached data');\r\n            return cached;\r\n        }\r\n    }\r\n    \r\n    console.log('Fetching fresh data');\r\n    const response = await fetch('/api/data');\r\n    const data = await response.json();\r\n    \r\n    if (useCache) {\r\n        setCachedData(data);\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\n// Conditional async operations\r\nasync function processUser(user, includeAnalytics = false) {\r\n    const profile = await fetchUserProfile(user.id);\r\n    \r\n    let analytics = null;\r\n    if (includeAnalytics) {\r\n        analytics = await fetchUserAnalytics(user.id);\r\n    }\r\n    \r\n    return {\r\n        ...profile,\r\n        analytics\r\n    };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-async-iteration",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Async Iteration"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Process items sequentially\r\nasync function processItemsSequentially(items) {\r\n    const results = [];\r\n    \r\n    for (const item of items) {\r\n        const result = await processItem(item);\r\n        results.push(result);\r\n    }\r\n    \r\n    return results;\r\n}\r\n\r\n// Process items with controlled concurrency\r\nasync function processItemsConcurrently(items, concurrency = 3) {\r\n    const results = [];\r\n    \r\n    for (let i = 0; i < items.length; i += concurrency) {\r\n        const batch = items.slice(i, i + concurrency);\r\n        const batchResults = await Promise.all(\r\n            batch.map(item => processItem(item))\r\n        );\r\n        results.push(...batchResults);\r\n    }\r\n    \r\n    return results;\r\n}\r\n\r\n// Async generator for streaming data\r\nasync function* fetchDataStream(pageSize = 10) {\r\n    let page = 1;\r\n    let hasMore = true;\r\n    \r\n    while (hasMore) {\r\n        const response = await fetch(`/api/data?page=${page}&size=${pageSize}`);\r\n        const data = await response.json();\r\n        \r\n        yield data.items;\r\n        \r\n        hasMore = data.hasMore;\r\n        page++;\r\n    }\r\n}\r\n\r\n// Usage\r\nasync function consumeDataStream() {\r\n    for await (const batch of fetchDataStream()) {\r\n        console.log('Processing batch:', batch.length);\r\n        // Process batch\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-performance-considerations",children:"\u26a1 Performance Considerations"}),"\n",(0,t.jsxs)(n.h3,{id:"-parallel-vs-sequential-execution",children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Parallel vs Sequential Execution"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// SLOW: Sequential execution (3 seconds total)\r\nasync function slowDataFetch() {\r\n    const start = Date.now();\r\n    \r\n    const users = await fetch('/api/users').then(r => r.json());     // 1s\r\n    const posts = await fetch('/api/posts').then(r => r.json());     // 1s  \r\n    const comments = await fetch('/api/comments').then(r => r.json()); // 1s\r\n    \r\n    console.log(`Sequential took: ${Date.now() - start}ms`);\r\n    return { users, posts, comments };\r\n}\r\n\r\n// FAST: Parallel execution (1 second total)\r\nasync function fastDataFetch() {\r\n    const start = Date.now();\r\n    \r\n    const [users, posts, comments] = await Promise.all([\r\n        fetch('/api/users').then(r => r.json()),\r\n        fetch('/api/posts').then(r => r.json()),\r\n        fetch('/api/comments').then(r => r.json())\r\n    ]);\r\n    \r\n    console.log(`Parallel took: ${Date.now() - start}ms`);\r\n    return { users, posts, comments };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-when-to-use-sequential-vs-parallel",children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"When to Use Sequential vs Parallel"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async function userDashboard(userId) {\r\n    // Sequential: posts depend on user data\r\n    const user = await fetchUser(userId);\r\n    const posts = await fetchUserPosts(user.id); // Needs user.id\r\n    \r\n    // Parallel: independent operations\r\n    const [analytics, notifications, settings] = await Promise.all([\r\n        fetchUserAnalytics(userId),\r\n        fetchUserNotifications(userId),\r\n        fetchUserSettings(userId)\r\n    ]);\r\n    \r\n    return {\r\n        user,\r\n        posts,\r\n        analytics,\r\n        notifications,\r\n        settings\r\n    };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-memory-and-resource-management",children:["\ud83d\udd27 ",(0,t.jsx)(n.strong,{children:"Memory and Resource Management"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Efficient streaming for large datasets\r\nasync function processLargeDataset() {\r\n    const response = await fetch('/api/large-dataset');\r\n    const reader = response.body.getReader();\r\n    \r\n    try {\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            \r\n            if (done) break;\r\n            \r\n            // Process chunk without loading entire dataset into memory\r\n            await processChunk(value);\r\n        }\r\n    } finally {\r\n        reader.releaseLock();\r\n    }\r\n}\r\n\r\n// Avoid memory leaks with cleanup\r\nasync function fetchWithCleanup() {\r\n    const controller = new AbortController();\r\n    \r\n    try {\r\n        const response = await fetch('/api/data', {\r\n            signal: controller.signal\r\n        });\r\n        return await response.json();\r\n    } catch (error) {\r\n        if (error.name === 'AbortError') {\r\n            console.log('Request cancelled');\r\n        }\r\n        throw error;\r\n    } finally {\r\n        // Cleanup happens automatically with try/finally\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-real-world-examples",children:"\ud83c\udf0d Real-World Examples"}),"\n",(0,t.jsxs)(n.h3,{id:"-progressive-data-loading",children:["\ud83d\udcf1 ",(0,t.jsx)(n.strong,{children:"Progressive Data Loading"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class DashboardLoader {\r\n    constructor(userId) {\r\n        this.userId = userId;\r\n        this.cache = new Map();\r\n    }\r\n    \r\n    async loadEssentialData() {\r\n        console.log('Loading essential data...');\r\n        \r\n        try {\r\n            // Load critical data first\r\n            const user = await this.fetchUser();\r\n            this.renderUserProfile(user);\r\n            \r\n            // Load secondary data in parallel\r\n            const [notifications, quickStats] = await Promise.all([\r\n                this.fetchNotifications(),\r\n                this.fetchQuickStats()\r\n            ]);\r\n            \r\n            this.renderNotifications(notifications);\r\n            this.renderQuickStats(quickStats);\r\n            \r\n            // Load heavy data in background\r\n            this.loadHeavyDataInBackground();\r\n            \r\n        } catch (error) {\r\n            this.showErrorMessage('Failed to load dashboard');\r\n            console.error(error);\r\n        }\r\n    }\r\n    \r\n    async loadHeavyDataInBackground() {\r\n        try {\r\n            // Use low priority for heavy operations\r\n            await this.delay(100); // Let UI update first\r\n            \r\n            const [analytics, reports, history] = await Promise.all([\r\n                this.fetchAnalytics(),\r\n                this.fetchReports(),\r\n                this.fetchHistory()\r\n            ]);\r\n            \r\n            this.renderAnalytics(analytics);\r\n            this.renderReports(reports);\r\n            this.renderHistory(history);\r\n            \r\n        } catch (error) {\r\n            console.warn('Background data loading failed:', error);\r\n            // Don't disrupt user experience for non-critical data\r\n        }\r\n    }\r\n    \r\n    async fetchUser() {\r\n        if (this.cache.has('user')) {\r\n            return this.cache.get('user');\r\n        }\r\n        \r\n        const user = await fetch(`/api/users/${this.userId}`).then(r => r.json());\r\n        this.cache.set('user', user);\r\n        return user;\r\n    }\r\n    \r\n    delay(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\n// Usage\r\nconst dashboard = new DashboardLoader('user123');\r\ndashboard.loadEssentialData();\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-robust-api-client",children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Robust API Client"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class ApiClient {\r\n    constructor(baseURL, options = {}) {\r\n        this.baseURL = baseURL;\r\n        this.defaultTimeout = options.timeout || 10000;\r\n        this.retryAttempts = options.retryAttempts || 3;\r\n        this.retryDelay = options.retryDelay || 1000;\r\n    }\r\n    \r\n    async request(endpoint, options = {}) {\r\n        const url = `${this.baseURL}${endpoint}`;\r\n        const timeout = options.timeout || this.defaultTimeout;\r\n        \r\n        return await this.retryWithBackoff(async () => {\r\n            const controller = new AbortController();\r\n            const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n            \r\n            try {\r\n                const response = await fetch(url, {\r\n                    ...options,\r\n                    signal: controller.signal\r\n                });\r\n                \r\n                clearTimeout(timeoutId);\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n                }\r\n                \r\n                return await response.json();\r\n                \r\n            } catch (error) {\r\n                clearTimeout(timeoutId);\r\n                \r\n                if (error.name === 'AbortError') {\r\n                    throw new Error('Request timeout');\r\n                }\r\n                \r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    \r\n    async retryWithBackoff(fn) {\r\n        let lastError;\r\n        \r\n        for (let attempt = 0; attempt < this.retryAttempts; attempt++) {\r\n            try {\r\n                return await fn();\r\n            } catch (error) {\r\n                lastError = error;\r\n                \r\n                if (attempt === this.retryAttempts - 1) {\r\n                    throw error;\r\n                }\r\n                \r\n                const delay = this.retryDelay * Math.pow(2, attempt);\r\n                console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\r\n                \r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Convenience methods\r\n    async get(endpoint, options = {}) {\r\n        return this.request(endpoint, { ...options, method: 'GET' });\r\n    }\r\n    \r\n    async post(endpoint, data, options = {}) {\r\n        return this.request(endpoint, {\r\n            ...options,\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                ...options.headers\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n}\r\n\r\n// Usage\r\nconst api = new ApiClient('https://api.example.com', {\r\n    timeout: 5000,\r\n    retryAttempts: 3\r\n});\r\n\r\nasync function loadUserData(userId) {\r\n    try {\r\n        const user = await api.get(`/users/${userId}`);\r\n        const posts = await api.get(`/users/${userId}/posts`);\r\n        \r\n        return { user, posts };\r\n    } catch (error) {\r\n        console.error('Failed to load user data:', error.message);\r\n        throw error;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(n.h3,{id:"1--use-asyncawait-for-readability",children:["1. \ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Use Async/Await for Readability"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Clean, readable async code\r\nasync function fetchUserProfile(userId) {\r\n    try {\r\n        const user = await fetchUser(userId);\r\n        const preferences = await fetchUserPreferences(userId);\r\n        return { ...user, preferences };\r\n    } catch (error) {\r\n        throw new Error(`Failed to load profile: ${error.message}`);\r\n    }\r\n}\r\n\r\n// AVOID: Mixing async/await with .then()\r\nasync function mixedPatterns(userId) {\r\n    const user = await fetchUser(userId);\r\n    return fetchUserPreferences(userId).then(preferences => {\r\n        return { ...user, preferences };\r\n    });\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2--optimize-for-performance",children:["2. \u26a1 ",(0,t.jsx)(n.strong,{children:"Optimize for Performance"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Parallel when possible\r\nasync function loadDashboard() {\r\n    const [user, notifications, settings] = await Promise.all([\r\n        fetchUser(),\r\n        fetchNotifications(),\r\n        fetchSettings()\r\n    ]);\r\n    return { user, notifications, settings };\r\n}\r\n\r\n// AVOID: Unnecessary sequential execution\r\nasync function loadDashboardSlow() {\r\n    const user = await fetchUser();\r\n    const notifications = await fetchNotifications();\r\n    const settings = await fetchSettings();\r\n    return { user, notifications, settings };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3-\ufe0f-handle-errors-properly",children:["3. \ud83d\udee1\ufe0f ",(0,t.jsx)(n.strong,{children:"Handle Errors Properly"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Comprehensive error handling\r\nasync function robustOperation() {\r\n    try {\r\n        const result = await riskyOperation();\r\n        return result;\r\n    } catch (error) {\r\n        console.error('Operation failed:', error.message);\r\n        // Provide fallback or user-friendly error\r\n        throw new Error('Service temporarily unavailable');\r\n    }\r\n}\r\n\r\n// AVOID: Unhandled promise rejections\r\nasync function riskyOperation() {\r\n    const result = await fetch('/api/data'); // No error handling!\r\n    return result.json();\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"4--use-appropriate-patterns",children:["4. \ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Use Appropriate Patterns"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Sequential when order matters\r\nasync function setupUserAccount(userData) {\r\n    const user = await createUser(userData);\r\n    const profile = await createProfile(user.id);\r\n    const settings = await setupDefaultSettings(user.id);\r\n    return { user, profile, settings };\r\n}\r\n\r\n// Parallel when independent\r\nasync function loadPageData() {\r\n    const [header, sidebar, content] = await Promise.all([\r\n        loadHeader(),\r\n        loadSidebar(),\r\n        loadContent()\r\n    ]);\r\n    return { header, sidebar, content };\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-common-pitfalls",children:"\u274c Common Pitfalls"}),"\n",(0,t.jsxs)(n.h3,{id:"1--forgetting-await",children:["1. \ud83d\udeab ",(0,t.jsx)(n.strong,{children:"Forgetting await"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// WRONG: Promise not awaited\r\nasync function wrongWay() {\r\n    const data = fetch('/api/data'); // Returns Promise, not data!\r\n    console.log(data); // [object Promise]\r\n    return data;\r\n}\r\n\r\n// CORRECT: Properly awaited\r\nasync function rightWay() {\r\n    const response = await fetch('/api/data');\r\n    const data = await response.json();\r\n    console.log(data); // Actual data\r\n    return data;\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2--sequential-when-could-be-parallel",children:["2. \ud83d\udeab ",(0,t.jsx)(n.strong,{children:"Sequential When Could Be Parallel"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// INEFFICIENT: Sequential execution\r\nasync function inefficient() {\r\n    const user = await fetch('/api/user').then(r => r.json());    // 1 second\r\n    const posts = await fetch('/api/posts').then(r => r.json());  // 1 second\r\n    // Total: 2 seconds\r\n    return { user, posts };\r\n}\r\n\r\n// EFFICIENT: Parallel execution\r\nasync function efficient() {\r\n    const [user, posts] = await Promise.all([\r\n        fetch('/api/user').then(r => r.json()),\r\n        fetch('/api/posts').then(r => r.json())\r\n    ]);\r\n    // Total: 1 second\r\n    return { user, posts };\r\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3--improper-error-handling",children:["3. \ud83d\udeab ",(0,t.jsx)(n.strong,{children:"Improper Error Handling"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// WRONG: Catching errors too broadly\r\nasync function tooGeneric() {\r\n    try {\r\n        const result = await complexOperation();\r\n        return result;\r\n    } catch (error) {\r\n        return null; // Loses important error information\r\n    }\r\n}\r\n\r\n// BETTER: Specific error handling\r\nasync function specificHandling() {\r\n    try {\r\n        const result = await complexOperation();\r\n        return result;\r\n    } catch (error) {\r\n        if (error.name === 'NetworkError') {\r\n            throw new Error('Network connection failed');\r\n        } else if (error.name === 'ValidationError') {\r\n            throw new Error('Invalid data provided');\r\n        } else {\r\n            throw error; // Re-throw unknown errors\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-asyncawait-vs-promises-vs-callbacks",children:"\ud83d\udcca Async/Await vs Promises vs Callbacks"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Callbacks"}),(0,t.jsx)(n.th,{children:"Promises"}),(0,t.jsx)(n.th,{children:"Async/Await"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Syntax"})}),(0,t.jsx)(n.td,{children:"Nested functions"}),(0,t.jsx)(n.td,{children:".then() chains"}),(0,t.jsx)(n.td,{children:"Linear code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Readability"})}),(0,t.jsx)(n.td,{children:"Poor (callback hell)"}),(0,t.jsx)(n.td,{children:"Good"}),(0,t.jsx)(n.td,{children:"Excellent"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Error Handling"})}),(0,t.jsx)(n.td,{children:"Manual per callback"}),(0,t.jsx)(n.td,{children:".catch()"}),(0,t.jsx)(n.td,{children:"try/catch"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Debugging"})}),(0,t.jsx)(n.td,{children:"Difficult"}),(0,t.jsx)(n.td,{children:"Better"}),(0,t.jsx)(n.td,{children:"Natural"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Performance"})}),(0,t.jsx)(n.td,{children:"Good"}),(0,t.jsx)(n.td,{children:"Good"}),(0,t.jsx)(n.td,{children:"Good"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Learning Curve"})}),(0,t.jsx)(n.td,{children:"Low"}),(0,t.jsx)(n.td,{children:"Medium"}),(0,t.jsx)(n.td,{children:"Low"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-key-takeaways",children:"\ud83c\udfaf Key Takeaways"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async functions always return Promises"})," - even if you return a regular value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"await can only be used inside async functions"})," - with the exception of top-level await in modules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Promise.all() for parallel operations"})," - don't await unnecessarily in sequence"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle errors with try/catch"})," - much cleaner than .catch() chains"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sequential for dependencies, parallel for independence"})," - choose the right pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async/await is syntactic sugar"})," - it's still Promises underneath"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Always consider performance implications"})," - parallel vs sequential execution"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",children:"MDN: async function"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",children:"MDN: await"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://javascript.info/async-await",children:"JavaScript.info: Async/await"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Ready to write cleaner asynchronous code? Start using async/await to simplify your Promise-based applications!"})," \ud83d\ude80"]})]})}function h(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>o,x:()=>i});var s=e(6540);const t={},a=s.createContext(t);function o(r){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function i(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:o(r.components),s.createElement(a.Provider,{value:n},r.children)}}}]);