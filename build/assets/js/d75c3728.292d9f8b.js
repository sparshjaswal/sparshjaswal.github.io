"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[9192],{7177:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"design-pattern/structural/decorator","title":"Decorator Pattern \ud83c\udfa8","description":"Definition: The Decorator pattern allows behavior to be added to objects dynamically without altering their structure. It provides a flexible alternative to subclassing for extending functionality.","source":"@site/docs/design-pattern/structural/decorator.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/decorator","permalink":"/docs/design-pattern/structural/decorator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Composite Pattern \ud83c\udf33","permalink":"/docs/design-pattern/structural/composite"},"next":{"title":"Facade Pattern \ud83c\udfdb\ufe0f","permalink":"/docs/design-pattern/structural/facade"}}');var o=n(4848),a=n(8453);const s={},i="Decorator Pattern \ud83c\udfa8",c={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Coffee Shop",id:"coffee-shop",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Text Formatter",id:"text-formatter",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Data Source with Encryption and Compression",id:"data-source-with-encryption-and-compression",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Implementation Variants",id:"-implementation-variants",level:2},{value:"1. <strong>Function-based Decorators (JavaScript specific)</strong>",id:"1-function-based-decorators-javascript-specific",level:3},{value:"2. <strong>Mixin-based Decorators</strong>",id:"2-mixin-based-decorators",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"decorator-pattern-",children:"Decorator Pattern \ud83c\udfa8"})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Definition"}),": The Decorator pattern allows behavior to be added to objects dynamically without altering their structure. It provides a flexible alternative to subclassing for extending functionality."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(r.p,{children:"Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality."}),"\n",(0,o.jsx)(r.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(r.p,{children:"You want to add new functionality to objects without modifying their original class or creating numerous subclasses. For example, adding different features to a text editor (bold, italic, underline) or adding toppings to a pizza."}),"\n",(0,o.jsx)(r.p,{children:"Creating subclasses for every combination would lead to class explosion:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"BoldText"}),", ",(0,o.jsx)(r.code,{children:"ItalicText"}),", ",(0,o.jsx)(r.code,{children:"BoldItalicText"}),", ",(0,o.jsx)(r.code,{children:"UnderlineBoldItalicText"}),", etc."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(r.p,{children:"The Decorator pattern suggests wrapping objects in decorator objects that contain additional behavior. Decorators implement the same interface as the wrapped object, so they can be stacked on top of each other."}),"\n",(0,o.jsx)(r.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Component (interface)\r\n\u2514\u2500\u2500 operation()\r\n\r\nConcreteComponent implements Component\r\n\u2514\u2500\u2500 operation()\r\n\r\nDecorator implements Component\r\n\u251c\u2500\u2500 component: Component\r\n\u2514\u2500\u2500 operation() \u2192 component.operation()\r\n\r\nConcreteDecoratorA extends Decorator\r\n\u2514\u2500\u2500 operation() \u2192 super.operation() + addedBehavior()\r\n\r\nConcreteDecoratorB extends Decorator\r\n\u2514\u2500\u2500 operation() \u2192 super.operation() + addedBehavior()\n"})}),"\n",(0,o.jsx)(r.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,o.jsx)(r.h3,{id:"coffee-shop",children:"Coffee Shop"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Component interface\r\nclass Coffee {\r\n  getDescription() {\r\n    throw new Error("getDescription() method must be implemented");\r\n  }\r\n  \r\n  getCost() {\r\n    throw new Error("getCost() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Component - Basic coffee\r\nclass SimpleCoffee extends Coffee {\r\n  getDescription() {\r\n    return "Simple Coffee";\r\n  }\r\n  \r\n  getCost() {\r\n    return 2.00;\r\n  }\r\n}\r\n\r\n// Base Decorator\r\nclass CoffeeDecorator extends Coffee {\r\n  constructor(coffee) {\r\n    super();\r\n    this.coffee = coffee;\r\n  }\r\n  \r\n  getDescription() {\r\n    return this.coffee.getDescription();\r\n  }\r\n  \r\n  getCost() {\r\n    return this.coffee.getCost();\r\n  }\r\n}\r\n\r\n// Concrete Decorators\r\nclass MilkDecorator extends CoffeeDecorator {\r\n  constructor(coffee) {\r\n    super(coffee);\r\n  }\r\n  \r\n  getDescription() {\r\n    return this.coffee.getDescription() + ", Milk";\r\n  }\r\n  \r\n  getCost() {\r\n    return this.coffee.getCost() + 0.50;\r\n  }\r\n}\r\n\r\nclass SugarDecorator extends CoffeeDecorator {\r\n  constructor(coffee) {\r\n    super(coffee);\r\n  }\r\n  \r\n  getDescription() {\r\n    return this.coffee.getDescription() + ", Sugar";\r\n  }\r\n  \r\n  getCost() {\r\n    return this.coffee.getCost() + 0.25;\r\n  }\r\n}\r\n\r\nclass ChocolateDecorator extends CoffeeDecorator {\r\n  constructor(coffee) {\r\n    super(coffee);\r\n  }\r\n  \r\n  getDescription() {\r\n    return this.coffee.getDescription() + ", Chocolate";\r\n  }\r\n  \r\n  getCost() {\r\n    return this.coffee.getCost() + 0.75;\r\n  }\r\n}\r\n\r\nclass WhipCreamDecorator extends CoffeeDecorator {\r\n  constructor(coffee) {\r\n    super(coffee);\r\n  }\r\n  \r\n  getDescription() {\r\n    return this.coffee.getDescription() + ", Whip Cream";\r\n  }\r\n  \r\n  getCost() {\r\n    return this.coffee.getCost() + 0.60;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Coffee Shop Decorator Demo ===\\n");\r\n\r\n// Start with simple coffee\r\nlet coffee = new SimpleCoffee();\r\nconsole.log(`\u2615 ${coffee.getDescription()} - $${coffee.getCost().toFixed(2)}`);\r\n\r\n// Add milk\r\ncoffee = new MilkDecorator(coffee);\r\nconsole.log(`\u2615 ${coffee.getDescription()} - $${coffee.getCost().toFixed(2)}`);\r\n\r\n// Add sugar\r\ncoffee = new SugarDecorator(coffee);\r\nconsole.log(`\u2615 ${coffee.getDescription()} - $${coffee.getCost().toFixed(2)}`);\r\n\r\n// Add chocolate\r\ncoffee = new ChocolateDecorator(coffee);\r\nconsole.log(`\u2615 ${coffee.getDescription()} - $${coffee.getCost().toFixed(2)}`);\r\n\r\n// Add whip cream\r\ncoffee = new WhipCreamDecorator(coffee);\r\nconsole.log(`\u2615 ${coffee.getDescription()} - $${coffee.getCost().toFixed(2)}`);\r\n\r\nconsole.log("\\n" + "=".repeat(40) + "\\n");\r\n\r\n// Create different coffee combination\r\nconsole.log("Creating another coffee:");\r\nconsole.log("-".repeat(22));\r\n\r\nlet mocha = new SimpleCoffee();\r\nmocha = new ChocolateDecorator(mocha);\r\nmocha = new MilkDecorator(mocha);\r\nmocha = new WhipCreamDecorator(mocha);\r\n\r\nconsole.log(`\u2615 ${mocha.getDescription()} - $${mocha.getCost().toFixed(2)}`);\n'})}),"\n",(0,o.jsx)(r.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,o.jsx)(r.h3,{id:"text-formatter",children:"Text Formatter"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Component interface\r\nclass Text {\r\n  constructor(content) {\r\n    this.content = content;\r\n  }\r\n  \r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Component - Plain text\r\nclass PlainText extends Text {\r\n  render() {\r\n    return this.content;\r\n  }\r\n}\r\n\r\n// Base Decorator\r\nclass TextDecorator extends Text {\r\n  constructor(text) {\r\n    super(text.content);\r\n    this.text = text;\r\n  }\r\n  \r\n  render() {\r\n    return this.text.render();\r\n  }\r\n}\r\n\r\n// Concrete Decorators\r\nclass BoldDecorator extends TextDecorator {\r\n  render() {\r\n    return `<b>${this.text.render()}</b>`;\r\n  }\r\n}\r\n\r\nclass ItalicDecorator extends TextDecorator {\r\n  render() {\r\n    return `<i>${this.text.render()}</i>`;\r\n  }\r\n}\r\n\r\nclass UnderlineDecorator extends TextDecorator {\r\n  render() {\r\n    return `<u>${this.text.render()}</u>`;\r\n  }\r\n}\r\n\r\nclass ColorDecorator extends TextDecorator {\r\n  constructor(text, color) {\r\n    super(text);\r\n    this.color = color;\r\n  }\r\n  \r\n  render() {\r\n    return `<span style="color:${this.color}">${this.text.render()}</span>`;\r\n  }\r\n}\r\n\r\nclass SizeDecorator extends TextDecorator {\r\n  constructor(text, size) {\r\n    super(text);\r\n    this.size = size;\r\n  }\r\n  \r\n  render() {\r\n    return `<span style="font-size:${this.size}px">${this.text.render()}</span>`;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Text Formatter Demo ===\\n");\r\n\r\n// Start with plain text\r\nlet text = new PlainText("Hello World!");\r\nconsole.log("Plain text:", text.render());\r\n\r\n// Make it bold\r\ntext = new BoldDecorator(text);\r\nconsole.log("Bold text:", text.render());\r\n\r\n// Add italic\r\ntext = new ItalicDecorator(text);\r\nconsole.log("Bold + Italic:", text.render());\r\n\r\n// Add underline\r\ntext = new UnderlineDecorator(text);\r\nconsole.log("Bold + Italic + Underline:", text.render());\r\n\r\n// Add color\r\ntext = new ColorDecorator(text, "red");\r\nconsole.log("With red color:", text.render());\r\n\r\n// Add size\r\ntext = new SizeDecorator(text, 20);\r\nconsole.log("Final formatted text:", text.render());\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\n// Create different formatting\r\nconsole.log("Different formatting examples:");\r\nconsole.log("-".repeat(30));\r\n\r\nlet title = new PlainText("Welcome to Our Website");\r\ntitle = new BoldDecorator(title);\r\ntitle = new SizeDecorator(title, 24);\r\ntitle = new ColorDecorator(title, "blue");\r\nconsole.log("Title:", title.render());\r\n\r\nlet emphasis = new PlainText("Important Note");\r\nemphasis = new ItalicDecorator(emphasis);\r\nemphasis = new ColorDecorator(emphasis, "orange");\r\nconsole.log("Emphasis:", emphasis.render());\n'})}),"\n",(0,o.jsx)(r.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,o.jsx)(r.h3,{id:"data-source-with-encryption-and-compression",children:"Data Source with Encryption and Compression"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Component interface\r\nclass DataSource {\r\n  writeData(data) {\r\n    throw new Error("writeData() method must be implemented");\r\n  }\r\n  \r\n  readData() {\r\n    throw new Error("readData() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Component - File data source\r\nclass FileDataSource extends DataSource {\r\n  constructor(filename) {\r\n    super();\r\n    this.filename = filename;\r\n    this.data = null;\r\n  }\r\n  \r\n  writeData(data) {\r\n    console.log(`\ud83d\udcbe Writing data to file: ${this.filename}`);\r\n    this.data = data;\r\n    console.log(`\ud83d\udcdd File content: "${data}"`);\r\n  }\r\n  \r\n  readData() {\r\n    console.log(`\ud83d\udcd6 Reading data from file: ${this.filename}`);\r\n    return this.data || "No data found";\r\n  }\r\n}\r\n\r\n// Base Decorator\r\nclass DataSourceDecorator extends DataSource {\r\n  constructor(dataSource) {\r\n    super();\r\n    this.dataSource = dataSource;\r\n  }\r\n  \r\n  writeData(data) {\r\n    this.dataSource.writeData(data);\r\n  }\r\n  \r\n  readData() {\r\n    return this.dataSource.readData();\r\n  }\r\n}\r\n\r\n// Concrete Decorators\r\nclass EncryptionDecorator extends DataSourceDecorator {\r\n  writeData(data) {\r\n    console.log("\ud83d\udd12 Encrypting data...");\r\n    const encryptedData = this.encrypt(data);\r\n    console.log(`\ud83d\udd10 Encrypted: "${encryptedData}"`);\r\n    super.writeData(encryptedData);\r\n  }\r\n  \r\n  readData() {\r\n    const encryptedData = super.readData();\r\n    console.log("\ud83d\udd13 Decrypting data...");\r\n    const decryptedData = this.decrypt(encryptedData);\r\n    console.log(`\ud83d\udd13 Decrypted: "${decryptedData}"`);\r\n    return decryptedData;\r\n  }\r\n  \r\n  encrypt(data) {\r\n    // Simple encryption simulation\r\n    return btoa(data); // Base64 encoding\r\n  }\r\n  \r\n  decrypt(data) {\r\n    // Simple decryption simulation\r\n    try {\r\n      return atob(data); // Base64 decoding\r\n    } catch (e) {\r\n      return data; // Return as-is if not encrypted\r\n    }\r\n  }\r\n}\r\n\r\nclass CompressionDecorator extends DataSourceDecorator {\r\n  writeData(data) {\r\n    console.log("\ud83d\udddc\ufe0f Compressing data...");\r\n    const compressedData = this.compress(data);\r\n    console.log(`\ud83d\udce6 Compressed: "${compressedData}"`);\r\n    super.writeData(compressedData);\r\n  }\r\n  \r\n  readData() {\r\n    const compressedData = super.readData();\r\n    console.log("\ud83d\udce4 Decompressing data...");\r\n    const decompressedData = this.decompress(compressedData);\r\n    console.log(`\ud83d\udcc2 Decompressed: "${decompressedData}"`);\r\n    return decompressedData;\r\n  }\r\n  \r\n  compress(data) {\r\n    // Simple compression simulation\r\n    return `COMPRESSED[${data}]`;\r\n  }\r\n  \r\n  decompress(data) {\r\n    // Simple decompression simulation\r\n    if (data.startsWith("COMPRESSED[") && data.endsWith("]")) {\r\n      return data.slice(11, -1);\r\n    }\r\n    return data;\r\n  }\r\n}\r\n\r\nclass LoggingDecorator extends DataSourceDecorator {\r\n  writeData(data) {\r\n    console.log(`\ud83d\udcca LOG: Writing data (${data.length} characters)`);\r\n    console.log(`\ud83d\udcca LOG: Timestamp: ${new Date().toISOString()}`);\r\n    super.writeData(data);\r\n    console.log(`\ud83d\udcca LOG: Write operation completed`);\r\n  }\r\n  \r\n  readData() {\r\n    console.log(`\ud83d\udcca LOG: Reading data at ${new Date().toISOString()}`);\r\n    const result = super.readData();\r\n    console.log(`\ud83d\udcca LOG: Read ${result.length} characters`);\r\n    return result;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Data Source Decorator Demo ===\\n");\r\n\r\nconst originalData = "This is sensitive information that needs to be stored securely.";\r\n\r\nconsole.log("1. Basic file operations:");\r\nconsole.log("-".repeat(25));\r\n\r\n// Basic file data source\r\nlet dataSource = new FileDataSource("document.txt");\r\ndataSource.writeData(originalData);\r\nconsole.log(`Read result: "${dataSource.readData()}"`);\r\n\r\nconsole.log("\\n2. With encryption:");\r\nconsole.log("-".repeat(18));\r\n\r\n// Add encryption\r\ndataSource = new FileDataSource("encrypted.txt");\r\ndataSource = new EncryptionDecorator(dataSource);\r\ndataSource.writeData(originalData);\r\nconsole.log(`Read result: "${dataSource.readData()}"`);\r\n\r\nconsole.log("\\n3. With compression and encryption:");\r\nconsole.log("-".repeat(33));\r\n\r\n// Add both compression and encryption\r\ndataSource = new FileDataSource("compressed_encrypted.txt");\r\ndataSource = new CompressionDecorator(dataSource);\r\ndataSource = new EncryptionDecorator(dataSource);\r\ndataSource.writeData(originalData);\r\nconsole.log(`Read result: "${dataSource.readData()}"`);\r\n\r\nconsole.log("\\n4. With all decorators:");\r\nconsole.log("-".repeat(22));\r\n\r\n// Add all decorators\r\ndataSource = new FileDataSource("full_featured.txt");\r\ndataSource = new CompressionDecorator(dataSource);\r\ndataSource = new EncryptionDecorator(dataSource);\r\ndataSource = new LoggingDecorator(dataSource);\r\ndataSource.writeData(originalData);\r\nconsole.log(`Read result: "${dataSource.readData()}"`);\n'})}),"\n",(0,o.jsx)(r.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Flexible Extension"}),": Add behavior at runtime without modifying existing code"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Single Responsibility"}),": Each decorator has a single purpose"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Composition over Inheritance"}),": More flexible than creating subclasses"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Open/Closed Principle"}),": Open for extension, closed for modification"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Mix and Match"}),": Can combine decorators in different ways"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Complexity"}),": Can create many small objects and complex object hierarchies"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Identity Issues"}),": Decorated objects are different from original objects"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Configuration Complexity"}),": Many decorators can make configuration complex"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Debugging"}),": Stack of decorators can be hard to debug"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Runtime Extension"}),": When you want to add behavior to objects at runtime"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Multiple Combinations"}),": When you have many optional features that can be combined"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Avoiding Class Explosion"}),": When subclassing would create too many classes"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Legacy Code"}),": When you can't modify existing classes but need to extend them"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-implementation-variants",children:"\ud83d\udd04 Implementation Variants"}),"\n",(0,o.jsxs)(r.h3,{id:"1-function-based-decorators-javascript-specific",children:["1. ",(0,o.jsx)(r.strong,{children:"Function-based Decorators (JavaScript specific)"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"function withLogging(fn) {\r\n  return function(...args) {\r\n    console.log(`Calling ${fn.name} with:`, args);\r\n    return fn.apply(this, args);\r\n  };\r\n}\r\n\r\n// Usage\r\nconst loggedFunction = withLogging(originalFunction);\n"})}),"\n",(0,o.jsxs)(r.h3,{id:"2-mixin-based-decorators",children:["2. ",(0,o.jsx)(r.strong,{children:"Mixin-based Decorators"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"const Loggable = {\r\n  log(message) {\r\n    console.log(`[${this.constructor.name}] ${message}`);\r\n  }\r\n};\r\n\r\nObject.assign(MyClass.prototype, Loggable);\n"})}),"\n",(0,o.jsx)(r.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Adapter"}),": Both wrap objects, but Adapter changes interface while Decorator adds behavior"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Composite"}),": Both create tree structures, but Composite represents hierarchies while Decorator adds layers"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Strategy"}),": Both provide alternatives, but Strategy changes algorithms while Decorator adds features"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Proxy"}),": Both provide surrogate objects, but Proxy controls access while Decorator adds behavior"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://refactoring.guru/design-patterns/decorator",children:"Decorator Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://www.dofactory.com/javascript/design-patterns/decorator",children:"JavaScript Decorator Pattern Examples"})}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(6540);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);