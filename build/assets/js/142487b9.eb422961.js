"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[9742],{3342:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/structural/adapter","title":"Adapter Pattern \ud83d\udd0c","description":"Definition: The Adapter pattern allows incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces by wrapping an existing class with a new interface.","source":"@site/docs/design-pattern/structural/adapter.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/adapter","permalink":"/docs/design-pattern/structural/adapter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Singleton Pattern \ud83c\udfef","permalink":"/docs/design-pattern/creational/singleton"},"next":{"title":"Bridge Pattern \ud83c\udf09","permalink":"/docs/design-pattern/structural/bridge"}}');var a=r(4848),s=r(8453);const i={},o="Adapter Pattern \ud83d\udd0c",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Basic Media Player Adapter",id:"basic-media-player-adapter",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Database Adapter",id:"database-adapter",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Payment Gateway Adapter",id:"payment-gateway-adapter",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Types of Adapters",id:"-types-of-adapters",level:2},{value:"1. <strong>Object Adapter</strong> (shown in examples above)",id:"1-object-adapter-shown-in-examples-above",level:3},{value:"2. <strong>Class Adapter</strong> (using mixins in JavaScript)",id:"2-class-adapter-using-mixins-in-javascript",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"adapter-pattern-",children:"Adapter Pattern \ud83d\udd0c"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Definition"}),": The Adapter pattern allows incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces by wrapping an existing class with a new interface."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,a.jsx)(n.p,{children:"Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces."}),"\n",(0,a.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,a.jsx)(n.p,{children:"You have an existing class with a useful method, but its interface doesn't match what your new code expects. You can't modify the existing class, and you don't want to change your new code to accommodate the old interface."}),"\n",(0,a.jsxs)(n.p,{children:["For example, you have a ",(0,a.jsx)(n.code,{children:"Rectangle"})," class with ",(0,a.jsx)(n.code,{children:"getWidth()"})," and ",(0,a.jsx)(n.code,{children:"getHeight()"})," methods, but your new code expects an interface with ",(0,a.jsx)(n.code,{children:"width()"})," and ",(0,a.jsx)(n.code,{children:"height()"})," methods."]}),"\n",(0,a.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,a.jsx)(n.p,{children:"Create an adapter class that wraps the existing class and provides the interface your code expects. The adapter translates calls from the new interface to the old interface."}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Client\r\n\u2514\u2500\u2500 uses \u2192 Target (interface)\r\n              \u2514\u2500\u2500 request()\r\n\r\nTarget \u2190 implements \u2190 Adapter\r\n                    \u251c\u2500\u2500 adaptee: Adaptee\r\n                    \u2514\u2500\u2500 request() \u2192 adaptee.specificRequest()\r\n\r\nAdaptee\r\n\u2514\u2500\u2500 specificRequest()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,a.jsx)(n.h3,{id:"basic-media-player-adapter",children:"Basic Media Player Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Old audio player (Adaptee)\r\nclass OldAudioPlayer {\r\n  playMp3(filename) {\r\n    console.log(`\ud83c\udfb5 Playing MP3 file: ${filename}`);\r\n  }\r\n}\r\n\r\n// New media formats that we want to support\r\nclass Mp4Player {\r\n  playMp4(filename) {\r\n    console.log(`\ud83c\udfac Playing MP4 file: ${filename}`);\r\n  }\r\n}\r\n\r\nclass FlacPlayer {\r\n  playFlac(filename) {\r\n    console.log(`\ud83c\udfbc Playing FLAC file: ${filename}`);\r\n  }\r\n}\r\n\r\n// Target interface that client expects\r\nclass MediaPlayer {\r\n  play(audioType, filename) {\r\n    throw new Error(\"play() method must be implemented\");\r\n  }\r\n}\r\n\r\n// Adapter that makes old and new players work together\r\nclass MediaAdapter extends MediaPlayer {\r\n  constructor(audioType) {\r\n    super();\r\n    if (audioType === 'mp4') {\r\n      this.player = new Mp4Player();\r\n    } else if (audioType === 'flac') {\r\n      this.player = new FlacPlayer();\r\n    }\r\n  }\r\n  \r\n  play(audioType, filename) {\r\n    if (audioType === 'mp4') {\r\n      this.player.playMp4(filename);\r\n    } else if (audioType === 'flac') {\r\n      this.player.playFlac(filename);\r\n    }\r\n  }\r\n}\r\n\r\n// Client code - Audio player that supports multiple formats\r\nclass AudioPlayer extends MediaPlayer {\r\n  constructor() {\r\n    super();\r\n    this.oldPlayer = new OldAudioPlayer();\r\n  }\r\n  \r\n  play(audioType, filename) {\r\n    if (audioType === 'mp3') {\r\n      // Use the old player directly for MP3\r\n      this.oldPlayer.playMp3(filename);\r\n    } else if (audioType === 'mp4' || audioType === 'flac') {\r\n      // Use adapter for new formats\r\n      const adapter = new MediaAdapter(audioType);\r\n      adapter.play(audioType, filename);\r\n    } else {\r\n      console.log(`\u274c ${audioType} format not supported`);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"=== Media Player Adapter Demo ===\\n\");\r\n\r\nconst player = new AudioPlayer();\r\n\r\nplayer.play('mp3', 'song1.mp3');\r\nplayer.play('mp4', 'video1.mp4');\r\nplayer.play('flac', 'music.flac');\r\nplayer.play('avi', 'movie.avi'); // Unsupported format\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,a.jsx)(n.h3,{id:"database-adapter",children:"Database Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Different database systems with incompatible interfaces\r\n\r\n// MySQL Database (Adaptee 1)\r\nclass MySQLDatabase {\r\n  mysqlConnect(host, username, password) {\r\n    console.log(`\ud83d\udc2c Connecting to MySQL at ${host}`);\r\n    return { connected: true, type: \'mysql\' };\r\n  }\r\n  \r\n  mysqlQuery(sql) {\r\n    console.log(`\ud83d\udc2c MySQL Query: ${sql}`);\r\n    return { rows: [{ id: 1, name: \'John\' }] };\r\n  }\r\n  \r\n  mysqlClose() {\r\n    console.log("\ud83d\udc2c MySQL connection closed");\r\n  }\r\n}\r\n\r\n// PostgreSQL Database (Adaptee 2)\r\nclass PostgreSQLDatabase {\r\n  pgConnect(connectionString) {\r\n    console.log(`\ud83d\udc18 Connecting to PostgreSQL: ${connectionString}`);\r\n    return { status: \'connected\', db: \'postgresql\' };\r\n  }\r\n  \r\n  pgExecute(query) {\r\n    console.log(`\ud83d\udc18 PostgreSQL Execute: ${query}`);\r\n    return { data: [{ id: 1, name: \'Jane\' }] };\r\n  }\r\n  \r\n  pgDisconnect() {\r\n    console.log("\ud83d\udc18 PostgreSQL disconnected");\r\n  }\r\n}\r\n\r\n// Target interface that client expects\r\nclass DatabaseInterface {\r\n  connect(config) {\r\n    throw new Error("connect() method must be implemented");\r\n  }\r\n  \r\n  query(sql) {\r\n    throw new Error("query() method must be implemented");\r\n  }\r\n  \r\n  close() {\r\n    throw new Error("close() method must be implemented");\r\n  }\r\n}\r\n\r\n// MySQL Adapter\r\nclass MySQLAdapter extends DatabaseInterface {\r\n  constructor() {\r\n    super();\r\n    this.database = new MySQLDatabase();\r\n    this.connection = null;\r\n  }\r\n  \r\n  connect(config) {\r\n    this.connection = this.database.mysqlConnect(\r\n      config.host, \r\n      config.username, \r\n      config.password\r\n    );\r\n    return this.connection;\r\n  }\r\n  \r\n  query(sql) {\r\n    if (!this.connection) {\r\n      throw new Error("Not connected to MySQL");\r\n    }\r\n    return this.database.mysqlQuery(sql);\r\n  }\r\n  \r\n  close() {\r\n    if (this.connection) {\r\n      this.database.mysqlClose();\r\n      this.connection = null;\r\n    }\r\n  }\r\n}\r\n\r\n// PostgreSQL Adapter\r\nclass PostgreSQLAdapter extends DatabaseInterface {\r\n  constructor() {\r\n    super();\r\n    this.database = new PostgreSQLDatabase();\r\n    this.connection = null;\r\n  }\r\n  \r\n  connect(config) {\r\n    const connectionString = `postgresql://${config.username}:${config.password}@${config.host}/${config.database}`;\r\n    this.connection = this.database.pgConnect(connectionString);\r\n    return this.connection;\r\n  }\r\n  \r\n  query(sql) {\r\n    if (!this.connection) {\r\n      throw new Error("Not connected to PostgreSQL");\r\n    }\r\n    return this.database.pgExecute(sql);\r\n  }\r\n  \r\n  close() {\r\n    if (this.connection) {\r\n      this.database.pgDisconnect();\r\n      this.connection = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Client code - Application that works with any database\r\nclass Application {\r\n  constructor(databaseAdapter) {\r\n    this.db = databaseAdapter;\r\n  }\r\n  \r\n  run() {\r\n    // Same interface for all database types\r\n    const config = {\r\n      host: \'localhost\',\r\n      username: \'admin\',\r\n      password: \'password\',\r\n      database: \'myapp\'\r\n    };\r\n    \r\n    console.log("\ud83d\ude80 Starting application...");\r\n    this.db.connect(config);\r\n    \r\n    const results = this.db.query("SELECT * FROM users");\r\n    console.log("\ud83d\udcca Query results:", results);\r\n    \r\n    this.db.close();\r\n    console.log("\ud83c\udfc1 Application finished\\n");\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Database Adapter Demo ===\\n");\r\n\r\n// Use MySQL\r\nconsole.log("Using MySQL Database:");\r\nconsole.log("-".repeat(20));\r\nconst mysqlApp = new Application(new MySQLAdapter());\r\nmysqlApp.run();\r\n\r\n// Use PostgreSQL  \r\nconsole.log("Using PostgreSQL Database:");\r\nconsole.log("-".repeat(25));\r\nconst pgApp = new Application(new PostgreSQLAdapter());\r\npgApp.run();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,a.jsx)(n.h3,{id:"payment-gateway-adapter",children:"Payment Gateway Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Old payment system (Adaptee)\r\nclass OldPaymentGateway {\r\n  makePayment(amount) {\r\n    console.log(`\ud83d\udcb0 Processing $${amount} through old gateway`);\r\n    return { status: \'success\', reference: `OLD_${Date.now()}` };\r\n  }\r\n}\r\n\r\n// New payment interface that client expects\r\nclass PaymentInterface {\r\n  processPayment(amount, currency) {\r\n    throw new Error("processPayment() method must be implemented");\r\n  }\r\n}\r\n\r\n// Adapter to make old gateway work with new interface\r\nclass PaymentAdapter extends PaymentInterface {\r\n  constructor() {\r\n    super();\r\n    this.oldGateway = new OldPaymentGateway();\r\n  }\r\n  \r\n  processPayment(amount, currency = \'USD\') {\r\n    console.log(`\ud83d\udd04 Adapting payment: ${amount} ${currency}`);\r\n    \r\n    // Convert to format expected by old gateway\r\n    const dollarAmount = currency === \'USD\' ? amount : amount * 1.1; // Simple conversion\r\n    \r\n    // Use the old gateway\r\n    const result = this.oldGateway.makePayment(dollarAmount);\r\n    \r\n    // Convert response to new format\r\n    return {\r\n      success: result.status === \'success\',\r\n      transactionId: result.reference,\r\n      amount: amount,\r\n      currency: currency\r\n    };\r\n  }\r\n}\r\n\r\n// Client code\r\nclass ShoppingCart {\r\n  constructor(paymentProcessor) {\r\n    this.paymentProcessor = paymentProcessor;\r\n    this.items = [];\r\n  }\r\n  \r\n  addItem(item, price) {\r\n    this.items.push({ item, price });\r\n  }\r\n  \r\n  checkout() {\r\n    const total = this.items.reduce((sum, item) => sum + item.price, 0);\r\n    \r\n    console.log("\ud83d\uded2 Checkout Summary:");\r\n    this.items.forEach(item => console.log(`   ${item.item}: $${item.price}`));\r\n    console.log(`   Total: $${total}`);\r\n    \r\n    const result = this.paymentProcessor.processPayment(total, \'USD\');\r\n    \r\n    if (result.success) {\r\n      console.log(`\u2705 Payment successful! Transaction ID: ${result.transactionId}`);\r\n    } else {\r\n      console.log("\u274c Payment failed!");\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Payment Gateway Adapter Demo ===\\n");\r\n\r\nconst cart = new ShoppingCart(new PaymentAdapter());\r\ncart.addItem("Laptop", 999.99);\r\ncart.addItem("Mouse", 29.99);\r\ncart.checkout();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Reusability"}),": Allows you to reuse existing classes with incompatible interfaces"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Separation of Concerns"}),": Separates interface conversion from business logic"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Open/Closed Principle"}),": You can add new adapters without changing existing code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Single Responsibility"}),": Each adapter handles one specific interface conversion"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Code Complexity"}),": Increases the overall complexity of the code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Adds a layer of indirection which may impact performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maintenance"}),": More classes to maintain"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Legacy Integration"}),": When you need to integrate with legacy systems"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Third-party Libraries"}),": When working with third-party libraries with different interfaces"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interface Mismatch"}),": When you can't modify existing classes but need different interfaces"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Gradual Migration"}),": When migrating from old systems to new ones"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-types-of-adapters",children:"\ud83d\udd04 Types of Adapters"}),"\n",(0,a.jsxs)(n.h3,{id:"1-object-adapter-shown-in-examples-above",children:["1. ",(0,a.jsx)(n.strong,{children:"Object Adapter"})," (shown in examples above)"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Uses composition"}),"\n",(0,a.jsx)(n.li,{children:"More flexible"}),"\n",(0,a.jsx)(n.li,{children:"Can adapt multiple related classes"}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"2-class-adapter-using-mixins-in-javascript",children:["2. ",(0,a.jsx)(n.strong,{children:"Class Adapter"})," (using mixins in JavaScript)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class ClassAdapter extends OldClass {\r\n  newMethod() {\r\n    return this.oldMethod();\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Bridge"}),": Both provide abstraction, but Bridge is designed upfront while Adapter is added later"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decorator"}),": Both wrap objects, but Decorator adds behavior while Adapter changes interface"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Facade"}),": Both provide simplified interfaces, but Facade simplifies while Adapter converts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Proxy"}),": Both provide surrogate objects, but Proxy controls access while Adapter converts interface"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/adapter",children:"Adapter Pattern - Refactoring.Guru"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/adapter",children:"JavaScript Adapter Pattern Examples"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);