"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4939],{7981:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/structural/bridge","title":"Bridge Pattern \ud83c\udf09","description":"Definition: The Bridge pattern separates an abstraction from its implementation, allowing both to vary independently. It uses composition instead of inheritance to connect different hierarchies.","source":"@site/docs/design-pattern/structural/bridge.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/bridge","permalink":"/docs/design-pattern/structural/bridge","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Adapter Pattern \ud83d\udd0c","permalink":"/docs/design-pattern/structural/adapter"},"next":{"title":"Composite Pattern \ud83c\udf33","permalink":"/docs/design-pattern/structural/composite"}}');var i=r(4848),s=r(8453);const o={},a="Bridge Pattern \ud83c\udf09",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Shape Drawing with Different Renderers",id:"shape-drawing-with-different-renderers",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Notification System",id:"notification-system",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Remote Control System",id:"remote-control-system",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Bridge vs Similar Patterns",id:"-bridge-vs-similar-patterns",level:2},{value:"Bridge vs Adapter",id:"bridge-vs-adapter",level:3},{value:"Bridge vs Strategy",id:"bridge-vs-strategy",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"bridge-pattern-",children:"Bridge Pattern \ud83c\udf09"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition"}),": The Bridge pattern separates an abstraction from its implementation, allowing both to vary independently. It uses composition instead of inheritance to connect different hierarchies."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,i.jsx)(n.p,{children:"Decouple an abstraction from its implementation so that both can vary independently. This is useful when you want to avoid permanent binding between an abstraction and its implementation."}),"\n",(0,i.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,i.jsx)(n.p,{children:"You have a class hierarchy that needs to work with multiple implementations. For example, shapes that can be drawn using different graphics APIs, or notifications that can be sent through different channels."}),"\n",(0,i.jsx)(n.p,{children:"Without Bridge, you might end up with an explosion of classes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WindowsCircle"}),", ",(0,i.jsx)(n.code,{children:"LinuxCircle"}),", ",(0,i.jsx)(n.code,{children:"MacCircle"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WindowsSquare"}),", ",(0,i.jsx)(n.code,{children:"LinuxSquare"}),", ",(0,i.jsx)(n.code,{children:"MacSquare"})]}),"\n",(0,i.jsx)(n.li,{children:"And so on..."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,i.jsx)(n.p,{children:"The Bridge pattern suggests dividing the classes into two hierarchies:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstraction"}),": The high-level logic (shapes, notifications)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implementation"}),": The platform-specific code (graphics APIs, communication channels)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Abstraction\r\n\u251c\u2500\u2500 implementation: Implementation\r\n\u2514\u2500\u2500 operation() \u2192 implementation.operationImpl()\r\n\r\nRefinedAbstraction extends Abstraction\r\n\u2514\u2500\u2500 refinedOperation()\r\n\r\nImplementation (interface)\r\n\u2514\u2500\u2500 operationImpl()\r\n\r\nConcreteImplementationA implements Implementation\r\n\u2514\u2500\u2500 operationImpl()\r\n\r\nConcreteImplementationB implements Implementation\r\n\u2514\u2500\u2500 operationImpl()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,i.jsx)(n.h3,{id:"shape-drawing-with-different-renderers",children:"Shape Drawing with Different Renderers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Implementation side - Drawing APIs\r\nclass DrawingAPI {\r\n  drawCircle(x, y, radius) {\r\n    throw new Error("drawCircle() method must be implemented");\r\n  }\r\n  \r\n  drawRectangle(x, y, width, height) {\r\n    throw new Error("drawRectangle() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Implementations\r\nclass CanvasAPI extends DrawingAPI {\r\n  drawCircle(x, y, radius) {\r\n    console.log(`\ud83c\udfa8 Canvas: Drawing circle at (${x}, ${y}) with radius ${radius}`);\r\n  }\r\n  \r\n  drawRectangle(x, y, width, height) {\r\n    console.log(`\ud83c\udfa8 Canvas: Drawing rectangle at (${x}, ${y}) with size ${width}x${height}`);\r\n  }\r\n}\r\n\r\nclass SVGGraphics extends DrawingAPI {\r\n  drawCircle(x, y, radius) {\r\n    console.log(`\ud83d\udcd0 SVG: <circle cx="${x}" cy="${y}" r="${radius}"/>`);\r\n  }\r\n  \r\n  drawRectangle(x, y, width, height) {\r\n    console.log(`\ud83d\udcd0 SVG: <rect x="${x}" y="${y}" width="${width}" height="${height}"/>`);\r\n  }\r\n}\r\n\r\n// Abstraction side - Shapes\r\nclass Shape {\r\n  constructor(drawingAPI) {\r\n    this.drawingAPI = drawingAPI;\r\n  }\r\n  \r\n  draw() {\r\n    throw new Error("draw() method must be implemented");\r\n  }\r\n}\r\n\r\n// Refined Abstractions\r\nclass Circle extends Shape {\r\n  constructor(x, y, radius, drawingAPI) {\r\n    super(drawingAPI);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n  }\r\n  \r\n  draw() {\r\n    this.drawingAPI.drawCircle(this.x, this.y, this.radius);\r\n  }\r\n  \r\n  resize(factor) {\r\n    this.radius *= factor;\r\n    console.log(`\ud83d\udd04 Circle resized to radius ${this.radius}`);\r\n  }\r\n}\r\n\r\nclass Rectangle extends Shape {\r\n  constructor(x, y, width, height, drawingAPI) {\r\n    super(drawingAPI);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n  \r\n  draw() {\r\n    this.drawingAPI.drawRectangle(this.x, this.y, this.width, this.height);\r\n  }\r\n  \r\n  resize(factor) {\r\n    this.width *= factor;\r\n    this.height *= factor;\r\n    console.log(`\ud83d\udd04 Rectangle resized to ${this.width}x${this.height}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Bridge Pattern Demo ===\\n");\r\n\r\n// Create different drawing APIs\r\nconst canvasAPI = new CanvasAPI();\r\nconst svgAPI = new SVGGraphics();\r\n\r\nconsole.log("Drawing with Canvas API:");\r\nconsole.log("-".repeat(25));\r\n\r\nconst canvasCircle = new Circle(10, 20, 5, canvasAPI);\r\nconst canvasRect = new Rectangle(0, 0, 100, 50, canvasAPI);\r\n\r\ncanvasCircle.draw();\r\ncanvasRect.draw();\r\n\r\nconsole.log("\\nDrawing with SVG API:");\r\nconsole.log("-".repeat(20));\r\n\r\nconst svgCircle = new Circle(15, 25, 8, svgAPI);\r\nconst svgRect = new Rectangle(10, 10, 80, 40, svgAPI);\r\n\r\nsvgCircle.draw();\r\nsvgRect.draw();\r\n\r\nconsole.log("\\nResizing shapes:");\r\nconsole.log("-".repeat(15));\r\n\r\ncanvasCircle.resize(2);\r\ncanvasCircle.draw();\r\n\r\nsvgRect.resize(1.5);\r\nsvgRect.draw();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,i.jsx)(n.h3,{id:"notification-system",children:"Notification System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Implementation side - Communication channels\r\nclass NotificationSender {\r\n  send(message, recipient) {\r\n    throw new Error("send() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Implementations\r\nclass EmailSender extends NotificationSender {\r\n  constructor(smtpServer) {\r\n    super();\r\n    this.smtpServer = smtpServer;\r\n  }\r\n  \r\n  send(message, recipient) {\r\n    console.log(`\ud83d\udce7 Email sent to ${recipient}`);\r\n    console.log(`   Server: ${this.smtpServer}`);\r\n    console.log(`   Message: ${message}`);\r\n  }\r\n}\r\n\r\nclass SMSSender extends NotificationSender {\r\n  constructor(apiKey) {\r\n    super();\r\n    this.apiKey = apiKey;\r\n  }\r\n  \r\n  send(message, recipient) {\r\n    console.log(`\ud83d\udcf1 SMS sent to ${recipient}`);\r\n    console.log(`   API: ${this.apiKey}`);\r\n    console.log(`   Message: ${message}`);\r\n  }\r\n}\r\n\r\nclass PushNotificationSender extends NotificationSender {\r\n  constructor(appId) {\r\n    super();\r\n    this.appId = appId;\r\n  }\r\n  \r\n  send(message, recipient) {\r\n    console.log(`\ud83d\udd14 Push notification sent to ${recipient}`);\r\n    console.log(`   App: ${this.appId}`);\r\n    console.log(`   Message: ${message}`);\r\n  }\r\n}\r\n\r\n// Abstraction side - Notification types\r\nclass Notification {\r\n  constructor(sender) {\r\n    this.sender = sender;\r\n  }\r\n  \r\n  send(recipient) {\r\n    throw new Error("send() method must be implemented");\r\n  }\r\n}\r\n\r\n// Refined Abstractions\r\nclass SimpleNotification extends Notification {\r\n  constructor(title, message, sender) {\r\n    super(sender);\r\n    this.title = title;\r\n    this.message = message;\r\n  }\r\n  \r\n  send(recipient) {\r\n    const fullMessage = `${this.title}: ${this.message}`;\r\n    this.sender.send(fullMessage, recipient);\r\n  }\r\n}\r\n\r\nclass UrgentNotification extends Notification {\r\n  constructor(title, message, sender) {\r\n    super(sender);\r\n    this.title = title;\r\n    this.message = message;\r\n  }\r\n  \r\n  send(recipient) {\r\n    const urgentMessage = `\ud83d\udea8 URGENT - ${this.title}: ${this.message}`;\r\n    this.sender.send(urgentMessage, recipient);\r\n    \r\n    // Send multiple times for urgent notifications\r\n    console.log("   (Sending again for urgency...)");\r\n    this.sender.send(urgentMessage, recipient);\r\n  }\r\n}\r\n\r\nclass ReminderNotification extends Notification {\r\n  constructor(title, message, reminderTime, sender) {\r\n    super(sender);\r\n    this.title = title;\r\n    this.message = message;\r\n    this.reminderTime = reminderTime;\r\n  }\r\n  \r\n  send(recipient) {\r\n    const reminderMessage = `\u23f0 Reminder (${this.reminderTime}): ${this.title} - ${this.message}`;\r\n    this.sender.send(reminderMessage, recipient);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Notification System Demo ===\\n");\r\n\r\n// Create different senders\r\nconst emailSender = new EmailSender("smtp.example.com");\r\nconst smsSender = new SMSSender("SMS_API_KEY_123");\r\nconst pushSender = new PushNotificationSender("MyApp_v1.0");\r\n\r\nconsole.log("Simple Notifications:");\r\nconsole.log("-".repeat(20));\r\n\r\nconst emailNotification = new SimpleNotification(\r\n  "Welcome", \r\n  "Thank you for signing up!",\r\n  emailSender\r\n);\r\nemailNotification.send("user@example.com");\r\n\r\nconsole.log();\r\n\r\nconst smsNotification = new SimpleNotification(\r\n  "Login Alert", \r\n  "New login detected",\r\n  smsSender\r\n);\r\nsmsNotification.send("+1-555-123-4567");\r\n\r\nconsole.log("\\nUrgent Notifications:");\r\nconsole.log("-".repeat(20));\r\n\r\nconst urgentEmail = new UrgentNotification(\r\n  "Security Alert", \r\n  "Suspicious activity detected on your account",\r\n  emailSender\r\n);\r\nurgentEmail.send("admin@example.com");\r\n\r\nconsole.log("\\nReminder Notifications:");\r\nconsole.log("-".repeat(22));\r\n\r\nconst reminderPush = new ReminderNotification(\r\n  "Meeting", \r\n  "Team standup in 15 minutes",\r\n  "10:45 AM",\r\n  pushSender\r\n);\r\nreminderPush.send("DeviceId_456");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,i.jsx)(n.h3,{id:"remote-control-system",children:"Remote Control System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Implementation side - Devices\r\nclass Device {\r\n  turnOn() { throw new Error("turnOn() method must be implemented"); }\r\n  turnOff() { throw new Error("turnOff() method must be implemented"); }\r\n  setVolume(volume) { throw new Error("setVolume() method must be implemented"); }\r\n}\r\n\r\n// Concrete Device Implementations\r\nclass TV extends Device {\r\n  constructor() {\r\n    super();\r\n    this.isOn = false;\r\n    this.volume = 10;\r\n  }\r\n  \r\n  turnOn() {\r\n    this.isOn = true;\r\n    console.log("\ud83d\udcfa TV is now ON");\r\n  }\r\n  \r\n  turnOff() {\r\n    this.isOn = false;\r\n    console.log("\ud83d\udcfa TV is now OFF");\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    this.volume = volume;\r\n    console.log(`\ud83d\udcfa TV volume set to ${volume}`);\r\n  }\r\n}\r\n\r\nclass Radio extends Device {\r\n  constructor() {\r\n    super();\r\n    this.isOn = false;\r\n    this.volume = 5;\r\n  }\r\n  \r\n  turnOn() {\r\n    this.isOn = true;\r\n    console.log("\ud83d\udcfb Radio is now ON");\r\n  }\r\n  \r\n  turnOff() {\r\n    this.isOn = false;\r\n    console.log("\ud83d\udcfb Radio is now OFF");\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    this.volume = volume;\r\n    console.log(`\ud83d\udcfb Radio volume set to ${volume}`);\r\n  }\r\n}\r\n\r\n// Abstraction side - Remote controls\r\nclass Remote {\r\n  constructor(device) {\r\n    this.device = device;\r\n  }\r\n  \r\n  power() {\r\n    console.log("\ud83d\udd18 Power button pressed");\r\n    // Implementation depends on device state\r\n  }\r\n  \r\n  volumeUp() {\r\n    console.log("\ud83d\udd18 Volume up pressed");\r\n    // Implementation will vary\r\n  }\r\n  \r\n  volumeDown() {\r\n    console.log("\ud83d\udd18 Volume down pressed");\r\n    // Implementation will vary\r\n  }\r\n}\r\n\r\n// Refined Abstraction\r\nclass BasicRemote extends Remote {\r\n  power() {\r\n    super.power();\r\n    if (this.device.isOn) {\r\n      this.device.turnOff();\r\n    } else {\r\n      this.device.turnOn();\r\n    }\r\n  }\r\n  \r\n  volumeUp() {\r\n    super.volumeUp();\r\n    this.device.setVolume(this.device.volume + 1);\r\n  }\r\n  \r\n  volumeDown() {\r\n    super.volumeDown();\r\n    this.device.setVolume(Math.max(0, this.device.volume - 1));\r\n  }\r\n}\r\n\r\nclass AdvancedRemote extends BasicRemote {\r\n  mute() {\r\n    console.log("\ud83d\udd18 Mute button pressed");\r\n    this.device.setVolume(0);\r\n    console.log("\ud83d\udd07 Device muted");\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    console.log(`\ud83d\udd18 Setting volume to ${volume}`);\r\n    this.device.setVolume(volume);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Remote Control System Demo ===\\n");\r\n\r\n// Create devices\r\nconst tv = new TV();\r\nconst radio = new Radio();\r\n\r\nconsole.log("Basic Remote with TV:");\r\nconsole.log("-".repeat(20));\r\n\r\nconst basicTVRemote = new BasicRemote(tv);\r\nbasicTVRemote.power();        // Turn on TV\r\nbasicTVRemote.volumeUp();     // Increase volume\r\nbasicTVRemote.volumeUp();     // Increase volume\r\nbasicTVRemote.power();        // Turn off TV\r\n\r\nconsole.log("\\nAdvanced Remote with Radio:");\r\nconsole.log("-".repeat(25));\r\n\r\nconst advancedRadioRemote = new AdvancedRemote(radio);\r\nadvancedRadioRemote.power();       // Turn on radio\r\nadvancedRadioRemote.setVolume(15); // Set specific volume\r\nadvancedRadioRemote.mute();        // Mute radio\r\nadvancedRadioRemote.power();       // Turn off radio\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decoupling"}),": Separates abstraction from implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Platform Independence"}),": Abstractions work with different implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Runtime Binding"}),": Can switch implementations at runtime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensibility"}),": Easy to add new abstractions or implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility"}),": Each class has a single reason to change"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complexity"}),": Increases code complexity with more classes and interfaces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": May introduce slight performance overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning Curve"}),": Can be confusing initially"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Platform Independence"}),": When you need to support multiple platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Runtime Implementation Switching"}),": When you want to change implementations at runtime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoiding Class Explosion"}),": When inheritance would create too many classes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface Evolution"}),": When abstractions and implementations need to evolve separately"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-bridge-vs-similar-patterns",children:"\ud83d\udd04 Bridge vs Similar Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"bridge-vs-adapter",children:"Bridge vs Adapter"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bridge"}),": Designed upfront, separates abstraction from implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adapter"}),": Added later, makes incompatible interfaces work together"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bridge-vs-strategy",children:"Bridge vs Strategy"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bridge"}),": About structure, separates what from how"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strategy"}),": About behavior, makes algorithms interchangeable"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adapter"}),": Both involve interface conversion, but Bridge is planned while Adapter is reactive"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State"}),": Can use Bridge to separate state interface from state implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strategy"}),": Similar structure but different intent - Bridge is structural, Strategy is behavioral"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstract Factory"}),": Can be used together - factories can create implementations for Bridge"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/bridge",children:"Bridge Pattern - Refactoring.Guru"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/bridge",children:"JavaScript Bridge Pattern Examples"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);