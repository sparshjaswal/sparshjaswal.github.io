"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1626],{230:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"dsa-concepts/advanced-topics/README","title":"Advanced Topics in Data Structures and Algorithms","description":"Disjoint Set (Union-Find)","source":"@site/docs/dsa-concepts/advanced-topics/README.md","sourceDirName":"dsa-concepts/advanced-topics","slug":"/dsa-concepts/advanced-topics/","permalink":"/docs/dsa-concepts/advanced-topics/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Data Structures","permalink":"/docs/dsa-concepts/advanced-data-structures/"},"next":{"title":"Algorithms in Data Structures and Algorithms (DSA)","permalink":"/docs/dsa-concepts/algorithms/"}}');var t=i(4848),r=i(8453);const o={},c="Advanced Topics in Data Structures and Algorithms",l={},a=[{value:"Disjoint Set (Union-Find)",id:"disjoint-set-union-find",level:2},{value:"Description",id:"description",level:3},{value:"Applications",id:"applications",level:3},{value:"Example",id:"example",level:3},{value:"Practice Questions",id:"practice-questions",level:3},{value:"String Algorithms",id:"string-algorithms",level:2},{value:"Description",id:"description-1",level:3},{value:"Key Algorithms",id:"key-algorithms",level:3},{value:"Applications",id:"applications-1",level:3},{value:"Practice Questions",id:"practice-questions-1",level:3},{value:"Geometry Algorithms",id:"geometry-algorithms",level:2},{value:"Description",id:"description-2",level:3},{value:"Key Algorithms",id:"key-algorithms-1",level:3},{value:"Applications",id:"applications-2",level:3},{value:"Practice Questions",id:"practice-questions-2",level:3},{value:"Number Theory",id:"number-theory",level:2},{value:"Description",id:"description-3",level:3},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Applications",id:"applications-3",level:3},{value:"Practice Questions",id:"practice-questions-3",level:3}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"advanced-topics-in-data-structures-and-algorithms",children:"Advanced Topics in Data Structures and Algorithms"})}),"\n",(0,t.jsx)(n.h2,{id:"disjoint-set-union-find",children:"Disjoint Set (Union-Find)"}),"\n",(0,t.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"The Disjoint Set data structure, also known as Union-Find, is used to keep track of a partition of a set into disjoint subsets. It supports two primary operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Union"}),": Merging two subsets into a single subset."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Find"}),": Determining which subset a particular element is in."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applications",children:"Applications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Network connectivity"}),"\n",(0,t.jsx)(n.li,{children:"Kruskal\u2019s Minimum Spanning Tree (MST) algorithm"}),"\n",(0,t.jsx)(n.li,{children:"Image processing (connected components)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Consider a scenario where we have a set of elements and we want to group them into connected components. Using the Union-Find structure, we can efficiently merge groups and check connectivity."}),"\n",(0,t.jsx)(n.h3,{id:"practice-questions",children:"Practice Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["LeetCode: ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/",children:"Number of Connected Components in an Undirected Graph"})]}),"\n",(0,t.jsxs)(n.li,{children:["Codeforces: ",(0,t.jsx)(n.a,{href:"https://codeforces.com/problemset/problem/4/A",children:"Disjoint Set Union"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"string-algorithms",children:"String Algorithms"}),"\n",(0,t.jsx)(n.h3,{id:"description-1",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"String algorithms are essential for processing and analyzing strings. They include various techniques for searching, matching, and manipulating strings."}),"\n",(0,t.jsx)(n.h3,{id:"key-algorithms",children:"Key Algorithms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Knuth-Morris-Pratt (KMP)"}),": Efficient substring search algorithm."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rabin-Karp"}),": Uses hashing to find any one of a set of pattern strings in a text."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Z-algorithm"}),": Computes the Z-array for pattern matching."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applications-1",children:"Applications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Text processing"}),"\n",(0,t.jsx)(n.li,{children:"DNA sequencing"}),"\n",(0,t.jsx)(n.li,{children:"Search engines"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"practice-questions-1",children:"Practice Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["LeetCode: ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/implement-strstr/",children:"Implement strStr()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Codeforces: ",(0,t.jsx)(n.a,{href:"https://codeforces.com/problemset/problem/1352/A",children:"String Similarity"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"geometry-algorithms",children:"Geometry Algorithms"}),"\n",(0,t.jsx)(n.h3,{id:"description-2",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Geometry algorithms deal with geometric objects and their properties. They are crucial in computer graphics, robotics, and geographic information systems (GIS)."}),"\n",(0,t.jsx)(n.h3,{id:"key-algorithms-1",children:"Key Algorithms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Convex Hull"}),": Finding the smallest convex polygon that can enclose a set of points."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Line Intersection"}),": Determining if two lines intersect and finding the intersection point."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Closest Pair of Points"}),": Finding the two closest points in a set."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applications-2",children:"Applications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Computer graphics"}),"\n",(0,t.jsx)(n.li,{children:"Geographic information systems"}),"\n",(0,t.jsx)(n.li,{children:"Robotics"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"practice-questions-2",children:"Practice Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["LeetCode: ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-area-rectangle/",children:"Minimum Area Rectangle"})]}),"\n",(0,t.jsxs)(n.li,{children:["Codeforces: ",(0,t.jsx)(n.a,{href:"https://codeforces.com/problemset/problem/1000/A",children:"Geometry Problem"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"number-theory",children:"Number Theory"}),"\n",(0,t.jsx)(n.h3,{id:"description-3",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Number theory is a branch of mathematics dealing with the properties and relationships of numbers, particularly integers."}),"\n",(0,t.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prime Numbers"}),": Numbers greater than 1 that have no divisors other than 1 and themselves."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sieve of Eratosthenes"}),": An efficient algorithm to find all primes up to a specified integer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Greatest Common Divisor (GCD)"}),": The largest positive integer that divides two or more integers without leaving a remainder."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applications-3",children:"Applications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cryptography"}),"\n",(0,t.jsx)(n.li,{children:"Algorithm optimization"}),"\n",(0,t.jsx)(n.li,{children:"Combinatorial problems"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"practice-questions-3",children:"Practice Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["LeetCode: ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/gcd-of-strings/",children:"GCD of Strings"})]}),"\n",(0,t.jsxs)(n.li,{children:["Codeforces: ",(0,t.jsx)(n.a,{href:"https://codeforces.com/problemset/problem/1000/B",children:"GCD Problem"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"This README serves as a comprehensive guide to advanced topics in Data Structures and Algorithms, providing detailed descriptions, examples, and practice questions to enhance understanding and application of these concepts."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);