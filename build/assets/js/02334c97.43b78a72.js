"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[5444],{602:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"SOLID-Design-principles/README","title":"\ud83c\udfdb\ufe0f SOLID Design Principles","description":"The foundation of maintainable and scalable object-oriented design","source":"@site/docs/SOLID-Design-principles/README.md","sourceDirName":"SOLID-Design-principles","slug":"/SOLID-Design-principles/","permalink":"/docs/SOLID-Design-principles/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"\ud83c\udfa8 Design Patterns","permalink":"/docs/design-pattern/"}}');var i=r(4848),t=r(8453);const l={},a="\ud83c\udfdb\ufe0f SOLID Design Principles",o={},c=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udccb The Five Principles",id:"-the-five-principles",level:2},{value:"\ud83c\udfaf Single Responsibility Principle",id:"-single-responsibility-principle",level:2},{value:"What it means",id:"what-it-means",level:3},{value:"\u274c Violation Example",id:"-violation-example",level:3},{value:"\u2705 Better Approach",id:"-better-approach",level:3},{value:"\ud83c\udf81 Benefits",id:"-benefits",level:3},{value:"\ud83d\udd27 Open/Closed Principle",id:"-openclosed-principle",level:2},{value:"What it means",id:"what-it-means-1",level:3},{value:"\u274c Violation Example",id:"-violation-example-1",level:3},{value:"\u2705 Better Approach",id:"-better-approach-1",level:3},{value:"\ud83c\udf81 Benefits",id:"-benefits-1",level:3},{value:"\ud83d\udd04 Liskov Substitution Principle",id:"-liskov-substitution-principle",level:2},{value:"What it means",id:"what-it-means-2",level:3},{value:"\u274c Violation Example",id:"-violation-example-2",level:3},{value:"\u2705 Better Approach",id:"-better-approach-2",level:3},{value:"\ud83c\udf81 Benefits",id:"-benefits-2",level:3},{value:"\ud83c\udf9b\ufe0f Interface Segregation Principle",id:"\ufe0f-interface-segregation-principle",level:2},{value:"What it means",id:"what-it-means-3",level:3},{value:"\u274c Violation Example",id:"-violation-example-3",level:3},{value:"\u2705 Better Approach",id:"-better-approach-3",level:3},{value:"\ud83c\udf81 Benefits",id:"-benefits-3",level:3},{value:"\ud83c\udfd7\ufe0f Dependency Inversion Principle",id:"\ufe0f-dependency-inversion-principle",level:2},{value:"What it means",id:"what-it-means-4",level:3},{value:"\u274c Violation Example",id:"-violation-example-4",level:3},{value:"\u2705 Better Approach",id:"-better-approach-4",level:3},{value:"\ud83c\udf81 Benefits",id:"-benefits-4",level:3},{value:"\ud83c\udfaf Applying SOLID Principles Together",id:"-applying-solid-principles-together",level:2},{value:"\ud83c\udfc6 Benefits of Following SOLID",id:"-benefits-of-following-solid",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ufe0f-solid-design-principles",children:"\ud83c\udfdb\ufe0f SOLID Design Principles"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"The foundation of maintainable and scalable object-oriented design"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"SOLID"})," principles are a set of design principles introduced by ",(0,i.jsx)(n.strong,{children:"Robert C. Martin (Uncle Bob)"})," that help create more maintainable, understandable, and flexible software. These principles form the foundation of good object-oriented programming and clean architecture."]}),"\n",(0,i.jsx)(n.h2,{id:"-the-five-principles",children:"\ud83d\udccb The Five Principles"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Principle"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Benefit"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#-single-responsibility-principle",children:"S"})})," - Single Responsibility"]}),(0,i.jsx)(n.td,{children:"A class should have only one reason to change"}),(0,i.jsx)(n.td,{children:"\ud83c\udfaf Focused classes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#-openclosed-principle",children:"O"})})," - Open/Closed"]}),(0,i.jsx)(n.td,{children:"Open for extension, closed for modification"}),(0,i.jsx)(n.td,{children:"\ud83d\udd27 Easy to extend"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#-liskov-substitution-principle",children:"L"})})," - Liskov Substitution"]}),(0,i.jsx)(n.td,{children:"Objects should be replaceable with instances of subtypes"}),(0,i.jsx)(n.td,{children:"\ud83d\udd04 Proper inheritance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#-interface-segregation-principle",children:"I"})})," - Interface Segregation"]}),(0,i.jsx)(n.td,{children:"Don't force clients to depend on unused interfaces"}),(0,i.jsx)(n.td,{children:"\ud83c\udf9b\ufe0f Lean interfaces"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#-dependency-inversion-principle",children:"D"})})," - Dependency Inversion"]}),(0,i.jsx)(n.td,{children:"Depend on abstractions, not concretions"}),(0,i.jsx)(n.td,{children:"\ud83c\udfd7\ufe0f Flexible architecture"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-single-responsibility-principle",children:"\ud83c\udfaf Single Responsibility Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"A class should have only one reason to change"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-it-means",children:"What it means"}),"\n",(0,i.jsxs)(n.p,{children:["Each class should have ",(0,i.jsx)(n.strong,{children:"only one responsibility"})," and ",(0,i.jsx)(n.strong,{children:"only one reason to change"}),". A class should do one thing and do it well."]}),"\n",(0,i.jsx)(n.h3,{id:"-violation-example",children:"\u274c Violation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: UserManager does too many things\r\nclass UserManager {\r\n    constructor() {\r\n        this.users = [];\r\n    }\r\n    \r\n    // User management\r\n    addUser(user) { /* ... */ }\r\n    removeUser(userId) { /* ... */ }\r\n    \r\n    // Email functionality\r\n    sendWelcomeEmail(user) { /* ... */ }\r\n    sendPasswordResetEmail(user) { /* ... */ }\r\n    \r\n    // Database operations\r\n    saveToDatabase(user) { /* ... */ }\r\n    loadFromDatabase(userId) { /* ... */ }\r\n    \r\n    // Report generation\r\n    generateUserReport() { /* ... */ }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-better-approach",children:"\u2705 Better Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Separate responsibilities\r\nclass UserManager {\r\n    constructor() {\r\n        this.users = [];\r\n    }\r\n    \r\n    addUser(user) { /* ... */ }\r\n    removeUser(userId) { /* ... */ }\r\n    getUser(userId) { /* ... */ }\r\n}\r\n\r\nclass EmailService {\r\n    sendWelcomeEmail(user) { /* ... */ }\r\n    sendPasswordResetEmail(user) { /* ... */ }\r\n}\r\n\r\nclass UserRepository {\r\n    save(user) { /* ... */ }\r\n    findById(userId) { /* ... */ }\r\n}\r\n\r\nclass ReportGenerator {\r\n    generateUserReport(users) { /* ... */ }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-benefits",children:"\ud83c\udf81 Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Easier to understand and maintain"}),"\n",(0,i.jsx)(n.li,{children:"Reduced coupling"}),"\n",(0,i.jsx)(n.li,{children:"Better testability"}),"\n",(0,i.jsx)(n.li,{children:"Clear separation of concerns"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-openclosed-principle",children:"\ud83d\udd27 Open/Closed Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Software entities should be open for extension but closed for modification"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-it-means-1",children:"What it means"}),"\n",(0,i.jsxs)(n.p,{children:["You should be able to ",(0,i.jsx)(n.strong,{children:"extend"})," a class's behavior ",(0,i.jsx)(n.strong,{children:"without modifying"})," its existing code."]}),"\n",(0,i.jsx)(n.h3,{id:"-violation-example-1",children:"\u274c Violation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Must modify existing code to add new shapes\r\nclass AreaCalculator {\r\n    calculateArea(shapes) {\r\n        let totalArea = 0;\r\n        \r\n        for (const shape of shapes) {\r\n            if (shape.type === 'rectangle') {\r\n                totalArea += shape.width * shape.height;\r\n            } else if (shape.type === 'circle') {\r\n                totalArea += Math.PI * shape.radius * shape.radius;\r\n            }\r\n            // To add triangle, we must modify this class!\r\n        }\r\n        \r\n        return totalArea;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-better-approach-1",children:"\u2705 Better Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Open for extension, closed for modification\r\nclass Shape {\r\n    calculateArea() {\r\n        throw new Error('calculateArea must be implemented');\r\n    }\r\n}\r\n\r\nclass Rectangle extends Shape {\r\n    constructor(width, height) {\r\n        super();\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    \r\n    calculateArea() {\r\n        return this.width * this.height;\r\n    }\r\n}\r\n\r\nclass Circle extends Shape {\r\n    constructor(radius) {\r\n        super();\r\n        this.radius = radius;\r\n    }\r\n    \r\n    calculateArea() {\r\n        return Math.PI * this.radius * this.radius;\r\n    }\r\n}\r\n\r\n// New shape - no need to modify existing code!\r\nclass Triangle extends Shape {\r\n    constructor(base, height) {\r\n        super();\r\n        this.base = base;\r\n        this.height = height;\r\n    }\r\n    \r\n    calculateArea() {\r\n        return 0.5 * this.base * this.height;\r\n    }\r\n}\r\n\r\nclass AreaCalculator {\r\n    calculateArea(shapes) {\r\n        return shapes.reduce((total, shape) => total + shape.calculateArea(), 0);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-benefits-1",children:"\ud83c\udf81 Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reduces risk when adding new functionality"}),"\n",(0,i.jsx)(n.li,{children:"Encourages proper use of inheritance and polymorphism"}),"\n",(0,i.jsx)(n.li,{children:"Makes code more maintainable"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-liskov-substitution-principle",children:"\ud83d\udd04 Liskov Substitution Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Objects of a superclass should be replaceable with objects of its subclasses without altering program correctness"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-it-means-2",children:"What it means"}),"\n",(0,i.jsxs)(n.p,{children:["If class ",(0,i.jsx)(n.code,{children:"B"})," is a subtype of class ",(0,i.jsx)(n.code,{children:"A"}),", then objects of type ",(0,i.jsx)(n.code,{children:"A"})," should be replaceable with objects of type ",(0,i.jsx)(n.code,{children:"B"})," without changing the desirable properties of the program."]}),"\n",(0,i.jsx)(n.h3,{id:"-violation-example-2",children:"\u274c Violation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Penguin violates LSP - it can't fly!\r\nclass Bird {\r\n    fly() {\r\n        console.log('Flying high!');\r\n    }\r\n}\r\n\r\nclass Duck extends Bird {\r\n    fly() {\r\n        console.log('Duck flying!');\r\n    }\r\n}\r\n\r\nclass Penguin extends Bird {\r\n    fly() {\r\n        throw new Error('Penguins cannot fly!'); // Violates LSP!\r\n    }\r\n}\r\n\r\n// This will break with Penguin\r\nfunction makeBirdFly(bird) {\r\n    bird.fly(); // Crashes if bird is a Penguin\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-better-approach-2",children:"\u2705 Better Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Proper hierarchy that respects LSP\r\nclass Bird {\r\n    eat() {\r\n        console.log('Bird is eating');\r\n    }\r\n}\r\n\r\nclass FlyingBird extends Bird {\r\n    fly() {\r\n        console.log('Flying high!');\r\n    }\r\n}\r\n\r\nclass Duck extends FlyingBird {\r\n    fly() {\r\n        console.log('Duck flying!');\r\n    }\r\n}\r\n\r\nclass Penguin extends Bird {\r\n    swim() {\r\n        console.log('Penguin swimming!');\r\n    }\r\n}\r\n\r\n// Now this works correctly\r\nfunction makeFlyingBirdFly(bird) {\r\n    if (bird instanceof FlyingBird) {\r\n        bird.fly();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-benefits-2",children:"\ud83c\udf81 Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensures proper inheritance hierarchies"}),"\n",(0,i.jsx)(n.li,{children:"Maintains behavioral consistency"}),"\n",(0,i.jsx)(n.li,{children:"Enables safe polymorphism"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-interface-segregation-principle",children:"\ud83c\udf9b\ufe0f Interface Segregation Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"No client should be forced to depend on methods it does not use"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-it-means-3",children:"What it means"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.strong,{children:"specific interfaces"})," rather than large, general-purpose ones. Clients should not be forced to depend on interfaces they don't use."]}),"\n",(0,i.jsx)(n.h3,{id:"-violation-example-3",children:"\u274c Violation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: Fat interface forces all implementations to have unused methods\r\nclass WorkerInterface {\r\n    work() { throw new Error('Must implement'); }\r\n    eat() { throw new Error('Must implement'); }\r\n    sleep() { throw new Error('Must implement'); }\r\n}\r\n\r\nclass Human extends WorkerInterface {\r\n    work() { console.log('Human working'); }\r\n    eat() { console.log('Human eating'); }\r\n    sleep() { console.log('Human sleeping'); }\r\n}\r\n\r\nclass Robot extends WorkerInterface {\r\n    work() { console.log('Robot working'); }\r\n    eat() { throw new Error('Robots do not eat!'); } // Forced to implement!\r\n    sleep() { throw new Error('Robots do not sleep!'); } // Forced to implement!\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-better-approach-3",children:"\u2705 Better Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Segregated interfaces\r\nclass Workable {\r\n    work() { throw new Error('Must implement work'); }\r\n}\r\n\r\nclass Feedable {\r\n    eat() { throw new Error('Must implement eat'); }\r\n}\r\n\r\nclass Sleepable {\r\n    sleep() { throw new Error('Must implement sleep'); }\r\n}\r\n\r\nclass Human {\r\n    work() { console.log('Human working'); }\r\n    eat() { console.log('Human eating'); }\r\n    sleep() { console.log('Human sleeping'); }\r\n}\r\n\r\nclass Robot {\r\n    work() { console.log('Robot working'); }\r\n    // Robot doesn't need to implement eat() or sleep()!\r\n}\r\n\r\n// Mix and match as needed\r\nclass WorkerManager {\r\n    makeWork(workable) {\r\n        if (workable.work) {\r\n            workable.work();\r\n        }\r\n    }\r\n    \r\n    provideMeal(feedable) {\r\n        if (feedable.eat) {\r\n            feedable.eat();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-benefits-3",children:"\ud83c\udf81 Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reduces unnecessary dependencies"}),"\n",(0,i.jsx)(n.li,{children:"Makes interfaces more focused and cohesive"}),"\n",(0,i.jsx)(n.li,{children:"Increases flexibility and maintainability"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-dependency-inversion-principle",children:"\ud83c\udfd7\ufe0f Dependency Inversion Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Depend on abstractions, not concretions"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-it-means-4",children:"What it means"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-level modules"})," should not depend on ",(0,i.jsx)(n.strong,{children:"low-level modules"}),". Both should depend on ",(0,i.jsx)(n.strong,{children:"abstractions"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstractions"})," should not depend on ",(0,i.jsx)(n.strong,{children:"details"}),". ",(0,i.jsx)(n.strong,{children:"Details"})," should depend on ",(0,i.jsx)(n.strong,{children:"abstractions"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-violation-example-4",children:"\u274c Violation Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// BAD: High-level class depends directly on low-level classes\r\nclass EmailService {\r\n    sendEmail(message) {\r\n        console.log(`Sending email: ${message}`);\r\n    }\r\n}\r\n\r\nclass SMSService {\r\n    sendSMS(message) {\r\n        console.log(`Sending SMS: ${message}`);\r\n    }\r\n}\r\n\r\nclass NotificationManager {\r\n    constructor() {\r\n        this.emailService = new EmailService(); // Direct dependency!\r\n        this.smsService = new SMSService(); // Direct dependency!\r\n    }\r\n    \r\n    sendNotification(message, type) {\r\n        if (type === 'email') {\r\n            this.emailService.sendEmail(message);\r\n        } else if (type === 'sms') {\r\n            this.smsService.sendSMS(message);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-better-approach-4",children:"\u2705 Better Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// GOOD: Depend on abstractions\r\nclass NotificationService {\r\n    send(message) {\r\n        throw new Error('Must implement send method');\r\n    }\r\n}\r\n\r\nclass EmailService extends NotificationService {\r\n    send(message) {\r\n        console.log(`Sending email: ${message}`);\r\n    }\r\n}\r\n\r\nclass SMSService extends NotificationService {\r\n    send(message) {\r\n        console.log(`Sending SMS: ${message}`);\r\n    }\r\n}\r\n\r\nclass PushNotificationService extends NotificationService {\r\n    send(message) {\r\n        console.log(`Sending push notification: ${message}`);\r\n    }\r\n}\r\n\r\nclass NotificationManager {\r\n    constructor(notificationServices = []) {\r\n        this.services = notificationServices; // Dependency injection!\r\n    }\r\n    \r\n    addService(service) {\r\n        this.services.push(service);\r\n    }\r\n    \r\n    sendToAll(message) {\r\n        this.services.forEach(service => service.send(message));\r\n    }\r\n}\r\n\r\n// Usage with dependency injection\r\nconst notificationManager = new NotificationManager([\r\n    new EmailService(),\r\n    new SMSService(),\r\n    new PushNotificationService()\r\n]);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-benefits-4",children:"\ud83c\udf81 Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Increases flexibility and maintainability"}),"\n",(0,i.jsx)(n.li,{children:"Makes code more testable (easy to mock dependencies)"}),"\n",(0,i.jsx)(n.li,{children:"Reduces coupling between modules"}),"\n",(0,i.jsx)(n.li,{children:"Enables easier changes and extensions"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-applying-solid-principles-together",children:"\ud83c\udfaf Applying SOLID Principles Together"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Example: E-commerce system applying all SOLID principles\r\n\r\n// S - Single Responsibility: Each class has one responsibility\r\nclass Product {\r\n    constructor(id, name, price) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.price = price;\r\n    }\r\n}\r\n\r\nclass ShoppingCart {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    \r\n    addItem(product, quantity) {\r\n        this.items.push({ product, quantity });\r\n    }\r\n    \r\n    removeItem(productId) {\r\n        this.items = this.items.filter(item => item.product.id !== productId);\r\n    }\r\n    \r\n    getItems() {\r\n        return this.items;\r\n    }\r\n}\r\n\r\n// O - Open/Closed: Open for extension, closed for modification\r\nclass DiscountStrategy {\r\n    calculate(amount) {\r\n        throw new Error('Must implement calculate method');\r\n    }\r\n}\r\n\r\nclass NoDiscount extends DiscountStrategy {\r\n    calculate(amount) {\r\n        return amount;\r\n    }\r\n}\r\n\r\nclass PercentageDiscount extends DiscountStrategy {\r\n    constructor(percentage) {\r\n        super();\r\n        this.percentage = percentage;\r\n    }\r\n    \r\n    calculate(amount) {\r\n        return amount * (1 - this.percentage / 100);\r\n    }\r\n}\r\n\r\nclass FixedAmountDiscount extends DiscountStrategy {\r\n    constructor(discountAmount) {\r\n        super();\r\n        this.discountAmount = discountAmount;\r\n    }\r\n    \r\n    calculate(amount) {\r\n        return Math.max(0, amount - this.discountAmount);\r\n    }\r\n}\r\n\r\n// L - Liskov Substitution: All discount strategies are interchangeable\r\n// I - Interface Segregation: PaymentProcessor only does payments\r\nclass PaymentProcessor {\r\n    process(amount) {\r\n        throw new Error('Must implement process method');\r\n    }\r\n}\r\n\r\nclass CreditCardProcessor extends PaymentProcessor {\r\n    process(amount) {\r\n        console.log(`Processing $${amount} via credit card`);\r\n        return true;\r\n    }\r\n}\r\n\r\nclass PayPalProcessor extends PaymentProcessor {\r\n    process(amount) {\r\n        console.log(`Processing $${amount} via PayPal`);\r\n        return true;\r\n    }\r\n}\r\n\r\n// D - Dependency Inversion: OrderService depends on abstractions\r\nclass OrderService {\r\n    constructor(paymentProcessor, discountStrategy = new NoDiscount()) {\r\n        this.paymentProcessor = paymentProcessor;\r\n        this.discountStrategy = discountStrategy;\r\n    }\r\n    \r\n    processOrder(cart) {\r\n        const total = cart.getItems().reduce((sum, item) => \r\n            sum + (item.product.price * item.quantity), 0\r\n        );\r\n        \r\n        const discountedTotal = this.discountStrategy.calculate(total);\r\n        \r\n        return this.paymentProcessor.process(discountedTotal);\r\n    }\r\n}\r\n\r\n// Usage\r\nconst cart = new ShoppingCart();\r\ncart.addItem(new Product(1, 'Laptop', 1000), 1);\r\ncart.addItem(new Product(2, 'Mouse', 50), 2);\r\n\r\nconst orderService = new OrderService(\r\n    new CreditCardProcessor(),\r\n    new PercentageDiscount(10)\r\n);\r\n\r\norderService.processOrder(cart);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-benefits-of-following-solid",children:"\ud83c\udfc6 Benefits of Following SOLID"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Benefit"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83e\uddf9 ",(0,i.jsx)(n.strong,{children:"Maintainability"})]}),(0,i.jsx)(n.td,{children:"Code is easier to understand and modify"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83e\uddea ",(0,i.jsx)(n.strong,{children:"Testability"})]}),(0,i.jsx)(n.td,{children:"Easier to write unit tests with proper isolation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83d\udd27 ",(0,i.jsx)(n.strong,{children:"Flexibility"})]}),(0,i.jsx)(n.td,{children:"Easy to extend and modify without breaking existing code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Reusability"})]}),(0,i.jsx)(n.td,{children:"Components can be reused in different contexts"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83d\udc65 ",(0,i.jsx)(n.strong,{children:"Team Collaboration"})]}),(0,i.jsx)(n.td,{children:"Clear responsibilities make team development smoother"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["\ud83d\udc1b ",(0,i.jsx)(n.strong,{children:"Bug Reduction"})]}),(0,i.jsx)(n.td,{children:"Better structure leads to fewer bugs"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"../README.md",children:"\ud83d\udd19 Back to Main"})," | ",(0,i.jsx)(n.a,{href:"./single-responsibility.md",children:"\ud83d\udcd6 Individual Principles"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);