"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3804],{2230:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"dsa-key-pattern/Trees","title":"Trees","description":"Description","source":"@site/docs/dsa-key-pattern/18-Trees.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Trees","permalink":"/docs/dsa-key-pattern/Trees","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":18,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Monotonic Stack","permalink":"/docs/dsa-key-pattern/Monotonic-Stack"},"next":{"title":"Dynamic Programming","permalink":"/docs/dsa-key-pattern/Dynamic-Programming"}}');var i=n(4848),t=n(8453);const l={},o="Trees",c={},a=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Categories",id:"categories",level:2},{value:"Level Order Traversal (BFS in Binary Tree)",id:"level-order-traversal-bfs-in-binary-tree",level:2},{value:"Tree Construction",id:"tree-construction",level:2},{value:"Height related Problems",id:"height-related-problems",level:2},{value:"Root to leaf path problems",id:"root-to-leaf-path-problems",level:2},{value:"Ancestor problem",id:"ancestor-problem",level:2},{value:"Binary Search Tree",id:"binary-search-tree",level:2}];function d(e){const r={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"trees",children:"Trees"})}),"\n",(0,i.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(r.p,{children:"Tree problems involve hierarchical data structures and various traversal techniques."}),"\n",(0,i.jsx)(r.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,i.jsx)(r.p,{children:"O(n) for most traversals"}),"\n",(0,i.jsx)(r.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,i.jsx)(r.p,{children:"O(h) where h is height of tree"}),"\n",(0,i.jsx)(r.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Tree Traversal"}),": Inorder, preorder, postorder, level-order"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Recursive Structure"}),": Most tree problems solved recursively"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Tree Construction"}),": Build trees from traversals or arrays"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Path Problems"}),": Find paths with specific properties"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"categories",children:"Categories"}),"\n",(0,i.jsx)(r.h2,{id:"level-order-traversal-bfs-in-binary-tree",children:"Level Order Traversal (BFS in Binary Tree)"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Level order Traversal"}),"\n",(0,i.jsx)(r.li,{children:"Zigzag Level order Traversal"}),"\n",(0,i.jsx)(r.li,{children:"Even Odd Tree"}),"\n",(0,i.jsx)(r.li,{children:"Reverse odd Levels"}),"\n",(0,i.jsx)(r.li,{children:"Deepest Leaves Sum"}),"\n",(0,i.jsx)(r.li,{children:"Add one row to Tree"}),"\n",(0,i.jsx)(r.li,{children:"Maximum width of Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"All Nodes Distance K in Binary tree"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"tree-construction",children:"Tree Construction"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"})," Build binary trees from given traversal sequences or arrays."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Construct BT from Preorder and Inorder"}),"\n",(0,i.jsx)(r.li,{children:"Construct BT from Postorder and Inorder"}),"\n",(0,i.jsx)(r.li,{children:"Maximum Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"Construct BST from Preorder"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Pattern:"})," Use recursive divide-and-conquer approach with traversal properties."]}),"\n",(0,i.jsx)(r.h2,{id:"height-related-problems",children:"Height related Problems"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"})," Problems involving tree height, depth, balance, and diameter."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Maximum Depth of BT"}),"\n",(0,i.jsx)(r.li,{children:"Balanced Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"Diameter of Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"Minimum Depth of BT"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Pattern:"})," Use recursion to calculate height and compare subtrees."]}),"\n",(0,i.jsx)(r.h2,{id:"root-to-leaf-path-problems",children:"Root to leaf path problems"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"})," Problems involving paths from root to leaf nodes."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Binary Tree Paths"}),"\n",(0,i.jsx)(r.li,{children:"Path Sum II"}),"\n",(0,i.jsx)(r.li,{children:"Sum Root to Leaf numbers"}),"\n",(0,i.jsx)(r.li,{children:"Smallest string starting from Leaf"}),"\n",(0,i.jsx)(r.li,{children:"Insufficient nodes in root to Leaf"}),"\n",(0,i.jsx)(r.li,{children:"Pseudo-Palindromic Paths in a Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"Binary Tree Maximum Path Sum"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Pattern:"})," Use backtracking or DFS to explore all root-to-leaf paths."]}),"\n",(0,i.jsx)(r.h2,{id:"ancestor-problem",children:"Ancestor problem"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"})," Problems involving relationships between ancestors and descendants."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"LCA of Binary Tree"}),"\n",(0,i.jsx)(r.li,{children:"Maximum difference between node and ancestor"}),"\n",(0,i.jsx)(r.li,{children:"LCA of deepest leaves"}),"\n",(0,i.jsx)(r.li,{children:"Kth Ancestor of a Tree Node"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Pattern:"})," Use parent pointers, path tracking, or recursive LCA algorithms."]}),"\n",(0,i.jsx)(r.h2,{id:"binary-search-tree",children:"Binary Search Tree"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"})," Problems specific to BST properties and operations."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Key Problems:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Validate BST"}),"\n",(0,i.jsx)(r.li,{children:"Range Sum of BST"}),"\n",(0,i.jsx)(r.li,{children:"Minimum Absolute Difference in BST"}),"\n",(0,i.jsx)(r.li,{children:"Insert into a BST"}),"\n",(0,i.jsx)(r.li,{children:"LCA of BST"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Pattern:"})," Leverage BST property (left < root < right) for efficient solutions."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"https://leetcode.com/discuss/post/1337373/tree-question-pattern-2021-placement-by-t65qm/",children:"https://leetcode.com/discuss/post/1337373/tree-question-pattern-2021-placement-by-t65qm/"}),"\r\n",(0,i.jsx)(r.a,{href:"https://leetcode.com/discuss/post/5020529/master-tree-patterns-by-mercer80-8b0z/",children:"https://leetcode.com/discuss/post/5020529/master-tree-patterns-by-mercer80-8b0z/"})]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>o});var s=n(6540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);