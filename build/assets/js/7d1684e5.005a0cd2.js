"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7613],{1399:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"javascript/function-types","title":"JavaScript Function Types","description":"Function Arity","source":"@site/docs/javascript/function-types.md","sourceDirName":"javascript","slug":"/javascript/function-types","permalink":"/docs/javascript/function-types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Recursion in JavaScript","permalink":"/docs/javascript/function-recursion"},"next":{"title":"\ud83d\udcda Chapter 1: The Complete History of JavaScript","permalink":"/docs/javascript/history"}}');var t=i(4848),c=i(8453);const a={},s="JavaScript Function Types",o={},u=[{value:"Function Arity",id:"function-arity",level:2},{value:"Unary Function (1 argument)",id:"unary-function-1-argument",level:3},{value:"Binary Function (2 arguments)",id:"binary-function-2-arguments",level:3},{value:"Variadic Function (variable arguments)",id:"variadic-function-variable-arguments",level:3},{value:"Function Categories",id:"function-categories",level:2},{value:"Factory Function",id:"factory-function",level:3},{value:"Higher-Order Function",id:"higher-order-function",level:3},{value:"Curried Function",id:"curried-function",level:3},{value:"Partial Function",id:"partial-function",level:3},{value:"Advanced Function Patterns",id:"advanced-function-patterns",level:2},{value:"Memoized Function",id:"memoized-function",level:3},{value:"Pure Function",id:"pure-function",level:3},{value:"Predicate Function",id:"predicate-function",level:3},{value:"Composer Function",id:"composer-function",level:3},{value:"Best Practices",id:"best-practices",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"javascript-function-types",children:"JavaScript Function Types"})}),"\n",(0,t.jsx)(e.h2,{id:"function-arity",children:"Function Arity"}),"\n",(0,t.jsx)(e.p,{children:"Arity refers to the number of arguments a function accepts."}),"\n",(0,t.jsx)(e.h3,{id:"unary-function-1-argument",children:"Unary Function (1 argument)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function greet(name) {\n    return `Hello, ${name}!`;\n}\n\ngreet("Alice"); // "Hello, Alice!"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"binary-function-2-arguments",children:"Binary Function (2 arguments)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function add(a, b) {\n    return a + b;\n}\n\nadd(5, 3); // 8\n"})}),"\n",(0,t.jsx)(e.h3,{id:"variadic-function-variable-arguments",children:"Variadic Function (variable arguments)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function sum(...numbers) {\n    return numbers.reduce((total, num) => total + num, 0);\n}\n\nsum(1, 2, 3, 4); // 10\n\n// Using arguments object (older approach)\nfunction oldSum() {\n    let total = 0;\n    for (let i = 0; i < arguments.length; i++) {\n        total += arguments[i];\n    }\n    return total;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"function-categories",children:"Function Categories"}),"\n",(0,t.jsx)(e.h3,{id:"factory-function",children:"Factory Function"}),"\n",(0,t.jsx)(e.p,{children:"Creates and returns objects:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function createStudent(name, age, grade) {\n    return {\n        name,\n        age,\n        grade,\n        study() {\n            console.log(`${this.name} is studying`);\n        },\n        getInfo() {\n            return `${this.name}, Age: ${this.age}, Grade: ${this.grade}`;\n        }\n    };\n}\n\nconst student1 = createStudent("Alice", 20, "A");\nstudent1.study(); // "Alice is studying"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"higher-order-function",children:"Higher-Order Function"}),"\n",(0,t.jsx)(e.p,{children:"Accepts functions as arguments or returns functions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Accepts function as argument\nfunction processArray(arr, callback) {\n    return arr.map(callback);\n}\n\nconst numbers = [1, 2, 3, 4];\nconst doubled = processArray(numbers, x => x * 2); // [2, 4, 6, 8]\n\n// Returns a function\nfunction createMultiplier(factor) {\n    return function(number) {\n        return number * factor;\n    };\n}\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n"})}),"\n",(0,t.jsx)(e.h3,{id:"curried-function",children:"Curried Function"}),"\n",(0,t.jsx)(e.p,{children:"Transforms multi-argument function into sequence of single-argument functions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Regular function\nfunction add(a, b, c) {\n    return a + b + c;\n}\n\n// Curried version\nfunction curriedAdd(a) {\n    return function(b) {\n        return function(c) {\n            return a + b + c;\n        };\n    };\n}\n\n// Arrow function version\nconst curriedAddArrow = a => b => c => a + b + c;\n\n// Usage\nconst result1 = curriedAdd(1)(2)(3); // 6\nconst result2 = curriedAddArrow(1)(2)(3); // 6\n\n// Partial application\nconst addFive = curriedAdd(5);\nconst addFiveAndThree = addFive(3);\nconsole.log(addFiveAndThree(2)); // 10\n"})}),"\n",(0,t.jsx)(e.h3,{id:"partial-function",children:"Partial Function"}),"\n",(0,t.jsx)(e.p,{children:"Pre-fills some arguments:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function multiply(a, b, c) {\n    return a * b * c;\n}\n\n// Using bind for partial application\nconst multiplyByTwo = multiply.bind(null, 2);\nconsole.log(multiplyByTwo(3, 4)); // 24\n\n// Manual partial function\nfunction partial(fn, ...presetArgs) {\n    return function(...remainingArgs) {\n        return fn(...presetArgs, ...remainingArgs);\n    };\n}\n\nconst multiplyByFive = partial(multiply, 5);\nconsole.log(multiplyByFive(2, 3)); // 30\n"})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-function-patterns",children:"Advanced Function Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"memoized-function",children:"Memoized Function"}),"\n",(0,t.jsx)(e.p,{children:"Caches results for performance:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function memoize(fn) {\n    const cache = new Map();\n    \n    return function(...args) {\n        const key = JSON.stringify(args);\n        \n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        \n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result;\n    };\n}\n\n// Example: Expensive fibonacci function\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst memoizedFib = memoize(fibonacci);\nconsole.log(memoizedFib(40)); // Much faster on repeated calls\n"})}),"\n",(0,t.jsx)(e.h3,{id:"pure-function",children:"Pure Function"}),"\n",(0,t.jsx)(e.p,{children:"No side effects, same input always produces same output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Pure function\nfunction addPure(a, b) {\n    return a + b;\n}\n\n// Impure function (has side effects)\nlet count = 0;\nfunction addImpure(a, b) {\n    count++; // Side effect\n    console.log('Adding...'); // Side effect\n    return a + b;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"predicate-function",children:"Predicate Function"}),"\n",(0,t.jsx)(e.p,{children:"Returns boolean value:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const isEven = x => x % 2 === 0;\nconst isPositive = x => x > 0;\nconst isString = x => typeof x === 'string';\n\n// Use with array methods\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst evens = numbers.filter(isEven); // [2, 4, 6]\nconst hasEven = numbers.some(isEven); // true\nconst allPositive = numbers.every(isPositive); // true\n"})}),"\n",(0,t.jsx)(e.h3,{id:"composer-function",children:"Composer Function"}),"\n",(0,t.jsx)(e.p,{children:"Combines multiple functions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function compose(...functions) {\n    return function(initialValue) {\n        return functions.reduceRight((acc, fn) => fn(acc), initialValue);\n    };\n}\n\nconst addOne = x => x + 1;\nconst double = x => x * 2;\nconst square = x => x * x;\n\nconst composedFunction = compose(square, double, addOne);\nconsole.log(composedFunction(3)); // square(double(addOne(3))) = square(double(4)) = square(8) = 64\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Keep functions small and focused"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Use pure functions when possible"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Prefer fewer parameters (high arity can be confusing)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Use descriptive names"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Return early to avoid deep nesting"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Good: Clear, single responsibility\nfunction validateEmail(email) {\n    if (!email) return false;\n    if (typeof email !== 'string') return false;\n    return email.includes('@') && email.includes('.');\n}\n\n// Better: Early returns\nfunction processUser(user) {\n    if (!user) return null;\n    if (!user.email) return null;\n    if (!validateEmail(user.email)) return null;\n    \n    return {\n        id: user.id,\n        email: user.email.toLowerCase(),\n        name: user.name || 'Anonymous'\n    };\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"If the function and its arguments are same,compiler cache the result and give the values."})]})}function d(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var r=i(6540);const t={},c=r.createContext(t);function a(n){const e=r.useContext(c);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(c.Provider,{value:e},n.children)}}}]);