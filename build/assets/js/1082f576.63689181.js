"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4754],{6402:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"dsa-concepts/basic-data-structures/README","title":"Basic Data Structures","description":"This section provides an in-depth look at the foundational data structures essential for programming and problem-solving. Here, you\'ll find detailed descriptions, operations, examples, and practice questions for each structure.","source":"@site/docs/dsa-concepts/basic-data-structures/README.md","sourceDirName":"dsa-concepts/basic-data-structures","slug":"/dsa-concepts/basic-data-structures/","permalink":"/docs/dsa-concepts/basic-data-structures/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Algorithms in Data Structures and Algorithms (DSA)","permalink":"/docs/dsa-concepts/algorithms/"},"next":{"title":"Binary Search","permalink":"/docs/dsa-concepts/binary-search/"}}');var i=s(4848),t=s(8453);const l={},a="Basic Data Structures",c={},o=[{value:"1. Arrays",id:"1-arrays",level:2},{value:"2. Strings",id:"2-strings",level:2},{value:"3. Linked Lists",id:"3-linked-lists",level:2},{value:"4. Stacks",id:"4-stacks",level:2},{value:"5. Queues",id:"5-queues",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basic-data-structures",children:"Basic Data Structures"})}),"\n",(0,i.jsx)(n.p,{children:"This section provides an in-depth look at the foundational data structures essential for programming and problem-solving. Here, you'll find detailed descriptions, operations, examples, and practice questions for each structure."}),"\n",(0,i.jsx)(n.h2,{id:"1-arrays",children:"1. Arrays"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Arrays are collections of elements stored at contiguous memory locations. They allow random access and efficient traversal."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common Operations:"})," Insertion, deletion, traversal, searching, updating"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"arr = [1, 2, 3, 4, 5]\r\nprint(arr[2])  # Output: 3\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practice Questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Find the maximum element in an array"}),"\n",(0,i.jsx)(n.li,{children:"Reverse an array"}),"\n",(0,i.jsx)(n.li,{children:"Remove duplicates from a sorted array"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-strings",children:"2. Strings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Strings are sequences of characters. They are widely used for text processing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common Operations:"})," Concatenation, substring, searching, comparison"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'s = "hello"\r\nprint(s.upper())  # Output: HELLO\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practice Questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check if a string is a palindrome"}),"\n",(0,i.jsx)(n.li,{children:"Find the first non-repeating character"}),"\n",(0,i.jsx)(n.li,{children:"Implement strstr (substring search)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-linked-lists",children:"3. Linked Lists"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Linked lists are linear data structures where elements (nodes) point to the next node. Useful for dynamic memory allocation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common Operations:"})," Insertion, deletion, traversal, reversal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practice Questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reverse a linked list"}),"\n",(0,i.jsx)(n.li,{children:"Detect a cycle in a linked list"}),"\n",(0,i.jsx)(n.li,{children:"Merge two sorted linked lists"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-stacks",children:"4. Stacks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Stacks are LIFO (Last-In-First-Out) data structures. Useful for undo operations, parsing, and backtracking."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common Operations:"})," Push, pop, peek, isEmpty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"stack = []\r\nstack.append(1)\r\nstack.pop()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practice Questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement a stack using arrays"}),"\n",(0,i.jsx)(n.li,{children:"Evaluate a postfix expression"}),"\n",(0,i.jsx)(n.li,{children:"Check for balanced parentheses"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-queues",children:"5. Queues"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Queues are FIFO (First-In-First-Out) data structures. Used in scheduling, buffering, and BFS algorithms."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common Operations:"})," Enqueue, dequeue, front, isEmpty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from collections import deque\r\nqueue = deque()\r\nqueue.append(1)\r\nqueue.popleft()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practice Questions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement a queue using stacks"}),"\n",(0,i.jsx)(n.li,{children:"Circular queue implementation"}),"\n",(0,i.jsx)(n.li,{children:"Generate binary numbers from 1 to N"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Explore each section for more details, code samples, and additional practice problems!"})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);