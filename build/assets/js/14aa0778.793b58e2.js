"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6488],{3561:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dsa-key-pattern/K-way-Merge","title":"K-way Merge","description":"Description","source":"@site/docs/dsa-key-pattern/15-K-way-Merge.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/K-way-Merge","permalink":"/docs/dsa-key-pattern/K-way-Merge","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Top \'K\' Elements","permalink":"/docs/dsa-key-pattern/Top-K-Elements"},"next":{"title":"Two Heaps","permalink":"/docs/dsa-key-pattern/Two-Heaps"}}');var t=s(4848),l=s(8453);const r={},a="K-way Merge",o={},d=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Algorithm Steps",id:"algorithm-steps",level:2},{value:"Key Insight",id:"key-insight",level:2},{value:"Variations",id:"variations",level:2}];function c(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"k-way-merge",children:"K-way Merge"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"The K-way merge technique uses a heap to efficiently merge multiple sorted lists or arrays."}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(n log k) where n is total elements and k is number of lists"}),"\n",(0,t.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(k)"}),"\n",(0,t.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Min Heap"}),": Use min heap to always get smallest element across all lists"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Iterator Tracking"}),": Keep track of current position in each list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sorted Input"}),": Leverage the fact that input lists are sorted"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Merge Process"}),": Repeatedly extract min and add next element from same list"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Find K Pairs with Smallest Sums"}),"\n",(0,t.jsx)(n.li,{children:"Kth Smallest Element in a Sorted Matrix"}),"\n",(0,t.jsx)(n.li,{children:"Merge K Sorted Lists"}),"\n",(0,t.jsx)(n.li,{children:"Smallest Range Covering Elements from K Lists"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Merging multiple sorted arrays/lists"}),"\n",(0,t.jsx)(n.li,{children:"Finding smallest/largest across multiple sorted sources"}),"\n",(0,t.jsx)(n.li,{children:"Problems involving K sorted inputs"}),"\n",(0,t.jsx)(n.li,{children:"Range queries across sorted lists"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Merge K sorted lists/arrays"'}),"\n",(0,t.jsx)(n.li,{children:'"Find Kth smallest across K sorted lists"'}),"\n",(0,t.jsx)(n.li,{children:'"Smallest range covering all K lists"'}),"\n",(0,t.jsx)(n.li,{children:'"K pairs with smallest/largest sums"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialize Heap"}),": Add first element from each list to min heap"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extract Minimum"}),": Pop smallest element from heap"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add to Result"}),": Include popped element in final result"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add Next"}),": If popped element's list has more elements, add next element to heap"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repeat"}),": Continue until heap is empty"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-insight",children:"Key Insight"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"At any point, heap contains at most K elements"}),"\n",(0,t.jsx)(n.li,{children:"Always process smallest available element"}),"\n",(0,t.jsx)(n.li,{children:"Maintains sorted order in output"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"variations",children:"Variations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Merge All"}),": Combine all lists into single sorted list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Find Kth"}),": Stop after finding Kth smallest element"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Range Problems"}),": Use max heap alongside min heap for range queries"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);