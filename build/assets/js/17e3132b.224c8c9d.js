"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6303],{8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>o});var r=n(6540);const s={},t=r.createContext(s);function l(e){const i=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:i},e.children)}},9992:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dsa-key-pattern/Prefix-Sum","title":"Prefix Sum","description":"Description","source":"@site/docs/dsa-key-pattern/03-Prefix-Sum.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Prefix-Sum","permalink":"/docs/dsa-key-pattern/Prefix-Sum","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overlapping Intervals","permalink":"/docs/dsa-key-pattern/Overlapping-Intervals"},"next":{"title":"Sliding Window","permalink":"/docs/dsa-key-pattern/Sliding-Window"}}');var s=n(4848),t=n(8453);const l={},o="Prefix Sum",a={},c=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Implementation Tips",id:"implementation-tips",level:2}];function d(e){const i={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"prefix-sum",children:"Prefix Sum"})}),"\n",(0,s.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(i.p,{children:"Prefix Sums/Products are techniques that store cumulative sums or products up to each index, allowing for quick subarray range queries."}),"\n",(0,s.jsx)(i.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsx)(i.p,{children:"O(n) for preprocessing, O(1) for queries"}),"\n",(0,s.jsx)(i.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsx)(i.p,{children:"O(n)"}),"\n",(0,s.jsx)(i.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Cumulative Sum"}),": Build array where prefix[i] = sum of elements from 0 to i"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Range Queries"}),": Sum from i to j = prefix[j] - prefix[i-1]"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Prefix Product"}),": Similar concept but with multiplication"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"2D Prefix Sum"}),": Extension to 2D arrays for rectangle sum queries"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Find the middle index in array"}),"\n",(0,s.jsx)(i.li,{children:"Product of array except self"}),"\n",(0,s.jsx)(i.li,{children:"Maximum product subarray"}),"\n",(0,s.jsx)(i.li,{children:"Number of ways to split array"}),"\n",(0,s.jsx)(i.li,{children:"Range Sum Query 2D"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Multiple range sum/product queries on static array"}),"\n",(0,s.jsx)(i.li,{children:"Problems asking for subarray sums efficiently"}),"\n",(0,s.jsx)(i.li,{children:"When you need to find equilibrium points"}),"\n",(0,s.jsx)(i.li,{children:"2D matrix range sum queries"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:'"Find sum of subarray from index i to j"'}),"\n",(0,s.jsx)(i.li,{children:'"Multiple queries for range sums"'}),"\n",(0,s.jsx)(i.li,{children:'"Find pivot index where left sum equals right sum"'}),"\n",(0,s.jsx)(i.li,{children:'"Calculate rectangle sum in 2D matrix"'}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"implementation-tips",children:"Implementation Tips"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"1D Prefix Sum"}),": prefix[i] = prefix[i-1] + arr[i]"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Range Sum"}),": sum(i,j) = prefix[j] - prefix[i-1] (handle i=0 case)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"2D Prefix Sum"}),": prefix[i][j] = prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] + matrix[i][j]"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);