"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3286],{4934:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"dsa-concepts/binary-search/README","title":"Binary Search","description":"Overview","source":"@site/docs/dsa-concepts/binary-search/README.md","sourceDirName":"dsa-concepts/binary-search","slug":"/dsa-concepts/binary-search/","permalink":"/docs/dsa-concepts/binary-search/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basic Data Structures","permalink":"/docs/dsa-concepts/basic-data-structures/"},"next":{"title":"README","permalink":"/docs/dsa-concepts/bit-manipulation/"}}');var s=n(4848),t=n(8453);const l={},a="Binary Search",c={},o=[{value:"Overview",id:"overview",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Basic Implementation",id:"basic-implementation",level:2},{value:"Common Variations",id:"common-variations",level:2},{value:"1. <strong>Find First Occurrence</strong>",id:"1-find-first-occurrence",level:3},{value:"2. <strong>Find Last Occurrence</strong>",id:"2-find-last-occurrence",level:3},{value:"Common Problems",id:"common-problems",level:2},{value:"When to Use Binary Search",id:"when-to-use-binary-search",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"binary-search",children:"Binary Search"})}),"\n",(0,s.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(r.p,{children:"Binary Search is a highly efficient searching algorithm that works on sorted arrays/lists by repeatedly dividing the search interval in half. It's one of the most fundamental algorithms in computer science."}),"\n",(0,s.jsx)(r.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Compare"})," the target value with the middle element"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"If equal"})," - return the index"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"If target is less"})," - search the left half"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"If target is greater"})," - search the right half"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Repeat"})," until found or search space is empty"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Best Case"}),": O(1) - target is the middle element"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Average Case"}),": O(log n)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Worst Case"}),": O(log n)"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Iterative"}),": O(1)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Recursive"}),": O(log n) - due to call stack"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Array must be sorted"})," (ascending or descending order)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Random access"})," to elements (arrays work better than linked lists)"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"function binarySearch(arr, target) {\r\n    let left = 0;\r\n    let right = arr.length - 1;\r\n    \r\n    while (left <= right) {\r\n        const mid = Math.floor((left + right) / 2);\r\n        \r\n        if (arr[mid] === target) {\r\n            return mid;\r\n        } else if (arr[mid] < target) {\r\n            left = mid + 1;\r\n        } else {\r\n            right = mid - 1;\r\n        }\r\n    }\r\n    \r\n    return -1; // Target not found\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"common-variations",children:"Common Variations"}),"\n",(0,s.jsxs)(r.h3,{id:"1-find-first-occurrence",children:["1. ",(0,s.jsx)(r.strong,{children:"Find First Occurrence"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"function findFirst(arr, target) {\r\n    let left = 0, right = arr.length - 1;\r\n    let result = -1;\r\n    \r\n    while (left <= right) {\r\n        const mid = Math.floor((left + right) / 2);\r\n        \r\n        if (arr[mid] === target) {\r\n            result = mid;\r\n            right = mid - 1; // Continue searching left\r\n        } else if (arr[mid] < target) {\r\n            left = mid + 1;\r\n        } else {\r\n            right = mid - 1;\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"2-find-last-occurrence",children:["2. ",(0,s.jsx)(r.strong,{children:"Find Last Occurrence"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"function findLast(arr, target) {\r\n    let left = 0, right = arr.length - 1;\r\n    let result = -1;\r\n    \r\n    while (left <= right) {\r\n        const mid = Math.floor((left + right) / 2);\r\n        \r\n        if (arr[mid] === target) {\r\n            result = mid;\r\n            left = mid + 1; // Continue searching right\r\n        } else if (arr[mid] < target) {\r\n            left = mid + 1;\r\n        } else {\r\n            right = mid - 1;\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"common-problems",children:"Common Problems"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Search Insert Position"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Find Peak Element"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Search in Rotated Sorted Array"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Find Minimum in Rotated Sorted Array"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Median of Two Sorted Arrays"})}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"when-to-use-binary-search",children:"When to Use Binary Search"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"\u2705 Searching in sorted arrays"}),"\n",(0,s.jsx)(r.li,{children:"\u2705 Finding insertion points"}),"\n",(0,s.jsx)(r.li,{children:"\u2705 Range queries on sorted data"}),"\n",(0,s.jsx)(r.li,{children:"\u2705 Optimization problems (minimize/maximize)"}),"\n",(0,s.jsx)(r.li,{children:"\u2705 When you need O(log n) search time"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\u274c ",(0,s.jsx)(r.strong,{children:"Forgetting array is sorted requirement"})]}),"\n",(0,s.jsxs)(r.li,{children:["\u274c ",(0,s.jsx)(r.strong,{children:"Integer overflow in mid calculation"})," (use ",(0,s.jsx)(r.code,{children:"left + (right - left) / 2"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:["\u274c ",(0,s.jsx)(r.strong,{children:"Off-by-one errors"})," in boundary conditions"]}),"\n",(0,s.jsxs)(r.li,{children:["\u274c ",(0,s.jsx)(r.strong,{children:"Infinite loops"})," due to incorrect boundary updates"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/discuss/post/1322500/5-variations-of-binary-search-a-self-not-lkqp/",children:"LeetCode: 5 Variations of Binary Search"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/discuss/post/691825/binary-search-for-beginners-problems-pat-0hei/",children:"LeetCode: Binary Search for Beginners"})}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"Binary Search is a fundamental algorithm that every programmer should master. Its O(log n) time complexity makes it invaluable for efficient searching and optimization problems."})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>a});var i=n(6540);const s={},t=i.createContext(s);function l(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);