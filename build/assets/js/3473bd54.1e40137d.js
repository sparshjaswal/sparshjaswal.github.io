"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4889],{6265:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"design-pattern/behavioral/command","title":"Command Pattern \ud83c\udfae","description":"Definition: The Command pattern turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request\'s execution, and support undoable operations.","source":"@site/docs/design-pattern/behavioral/command.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/command","permalink":"/docs/design-pattern/behavioral/command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Chain of Responsibility Pattern \u26d3\ufe0f","permalink":"/docs/design-pattern/behavioral/chain-of-responsibility"},"next":{"title":"Iterator Pattern \ud83d\udd04","permalink":"/docs/design-pattern/behavioral/iterator"}}');var o=r(4848),s=r(8453);const i={},a="Command Pattern \ud83c\udfae",d={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Code Example",id:"-code-example",level:2},{value:"Basic Implementation",id:"basic-implementation",level:3},{value:"\ud83c\udf1f Real-World Examples",id:"-real-world-examples",level:2},{value:"1. Remote Control System",id:"1-remote-control-system",level:3},{value:"2. Macro Commands",id:"2-macro-commands",level:3},{value:"3. Database Transaction System",id:"3-database-transaction-system",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Variations",id:"-variations",level:2},{value:"1. <strong>Smart Commands (with Receiver)</strong>",id:"1-smart-commands-with-receiver",level:3},{value:"2. <strong>Simple Commands (without Receiver)</strong>",id:"2-simple-commands-without-receiver",level:3},{value:"3. <strong>Parameterized Commands</strong>",id:"3-parameterized-commands",level:3},{value:"4. <strong>Async Commands</strong>",id:"4-async-commands",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"command-pattern-",children:"Command Pattern \ud83c\udfae"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Definition"}),": The Command pattern turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request's execution, and support undoable operations."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(e.p,{children:"Encapsulate a request as an object, allowing you to parameterize clients with different requests, queue operations, log requests, and support undo operations."}),"\n",(0,o.jsx)(e.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(e.p,{children:"Imagine you're developing a text editor with various operations like copy, paste, undo, and redo. Without the Command pattern, you might end up with:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Tight coupling between UI elements and business logic"}),"\n",(0,o.jsx)(e.li,{children:"Difficulty implementing undo/redo functionality"}),"\n",(0,o.jsx)(e.li,{children:"Hard-to-maintain code when adding new operations"}),"\n",(0,o.jsx)(e.li,{children:"No way to queue, log, or delay operations"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:'For example, a "Save" button directly calling a save method makes it impossible to:'}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Undo the save operation"}),"\n",(0,o.jsx)(e.li,{children:"Queue multiple save operations"}),"\n",(0,o.jsx)(e.li,{children:"Log when saves occurred"}),"\n",(0,o.jsx)(e.li,{children:"Implement macro commands"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(e.p,{children:"The Command pattern suggests encapsulating requests as objects. This provides several benefits:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Decoupling"}),": Sender (button) doesn't need to know about the receiver (document)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Queuing"}),": Commands can be stored and executed later"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Undo Support"}),": Commands can reverse their operations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Logging"}),": Commands can be logged for auditing"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Macro Commands"}),": Combine multiple commands"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Invoker\r\n\u251c\u2500\u2500 command: Command\r\n\u2514\u2500\u2500 executeCommand()\r\n\r\nCommand (interface)\r\n\u251c\u2500\u2500 execute()\r\n\u2514\u2500\u2500 undo()\r\n\r\nConcreteCommand implements Command\r\n\u251c\u2500\u2500 receiver: Receiver\r\n\u251c\u2500\u2500 state\r\n\u251c\u2500\u2500 execute()\r\n\u2514\u2500\u2500 undo()\r\n\r\nReceiver\r\n\u251c\u2500\u2500 action()\r\n\u2514\u2500\u2500 getState()\r\n\r\nMacroCommand implements Command\r\n\u251c\u2500\u2500 commands: Command[]\r\n\u251c\u2500\u2500 addCommand(cmd)\r\n\u251c\u2500\u2500 execute()\r\n\u2514\u2500\u2500 undo()\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-code-example",children:"\ud83d\udcbb Code Example"}),"\n",(0,o.jsx)(e.h3,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Command interface\r\nclass Command {\r\n  execute() {\r\n    throw new Error("execute() method must be implemented");\r\n  }\r\n  \r\n  undo() {\r\n    throw new Error("undo() method must be implemented");\r\n  }\r\n}\r\n\r\n// Receiver - knows how to perform operations\r\nclass Document {\r\n  constructor() {\r\n    this.content = "";\r\n  }\r\n  \r\n  write(text) {\r\n    this.content += text;\r\n  }\r\n  \r\n  delete(length) {\r\n    const deleted = this.content.slice(-length);\r\n    this.content = this.content.slice(0, -length);\r\n    return deleted;\r\n  }\r\n  \r\n  getContent() {\r\n    return this.content;\r\n  }\r\n}\r\n\r\n// Concrete Commands\r\nclass WriteCommand extends Command {\r\n  constructor(document, text) {\r\n    super();\r\n    this.document = document;\r\n    this.text = text;\r\n  }\r\n  \r\n  execute() {\r\n    this.document.write(this.text);\r\n    console.log(`\u270d\ufe0f Wrote: "${this.text}"`);\r\n  }\r\n  \r\n  undo() {\r\n    this.document.delete(this.text.length);\r\n    console.log(`\u23ea Undid write: "${this.text}"`);\r\n  }\r\n}\r\n\r\nclass DeleteCommand extends Command {\r\n  constructor(document, length) {\r\n    super();\r\n    this.document = document;\r\n    this.length = length;\r\n    this.deletedText = "";\r\n  }\r\n  \r\n  execute() {\r\n    this.deletedText = this.document.delete(this.length);\r\n    console.log(`\ud83d\uddd1\ufe0f Deleted: "${this.deletedText}"`);\r\n  }\r\n  \r\n  undo() {\r\n    this.document.write(this.deletedText);\r\n    console.log(`\u23ea Restored: "${this.deletedText}"`);\r\n  }\r\n}\r\n\r\n// Invoker - manages commands\r\nclass TextEditor {\r\n  constructor(document) {\r\n    this.document = document;\r\n    this.history = [];\r\n    this.currentPosition = -1;\r\n  }\r\n  \r\n  executeCommand(command) {\r\n    // Remove any commands after current position\r\n    this.history = this.history.slice(0, this.currentPosition + 1);\r\n    \r\n    // Execute and store command\r\n    command.execute();\r\n    this.history.push(command);\r\n    this.currentPosition++;\r\n  }\r\n  \r\n  undo() {\r\n    if (this.currentPosition >= 0) {\r\n      const command = this.history[this.currentPosition];\r\n      command.undo();\r\n      this.currentPosition--;\r\n    } else {\r\n      console.log("\u274c Nothing to undo");\r\n    }\r\n  }\r\n  \r\n  redo() {\r\n    if (this.currentPosition < this.history.length - 1) {\r\n      this.currentPosition++;\r\n      const command = this.history[this.currentPosition];\r\n      command.execute();\r\n    } else {\r\n      console.log("\u274c Nothing to redo");\r\n    }\r\n  }\r\n  \r\n  showContent() {\r\n    console.log(`\ud83d\udcc4 Content: "${this.document.getContent()}"`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconst doc = new Document();\r\nconst editor = new TextEditor(doc);\r\n\r\neditor.executeCommand(new WriteCommand(doc, "Hello "));\r\neditor.executeCommand(new WriteCommand(doc, "World!"));\r\neditor.showContent(); // "Hello World!"\r\n\r\neditor.undo(); // Removes "World!"\r\neditor.showContent(); // "Hello "\r\n\r\neditor.redo(); // Adds "World!" back\r\neditor.showContent(); // "Hello World!"\n'})}),"\n",(0,o.jsx)(e.h2,{id:"-real-world-examples",children:"\ud83c\udf1f Real-World Examples"}),"\n",(0,o.jsx)(e.h3,{id:"1-remote-control-system",children:"1. Remote Control System"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Receivers\r\nclass Light {\r\n  constructor(location) {\r\n    this.location = location;\r\n    this.isOn = false;\r\n  }\r\n  \r\n  turnOn() {\r\n    this.isOn = true;\r\n    console.log(`\ud83d\udca1 ${this.location} light is ON`);\r\n  }\r\n  \r\n  turnOff() {\r\n    this.isOn = false;\r\n    console.log(`\ud83d\udca1 ${this.location} light is OFF`);\r\n  }\r\n}\r\n\r\nclass Fan {\r\n  constructor(location) {\r\n    this.location = location;\r\n    this.speed = 0;\r\n  }\r\n  \r\n  setSpeed(speed) {\r\n    const prevSpeed = this.speed;\r\n    this.speed = speed;\r\n    console.log(`\ud83c\udf00 ${this.location} fan speed: ${prevSpeed} \u2192 ${speed}`);\r\n    return prevSpeed;\r\n  }\r\n  \r\n  turnOff() {\r\n    return this.setSpeed(0);\r\n  }\r\n}\r\n\r\nclass Stereo {\r\n  constructor(location) {\r\n    this.location = location;\r\n    this.isOn = false;\r\n    this.volume = 0;\r\n    this.station = 0;\r\n  }\r\n  \r\n  turnOn() {\r\n    this.isOn = true;\r\n    console.log(`\ud83c\udfb5 ${this.location} stereo is ON`);\r\n  }\r\n  \r\n  turnOff() {\r\n    this.isOn = false;\r\n    console.log(`\ud83c\udfb5 ${this.location} stereo is OFF`);\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    const prevVolume = this.volume;\r\n    this.volume = volume;\r\n    console.log(`\ud83d\udd0a Volume: ${prevVolume} \u2192 ${volume}`);\r\n    return prevVolume;\r\n  }\r\n}\r\n\r\n// Commands\r\nclass LightOnCommand extends Command {\r\n  constructor(light) {\r\n    super();\r\n    this.light = light;\r\n  }\r\n  \r\n  execute() {\r\n    this.light.turnOn();\r\n  }\r\n  \r\n  undo() {\r\n    this.light.turnOff();\r\n  }\r\n}\r\n\r\nclass LightOffCommand extends Command {\r\n  constructor(light) {\r\n    super();\r\n    this.light = light;\r\n  }\r\n  \r\n  execute() {\r\n    this.light.turnOff();\r\n  }\r\n  \r\n  undo() {\r\n    this.light.turnOn();\r\n  }\r\n}\r\n\r\nclass FanHighCommand extends Command {\r\n  constructor(fan) {\r\n    super();\r\n    this.fan = fan;\r\n    this.prevSpeed = 0;\r\n  }\r\n  \r\n  execute() {\r\n    this.prevSpeed = this.fan.setSpeed(3);\r\n  }\r\n  \r\n  undo() {\r\n    this.fan.setSpeed(this.prevSpeed);\r\n  }\r\n}\r\n\r\nclass StereoOnWithVolumeCommand extends Command {\r\n  constructor(stereo, volume) {\r\n    super();\r\n    this.stereo = stereo;\r\n    this.volume = volume;\r\n    this.wasOn = false;\r\n    this.prevVolume = 0;\r\n  }\r\n  \r\n  execute() {\r\n    this.wasOn = this.stereo.isOn;\r\n    this.prevVolume = this.stereo.volume;\r\n    \r\n    this.stereo.turnOn();\r\n    this.stereo.setVolume(this.volume);\r\n  }\r\n  \r\n  undo() {\r\n    this.stereo.setVolume(this.prevVolume);\r\n    if (!this.wasOn) {\r\n      this.stereo.turnOff();\r\n    }\r\n  }\r\n}\r\n\r\n// Null Object Pattern for empty slots\r\nclass NoCommand extends Command {\r\n  execute() {}\r\n  undo() {}\r\n}\r\n\r\n// Remote Control (Invoker)\r\nclass RemoteControl {\r\n  constructor() {\r\n    this.onCommands = new Array(7).fill(new NoCommand());\r\n    this.offCommands = new Array(7).fill(new NoCommand());\r\n    this.undoCommand = new NoCommand();\r\n  }\r\n  \r\n  setCommand(slot, onCommand, offCommand) {\r\n    this.onCommands[slot] = onCommand;\r\n    this.offCommands[slot] = offCommand;\r\n  }\r\n  \r\n  onButtonPressed(slot) {\r\n    this.onCommands[slot].execute();\r\n    this.undoCommand = this.onCommands[slot];\r\n  }\r\n  \r\n  offButtonPressed(slot) {\r\n    this.offCommands[slot].execute();\r\n    this.undoCommand = this.offCommands[slot];\r\n  }\r\n  \r\n  undoButtonPressed() {\r\n    this.undoCommand.undo();\r\n  }\r\n  \r\n  toString() {\r\n    let result = "\\n--- Remote Control ---\\n";\r\n    for (let i = 0; i < this.onCommands.length; i++) {\r\n      result += `[slot ${i}] ${this.onCommands[i].constructor.name} | ${this.offCommands[i].constructor.name}\\n`;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n// Usage\r\nconst livingRoomLight = new Light("Living Room");\r\nconst kitchenLight = new Light("Kitchen");\r\nconst fan = new Fan("Living Room");\r\nconst stereo = new Stereo("Living Room");\r\n\r\nconst remote = new RemoteControl();\r\n\r\n// Set up commands\r\nremote.setCommand(0, \r\n  new LightOnCommand(livingRoomLight), \r\n  new LightOffCommand(livingRoomLight)\r\n);\r\n\r\nremote.setCommand(1, \r\n  new LightOnCommand(kitchenLight), \r\n  new LightOffCommand(kitchenLight)\r\n);\r\n\r\nremote.setCommand(2, \r\n  new FanHighCommand(fan), \r\n  new NoCommand()\r\n);\r\n\r\nremote.setCommand(3, \r\n  new StereoOnWithVolumeCommand(stereo, 11), \r\n  new LightOffCommand(stereo)\r\n);\r\n\r\n// Test the remote\r\nconsole.log(remote.toString());\r\n\r\nremote.onButtonPressed(0);  // Living room light on\r\nremote.offButtonPressed(0); // Living room light off\r\nremote.undoButtonPressed(); // Undo (light back on)\r\n\r\nremote.onButtonPressed(2);  // Fan high\r\nremote.undoButtonPressed(); // Fan back to previous speed\r\n\r\nremote.onButtonPressed(3);  // Stereo on with volume\r\nremote.undoButtonPressed(); // Undo stereo command\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-macro-commands",children:"2. Macro Commands"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'class MacroCommand extends Command {\r\n  constructor(commands = []) {\r\n    super();\r\n    this.commands = commands;\r\n  }\r\n  \r\n  addCommand(command) {\r\n    this.commands.push(command);\r\n  }\r\n  \r\n  execute() {\r\n    console.log("\ud83c\udfac Executing macro command...");\r\n    this.commands.forEach(command => command.execute());\r\n  }\r\n  \r\n  undo() {\r\n    console.log("\u23ea Undoing macro command...");\r\n    // Undo in reverse order\r\n    for (let i = this.commands.length - 1; i >= 0; i--) {\r\n      this.commands[i].undo();\r\n    }\r\n  }\r\n}\r\n\r\n// Create a "Party Mode" macro\r\nconst partyMode = new MacroCommand([\r\n  new LightOnCommand(livingRoomLight),\r\n  new LightOnCommand(kitchenLight),\r\n  new StereoOnWithVolumeCommand(stereo, 15),\r\n  new FanHighCommand(fan)\r\n]);\r\n\r\n// Set up party mode on remote\r\nremote.setCommand(6, partyMode, new MacroCommand([]));\r\n\r\nconsole.log("\\n\ud83c\udf89 Activating Party Mode!");\r\nremote.onButtonPressed(6); // Execute all party commands\r\n\r\nconsole.log("\\n\ud83d\ude34 Undoing Party Mode...");\r\nremote.undoButtonPressed(); // Undo all party commands\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-database-transaction-system",children:"3. Database Transaction System"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'class DatabaseConnection {\r\n  constructor() {\r\n    this.data = new Map();\r\n    this.isConnected = false;\r\n  }\r\n  \r\n  connect() {\r\n    this.isConnected = true;\r\n    console.log("\ud83d\udd0c Database connected");\r\n  }\r\n  \r\n  disconnect() {\r\n    this.isConnected = false;\r\n    console.log("\ud83d\udd0c Database disconnected");\r\n  }\r\n  \r\n  insert(key, value) {\r\n    if (!this.isConnected) throw new Error("Database not connected");\r\n    this.data.set(key, value);\r\n    console.log(`\u2795 Inserted: ${key} = ${value}`);\r\n  }\r\n  \r\n  update(key, value) {\r\n    if (!this.isConnected) throw new Error("Database not connected");\r\n    const oldValue = this.data.get(key);\r\n    this.data.set(key, value);\r\n    console.log(`\ud83d\udd04 Updated: ${key} = ${value} (was ${oldValue})`);\r\n    return oldValue;\r\n  }\r\n  \r\n  delete(key) {\r\n    if (!this.isConnected) throw new Error("Database not connected");\r\n    const value = this.data.get(key);\r\n    this.data.delete(key);\r\n    console.log(`\u274c Deleted: ${key}`);\r\n    return value;\r\n  }\r\n  \r\n  get(key) {\r\n    return this.data.get(key);\r\n  }\r\n}\r\n\r\nclass InsertCommand extends Command {\r\n  constructor(db, key, value) {\r\n    super();\r\n    this.db = db;\r\n    this.key = key;\r\n    this.value = value;\r\n  }\r\n  \r\n  execute() {\r\n    this.db.insert(this.key, this.value);\r\n  }\r\n  \r\n  undo() {\r\n    this.db.delete(this.key);\r\n  }\r\n}\r\n\r\nclass UpdateCommand extends Command {\r\n  constructor(db, key, value) {\r\n    super();\r\n    this.db = db;\r\n    this.key = key;\r\n    this.value = value;\r\n    this.oldValue = null;\r\n  }\r\n  \r\n  execute() {\r\n    this.oldValue = this.db.update(this.key, this.value);\r\n  }\r\n  \r\n  undo() {\r\n    if (this.oldValue !== null) {\r\n      this.db.update(this.key, this.oldValue);\r\n    }\r\n  }\r\n}\r\n\r\nclass DeleteCommand extends Command {\r\n  constructor(db, key) {\r\n    super();\r\n    this.db = db;\r\n    this.key = key;\r\n    this.deletedValue = null;\r\n  }\r\n  \r\n  execute() {\r\n    this.deletedValue = this.db.delete(this.key);\r\n  }\r\n  \r\n  undo() {\r\n    if (this.deletedValue !== null) {\r\n      this.db.insert(this.key, this.deletedValue);\r\n    }\r\n  }\r\n}\r\n\r\nclass Transaction {\r\n  constructor(db) {\r\n    this.db = db;\r\n    this.commands = [];\r\n  }\r\n  \r\n  addCommand(command) {\r\n    this.commands.push(command);\r\n  }\r\n  \r\n  execute() {\r\n    console.log("\\n\ud83d\udcbe Starting transaction...");\r\n    try {\r\n      this.commands.forEach(command => command.execute());\r\n      console.log("\u2705 Transaction completed successfully");\r\n    } catch (error) {\r\n      console.log("\u274c Transaction failed, rolling back...");\r\n      this.rollback();\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  rollback() {\r\n    console.log("\ud83d\udd04 Rolling back transaction...");\r\n    for (let i = this.commands.length - 1; i >= 0; i--) {\r\n      try {\r\n        this.commands[i].undo();\r\n      } catch (error) {\r\n        console.log(`\u26a0\ufe0f Error during rollback: ${error.message}`);\r\n      }\r\n    }\r\n    console.log("\u2705 Rollback completed");\r\n  }\r\n}\r\n\r\n// Usage\r\nconst db = new DatabaseConnection();\r\ndb.connect();\r\n\r\nconst transaction = new Transaction(db);\r\ntransaction.addCommand(new InsertCommand(db, "user1", "John Doe"));\r\ntransaction.addCommand(new InsertCommand(db, "user2", "Jane Smith"));\r\ntransaction.addCommand(new UpdateCommand(db, "user1", "John Smith"));\r\n\r\ntransaction.execute();\r\n\r\n// Simulate transaction rollback\r\nconsole.log("\\n\ud83d\udd04 Testing rollback...");\r\ntransaction.rollback();\n'})}),"\n",(0,o.jsx)(e.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Decoupling"}),": Decouples objects that invoke operations from objects that perform them"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Undo Support"}),": Easy to implement undo/redo functionality"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Macro Commands"}),": You can combine simple commands into complex ones"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Queuing"}),": Commands can be queued, logged, or executed later"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Remote Execution"}),": Commands can be sent over a network"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Logging"}),": All operations can be logged for auditing"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Code Complexity"}),": Can make code more complex with many small classes"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Memory Usage"}),": Each command is a separate object, increasing memory usage"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance"}),": Extra layer of abstraction can impact performance"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Over-Engineering"}),": May be overkill for simple operations"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Undo/Redo Operations"}),": When you need to implement undo and redo functionality"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Queuing Operations"}),": When you need to queue, schedule, or log operations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Remote Procedure Calls"}),": When you need to send commands over a network"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Macro Operations"}),": When you need to combine multiple operations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Transactional Systems"}),": When you need to support transaction rollback"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"GUI Applications"}),": For decoupling UI elements from business logic"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-variations",children:"\ud83d\udd04 Variations"}),"\n",(0,o.jsxs)(e.h3,{id:"1-smart-commands-with-receiver",children:["1. ",(0,o.jsx)(e.strong,{children:"Smart Commands (with Receiver)"})]}),"\n",(0,o.jsx)(e.p,{children:"Commands that know how to perform operations themselves."}),"\n",(0,o.jsxs)(e.h3,{id:"2-simple-commands-without-receiver",children:["2. ",(0,o.jsx)(e.strong,{children:"Simple Commands (without Receiver)"})]}),"\n",(0,o.jsx)(e.p,{children:"Commands that delegate work to receivers."}),"\n",(0,o.jsxs)(e.h3,{id:"3-parameterized-commands",children:["3. ",(0,o.jsx)(e.strong,{children:"Parameterized Commands"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"class ParameterizedCommand extends Command {\r\n  constructor(receiver, method, params) {\r\n    super();\r\n    this.receiver = receiver;\r\n    this.method = method;\r\n    this.params = params;\r\n  }\r\n  \r\n  execute() {\r\n    return this.receiver[this.method](...this.params);\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(e.h3,{id:"4-async-commands",children:["4. ",(0,o.jsx)(e.strong,{children:"Async Commands"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"class AsyncCommand extends Command {\r\n  async execute() {\r\n    // Async operation\r\n    await this.performAsyncOperation();\r\n  }\r\n  \r\n  async undo() {\r\n    // Async undo operation\r\n    await this.undoAsyncOperation();\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Strategy"}),": Both encapsulate algorithms, but Command focuses on requests while Strategy focuses on algorithms"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Memento"}),": Often used together for implementing undo functionality"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Composite"}),": Macro commands are often implemented using the Composite pattern"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Observer"}),": Commands can notify observers when executed"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://refactoring.guru/design-patterns/command",children:"Command Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://www.dofactory.com/javascript/design-patterns/command",children:"JavaScript Command Pattern"})}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function i(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);