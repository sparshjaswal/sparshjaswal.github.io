"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4328],{6603:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/behavioral/mediator","title":"Mediator Pattern \ud83c\udfad","description":"Definition: The Mediator pattern defines how a set of objects interact with each other. It promotes loose coupling by keeping objects from referring to each other explicitly, and lets you vary their interaction independently.","source":"@site/docs/design-pattern/behavioral/mediator.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/mediator","permalink":"/docs/design-pattern/behavioral/mediator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Iterator Pattern \ud83d\udd04","permalink":"/docs/design-pattern/behavioral/iterator"},"next":{"title":"Memento Pattern \ud83d\udcbe","permalink":"/docs/design-pattern/behavioral/memento"}}');var o=r(4848),s=r(8453);const a={},i="Mediator Pattern \ud83c\udfad",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Chat Room Mediator",id:"chat-room-mediator",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Air Traffic Control System",id:"air-traffic-control-system",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Mediator Variations",id:"-mediator-variations",level:2},{value:"1. <strong>Observer-based Mediator</strong>",id:"1-observer-based-mediator",level:3},{value:"2. <strong>Command-based Mediator</strong>",id:"2-command-based-mediator",level:3},{value:"3. <strong>State-based Mediator</strong>",id:"3-state-based-mediator",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mediator-pattern-",children:"Mediator Pattern \ud83c\udfad"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": The Mediator pattern defines how a set of objects interact with each other. It promotes loose coupling by keeping objects from referring to each other explicitly, and lets you vary their interaction independently."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(n.p,{children:"Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently."}),"\n",(0,o.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(n.p,{children:"When objects in a system communicate directly with each other, they become tightly coupled:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complex Dependencies"}),": Objects have many direct references to other objects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Difficult Maintenance"}),": Changes to one object affect many others"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reusability Issues"}),": Objects are hard to reuse in different contexts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Communication Chaos"}),": Many-to-many relationships create complexity"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Think of an air traffic control system - without a central controller, pilots would need to communicate directly with every other plane, creating chaos."}),"\n",(0,o.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(n.p,{children:"The Mediator pattern suggests creating a mediator object that handles all communications between objects. Objects don't communicate directly but through the mediator, which coordinates their interactions."}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Mediator (interface)\r\n\u2514\u2500\u2500 +mediate(sender: Component, event: string): void\r\n\r\nConcreteMediator implements Mediator\r\n\u251c\u2500\u2500 -componentA: ComponentA\r\n\u251c\u2500\u2500 -componentB: ComponentB\r\n\u251c\u2500\u2500 +mediate(sender: Component, event: string): void\r\n\r\nComponent (abstract)\r\n\u251c\u2500\u2500 +mediator: Mediator\r\n\u251c\u2500\u2500 +notify(event: string): void\r\n\r\nComponentA, ComponentB extend Component\r\n\u251c\u2500\u2500 +doA(), +doB() \u2192 notify("eventA"), notify("eventB")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,o.jsx)(n.h3,{id:"chat-room-mediator",children:"Chat Room Mediator"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Mediator interface\r\nclass ChatMediator {\r\n  sendMessage(message, user) {\r\n    throw new Error("sendMessage() method must be implemented");\r\n  }\r\n  \r\n  addUser(user) {\r\n    throw new Error("addUser() method must be implemented");\r\n  }\r\n  \r\n  removeUser(user) {\r\n    throw new Error("removeUser() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Mediator - Chat Room\r\nclass ChatRoom extends ChatMediator {\r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n    this.users = [];\r\n    this.messageHistory = [];\r\n    this.created = new Date();\r\n  }\r\n  \r\n  addUser(user) {\r\n    this.users.push(user);\r\n    user.setChatRoom(this);\r\n    console.log(`\ud83d\udc65 ${user.name} joined the chat room: ${this.name}`);\r\n    \r\n    // Notify other users\r\n    this.broadcastSystemMessage(`${user.name} joined the chat`);\r\n    \r\n    // Show recent messages to new user\r\n    if (this.messageHistory.length > 0) {\r\n      console.log(`\ud83d\udcdc Showing recent messages to ${user.name}:`);\r\n      this.messageHistory.slice(-3).forEach(msg => {\r\n        console.log(`   ${msg.timestamp.toLocaleTimeString()} ${msg.sender}: ${msg.text}`);\r\n      });\r\n    }\r\n  }\r\n  \r\n  removeUser(user) {\r\n    const index = this.users.indexOf(user);\r\n    if (index !== -1) {\r\n      this.users.splice(index, 1);\r\n      console.log(`\ud83d\udc4b ${user.name} left the chat room: ${this.name}`);\r\n      \r\n      // Notify other users\r\n      this.broadcastSystemMessage(`${user.name} left the chat`);\r\n    }\r\n  }\r\n  \r\n  sendMessage(message, sender) {\r\n    console.log(`\ud83d\udcac [${this.name}] ${sender.name}: ${message}`);\r\n    \r\n    // Store message in history\r\n    this.messageHistory.push({\r\n      sender: sender.name,\r\n      text: message,\r\n      timestamp: new Date()\r\n    });\r\n    \r\n    // Deliver to all other users\r\n    this.users.forEach(user => {\r\n      if (user !== sender) {\r\n        user.receiveMessage(message, sender.name);\r\n      }\r\n    });\r\n  }\r\n  \r\n  broadcastSystemMessage(message) {\r\n    console.log(`\ud83d\udd14 [${this.name}] System: ${message}`);\r\n    \r\n    this.users.forEach(user => {\r\n      user.receiveSystemMessage(message);\r\n    });\r\n  }\r\n  \r\n  getUserCount() {\r\n    return this.users.length;\r\n  }\r\n  \r\n  getStats() {\r\n    console.log(`\ud83d\udcca Chat Room "${this.name}" Stats:`);\r\n    console.log(`   Active Users: ${this.users.length}`);\r\n    console.log(`   Total Messages: ${this.messageHistory.length}`);\r\n    console.log(`   Created: ${this.created.toLocaleString()}`);\r\n    if (this.users.length > 0) {\r\n      console.log(`   Users: ${this.users.map(u => u.name).join(\', \')}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Abstract User component\r\nclass ChatUser {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.chatRoom = null;\r\n    this.messagesSent = 0;\r\n    this.messagesReceived = 0;\r\n  }\r\n  \r\n  setChatRoom(chatRoom) {\r\n    this.chatRoom = chatRoom;\r\n  }\r\n  \r\n  sendMessage(message) {\r\n    if (!this.chatRoom) {\r\n      console.log(`\u274c ${this.name}: Not connected to any chat room`);\r\n      return;\r\n    }\r\n    \r\n    this.messagesSent++;\r\n    this.chatRoom.sendMessage(message, this);\r\n  }\r\n  \r\n  receiveMessage(message, senderName) {\r\n    this.messagesReceived++;\r\n    console.log(`\ud83d\udcf1 ${this.name} received: "${message}" from ${senderName}`);\r\n  }\r\n  \r\n  receiveSystemMessage(message) {\r\n    console.log(`\ud83d\udd14 ${this.name} received system message: ${message}`);\r\n  }\r\n  \r\n  leaveChatRoom() {\r\n    if (this.chatRoom) {\r\n      this.chatRoom.removeUser(this);\r\n      this.chatRoom = null;\r\n    }\r\n  }\r\n  \r\n  getStats() {\r\n    console.log(`\ud83d\udcc8 ${this.name}\'s Stats:`);\r\n    console.log(`   Messages Sent: ${this.messagesSent}`);\r\n    console.log(`   Messages Received: ${this.messagesReceived}`);\r\n    console.log(`   Current Room: ${this.chatRoom ? this.chatRoom.name : \'None\'}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Chat Room Mediator Demo ===\\n");\r\n\r\nconsole.log("Creating chat room and users:");\r\nconsole.log("-".repeat(30));\r\n\r\n// Create chat room (mediator)\r\nconst generalChat = new ChatRoom("General Chat");\r\n\r\n// Create users (components)\r\nconst alice = new ChatUser("Alice");\r\nconst bob = new ChatUser("Bob");\r\nconst charlie = new ChatUser("Charlie");\r\n\r\nconsole.log("\\nUsers joining chat room:");\r\nconsole.log("-".repeat(25));\r\n\r\n// Users join chat room\r\ngeneralChat.addUser(alice);\r\ngeneralChat.addUser(bob);\r\ngeneralChat.addUser(charlie);\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Chat conversation:");\r\nconsole.log("-".repeat(17));\r\n\r\n// Users send messages through the mediator\r\nalice.sendMessage("Hello everyone! \ud83d\udc4b");\r\nbob.sendMessage("Hi Alice! How are you?");\r\ncharlie.sendMessage("Good morning! \u2600\ufe0f");\r\nalice.sendMessage("I\'m doing great, thanks for asking!");\r\nbob.sendMessage("Anyone up for lunch later?");\r\ncharlie.sendMessage("Count me in! \ud83c\udf55");\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("User leaving chat:");\r\nconsole.log("-".repeat(18));\r\n\r\nbob.leaveChatRoom();\r\n\r\nconsole.log("\\nContinuing conversation:");\r\nconsole.log("-".repeat(25));\r\n\r\nalice.sendMessage("Bob left us \ud83d\ude22");\r\ncharlie.sendMessage("We\'ll catch up with him later");\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Statistics:");\r\nconsole.log("-".repeat(11));\r\n\r\ngeneralChat.getStats();\r\nconsole.log();\r\nalice.getStats();\r\nconsole.log();\r\ncharlie.getStats();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,o.jsx)(n.h3,{id:"air-traffic-control-system",children:"Air Traffic Control System"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Mediator interface\r\nclass AirTrafficControl {\r\n  requestLanding(aircraft) {\r\n    throw new Error("requestLanding() method must be implemented");\r\n  }\r\n  \r\n  requestTakeoff(aircraft) {\r\n    throw new Error("requestTakeoff() method must be implemented");\r\n  }\r\n  \r\n  registerAircraft(aircraft) {\r\n    throw new Error("registerAircraft() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Mediator - Airport Control Tower\r\nclass ControlTower extends AirTrafficControl {\r\n  constructor(airportCode) {\r\n    super();\r\n    this.airportCode = airportCode;\r\n    this.aircrafts = [];\r\n    this.runwayStatus = {\r\n      runway1: \'free\', // \'free\', \'occupied\', \'maintenance\'\r\n      runway2: \'free\'\r\n    };\r\n    this.landingQueue = [];\r\n    this.takeoffQueue = [];\r\n    this.weatherConditions = \'clear\'; // \'clear\', \'storm\', \'fog\'\r\n  }\r\n  \r\n  registerAircraft(aircraft) {\r\n    this.aircrafts.push(aircraft);\r\n    aircraft.setControlTower(this);\r\n    console.log(`\u2708\ufe0f Aircraft ${aircraft.callSign} registered with ${this.airportCode} Control Tower`);\r\n    \r\n    // Send weather update\r\n    this.sendWeatherUpdate(aircraft);\r\n  }\r\n  \r\n  requestLanding(aircraft) {\r\n    console.log(`\ud83d\udce1 ${this.airportCode} Tower: Landing request from ${aircraft.callSign}`);\r\n    \r\n    // Check weather conditions\r\n    if (this.weatherConditions !== \'clear\') {\r\n      console.log(`\u274c ${this.airportCode} Tower: Landing denied for ${aircraft.callSign} - Weather: ${this.weatherConditions}`);\r\n      aircraft.receiveMessage(`Landing denied - weather conditions: ${this.weatherConditions}`);\r\n      return false;\r\n    }\r\n    \r\n    // Check runway availability\r\n    const availableRunway = this.getAvailableRunway();\r\n    if (availableRunway) {\r\n      this.assignRunwayForLanding(aircraft, availableRunway);\r\n      return true;\r\n    } else {\r\n      // Add to queue\r\n      this.landingQueue.push(aircraft);\r\n      console.log(`\u23f3 ${this.airportCode} Tower: ${aircraft.callSign} added to landing queue (position ${this.landingQueue.length})`);\r\n      aircraft.receiveMessage(`Added to landing queue, position ${this.landingQueue.length}`);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  requestTakeoff(aircraft) {\r\n    console.log(`\ud83d\udce1 ${this.airportCode} Tower: Takeoff request from ${aircraft.callSign}`);\r\n    \r\n    // Check weather conditions\r\n    if (this.weatherConditions !== \'clear\') {\r\n      console.log(`\u274c ${this.airportCode} Tower: Takeoff denied for ${aircraft.callSign} - Weather: ${this.weatherConditions}`);\r\n      aircraft.receiveMessage(`Takeoff denied - weather conditions: ${this.weatherConditions}`);\r\n      return false;\r\n    }\r\n    \r\n    // Check runway availability\r\n    const availableRunway = this.getAvailableRunway();\r\n    if (availableRunway) {\r\n      this.assignRunwayForTakeoff(aircraft, availableRunway);\r\n      return true;\r\n    } else {\r\n      // Add to queue\r\n      this.takeoffQueue.push(aircraft);\r\n      console.log(`\u23f3 ${this.airportCode} Tower: ${aircraft.callSign} added to takeoff queue (position ${this.takeoffQueue.length})`);\r\n      aircraft.receiveMessage(`Added to takeoff queue, position ${this.takeoffQueue.length}`);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  getAvailableRunway() {\r\n    for (const [runway, status] of Object.entries(this.runwayStatus)) {\r\n      if (status === \'free\') {\r\n        return runway;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  assignRunwayForLanding(aircraft, runway) {\r\n    this.runwayStatus[runway] = \'occupied\';\r\n    console.log(`\ud83d\udeec ${this.airportCode} Tower: ${aircraft.callSign} cleared for landing on ${runway}`);\r\n    aircraft.receiveMessage(`Cleared for landing on ${runway}`);\r\n    \r\n    // Simulate landing time\r\n    setTimeout(() => {\r\n      this.completeLanding(aircraft, runway);\r\n    }, 2000);\r\n  }\r\n  \r\n  assignRunwayForTakeoff(aircraft, runway) {\r\n    this.runwayStatus[runway] = \'occupied\';\r\n    console.log(`\ud83d\udeeb ${this.airportCode} Tower: ${aircraft.callSign} cleared for takeoff on ${runway}`);\r\n    aircraft.receiveMessage(`Cleared for takeoff on ${runway}`);\r\n    \r\n    // Simulate takeoff time\r\n    setTimeout(() => {\r\n      this.completeTakeoff(aircraft, runway);\r\n    }, 1500);\r\n  }\r\n  \r\n  completeLanding(aircraft, runway) {\r\n    this.runwayStatus[runway] = \'free\';\r\n    console.log(`\u2705 ${this.airportCode} Tower: ${aircraft.callSign} landed successfully on ${runway}`);\r\n    aircraft.receiveMessage(`Landing complete on ${runway}. Taxi to gate.`);\r\n    \r\n    // Process next in queue\r\n    this.processQueues();\r\n  }\r\n  \r\n  completeTakeoff(aircraft, runway) {\r\n    this.runwayStatus[runway] = \'free\';\r\n    console.log(`\u2705 ${this.airportCode} Tower: ${aircraft.callSign} departed successfully from ${runway}`);\r\n    aircraft.receiveMessage(`Takeoff complete. Contact departure control.`);\r\n    \r\n    // Process next in queue\r\n    this.processQueues();\r\n  }\r\n  \r\n  processQueues() {\r\n    // Process landing queue first (priority)\r\n    if (this.landingQueue.length > 0) {\r\n      const nextAircraft = this.landingQueue.shift();\r\n      this.requestLanding(nextAircraft);\r\n    } else if (this.takeoffQueue.length > 0) {\r\n      const nextAircraft = this.takeoffQueue.shift();\r\n      this.requestTakeoff(nextAircraft);\r\n    }\r\n  }\r\n  \r\n  sendWeatherUpdate(aircraft) {\r\n    aircraft.receiveMessage(`Current weather: ${this.weatherConditions}`);\r\n  }\r\n  \r\n  setWeatherConditions(conditions) {\r\n    const oldConditions = this.weatherConditions;\r\n    this.weatherConditions = conditions;\r\n    console.log(`\ud83c\udf24\ufe0f ${this.airportCode} Tower: Weather changed from ${oldConditions} to ${conditions}`);\r\n    \r\n    // Broadcast to all aircraft\r\n    this.aircrafts.forEach(aircraft => {\r\n      aircraft.receiveMessage(`Weather update: ${conditions}`);\r\n    });\r\n  }\r\n  \r\n  getStatus() {\r\n    console.log(`\ud83d\udcca ${this.airportCode} Control Tower Status:`);\r\n    console.log(`   Weather: ${this.weatherConditions}`);\r\n    console.log(`   Runway 1: ${this.runwayStatus.runway1}`);\r\n    console.log(`   Runway 2: ${this.runwayStatus.runway2}`);\r\n    console.log(`   Landing Queue: ${this.landingQueue.length} aircraft`);\r\n    console.log(`   Takeoff Queue: ${this.takeoffQueue.length} aircraft`);\r\n    console.log(`   Registered Aircraft: ${this.aircrafts.length}`);\r\n  }\r\n}\r\n\r\n// Abstract Aircraft component\r\nclass Aircraft {\r\n  constructor(callSign, type, airline) {\r\n    this.callSign = callSign;\r\n    this.type = type;\r\n    this.airline = airline;\r\n    this.controlTower = null;\r\n    this.status = \'in-flight\'; // \'in-flight\', \'landed\', \'taxiing\', \'departed\'\r\n    this.messages = [];\r\n  }\r\n  \r\n  setControlTower(controlTower) {\r\n    this.controlTower = controlTower;\r\n  }\r\n  \r\n  requestLanding() {\r\n    if (!this.controlTower) {\r\n      console.log(`\u274c ${this.callSign}: No control tower assigned`);\r\n      return;\r\n    }\r\n    \r\n    console.log(`\ud83d\udcde ${this.callSign}: Requesting landing permission`);\r\n    return this.controlTower.requestLanding(this);\r\n  }\r\n  \r\n  requestTakeoff() {\r\n    if (!this.controlTower) {\r\n      console.log(`\u274c ${this.callSign}: No control tower assigned`);\r\n      return;\r\n    }\r\n    \r\n    console.log(`\ud83d\udcde ${this.callSign}: Requesting takeoff permission`);\r\n    return this.controlTower.requestTakeoff(this);\r\n  }\r\n  \r\n  receiveMessage(message) {\r\n    this.messages.push({\r\n      message,\r\n      timestamp: new Date()\r\n    });\r\n    console.log(`\ud83d\udcfb ${this.callSign} received: "${message}"`);\r\n  }\r\n  \r\n  getInfo() {\r\n    console.log(`\u2708\ufe0f Aircraft Info:`);\r\n    console.log(`   Call Sign: ${this.callSign}`);\r\n    console.log(`   Type: ${this.type}`);\r\n    console.log(`   Airline: ${this.airline}`);\r\n    console.log(`   Status: ${this.status}`);\r\n    console.log(`   Messages Received: ${this.messages.length}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Air Traffic Control Mediator Demo ===\\n");\r\n\r\nconsole.log("Setting up airport control tower:");\r\nconsole.log("-".repeat(35));\r\n\r\nconst jfkTower = new ControlTower("JFK");\r\n\r\nconsole.log("Aircraft requesting services:");\r\nconsole.log("-".repeat(30));\r\n\r\n// Create aircraft\r\nconst flight123 = new Aircraft("AA123", "Boeing 737", "American Airlines");\r\nconst flight456 = new Aircraft("UA456", "Airbus A320", "United Airlines");\r\nconst flight789 = new Aircraft("DL789", "Boeing 777", "Delta Airlines");\r\n\r\n// Register aircraft with control tower\r\njfkTower.registerAircraft(flight123);\r\njfkTower.registerAircraft(flight456);\r\njfkTower.registerAircraft(flight789);\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Flight operations:");\r\nconsole.log("-".repeat(18));\r\n\r\n// Multiple aircraft requesting landing\r\nflight123.requestLanding();\r\nflight456.requestLanding();\r\nflight789.requestLanding();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\n// Wait a bit and check status\r\nsetTimeout(() => {\r\n  console.log("\\nCurrent airport status:");\r\n  console.log("-".repeat(23));\r\n  jfkTower.getStatus();\r\n  \r\n  console.log("\\nWeather change:");\r\n  console.log("-".repeat(15));\r\n  jfkTower.setWeatherConditions(\'fog\');\r\n  \r\n  // New aircraft trying to land in bad weather\r\n  const emergencyFlight = new Aircraft("EM911", "Boeing 767", "Emergency Medical");\r\n  jfkTower.registerAircraft(emergencyFlight);\r\n  emergencyFlight.requestLanding();\r\n  \r\n}, 3000);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Loose Coupling"}),": Components don't reference each other directly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Centralized Control"}),": Complex interactions are managed in one place"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reusability"}),": Components can be reused in different mediator contexts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easy Maintenance"}),": Changes to interaction logic are localized"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single Responsibility"}),": Each component focuses on its core functionality"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"God Object"}),": Mediator can become overly complex"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Additional layer of indirection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single Point of Failure"}),": If mediator fails, all communication fails"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complexity Transfer"}),": Moves complexity from components to mediator"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complex Communication"}),": Many objects communicate in complex ways"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tight Coupling"}),": Objects are tightly coupled through communication"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Centralized Logic"}),": Need to centralize complex interaction logic"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reusable Components"}),": Want to make components reusable across contexts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Communication Protocol"}),": Need to change communication protocol dynamically"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-mediator-variations",children:"\ud83d\udd04 Mediator Variations"}),"\n",(0,o.jsxs)(n.h3,{id:"1-observer-based-mediator",children:["1. ",(0,o.jsx)(n.strong,{children:"Observer-based Mediator"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class ObserverMediator extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.components = [];\r\n  }\r\n  \r\n  register(component) {\r\n    this.components.push(component);\r\n    component.setMediator(this);\r\n  }\r\n  \r\n  mediate(event, data, sender) {\r\n    this.emit(event, data, sender);\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"2-command-based-mediator",children:["2. ",(0,o.jsx)(n.strong,{children:"Command-based Mediator"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class CommandMediator {\r\n  constructor() {\r\n    this.commandHandlers = new Map();\r\n  }\r\n  \r\n  registerHandler(command, handler) {\r\n    this.commandHandlers.set(command, handler);\r\n  }\r\n  \r\n  execute(command, data) {\r\n    const handler = this.commandHandlers.get(command);\r\n    if (handler) {\r\n      return handler(data);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"3-state-based-mediator",children:["3. ",(0,o.jsx)(n.strong,{children:"State-based Mediator"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class StatefulMediator {\r\n  constructor() {\r\n    this.state = {};\r\n    this.components = [];\r\n  }\r\n  \r\n  updateState(key, value) {\r\n    this.state[key] = value;\r\n    this.notifyComponents(key, value);\r\n  }\r\n  \r\n  notifyComponents(key, value) {\r\n    this.components.forEach(component => {\r\n      component.onStateChange(key, value);\r\n    });\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Observer"}),": Mediator can use Observer pattern for event broadcasting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Command"}),": Commands can be used to encapsulate requests sent through mediator"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Facade"}),": Both provide simplified interface, but Mediator coordinates while Facade simplifies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chain of Responsibility"}),": Both handle requests, but Chain passes requests while Mediator coordinates"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/mediator",children:"Mediator Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",children:"MVC Pattern and Mediator"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);