"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3650],{5354:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dsa-concepts/problem-solving-patterns/README","title":"Problem Solving Patterns","description":"Problem-solving patterns are essential techniques that can help simplify complex problems and make them easier to solve. Understanding these patterns can significantly enhance your ability to tackle a wide range of algorithmic challenges. Below are some common problem-solving patterns, along with detailed descriptions, examples, and practice questions from LeetCode and Codeforces.","source":"@site/docs/dsa-concepts/problem-solving-patterns/README.md","sourceDirName":"dsa-concepts/problem-solving-patterns","slug":"/dsa-concepts/problem-solving-patterns/","permalink":"/docs/dsa-concepts/problem-solving-patterns/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"README","permalink":"/docs/dsa-concepts/linked-list/"},"next":{"title":"Data Structures and Algorithms Pattern Guide","permalink":"/docs/dsa-key-pattern/"}}');var r=n(4848),s=n(8453);const o={},l="Problem Solving Patterns",a={},c=[{value:"1. Sliding Window",id:"1-sliding-window",level:2},{value:"Description",id:"description",level:3},{value:"Example",id:"example",level:3},{value:"Practice Questions",id:"practice-questions",level:3},{value:"2. Two Pointers",id:"2-two-pointers",level:2},{value:"Description",id:"description-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Practice Questions",id:"practice-questions-1",level:3},{value:"3. Fast &amp; Slow Pointers (Tortoise and Hare)",id:"3-fast--slow-pointers-tortoise-and-hare",level:2},{value:"Description",id:"description-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Practice Questions",id:"practice-questions-2",level:3},{value:"4. Monotonic Stack/Queue",id:"4-monotonic-stackqueue",level:2},{value:"Description",id:"description-3",level:3},{value:"Example",id:"example-3",level:3},{value:"Practice Questions",id:"practice-questions-3",level:3},{value:"5. Topological Sort",id:"5-topological-sort",level:2},{value:"Description",id:"description-4",level:3},{value:"Example",id:"example-4",level:3},{value:"Practice Questions",id:"practice-questions-4",level:3},{value:"6. BFS/DFS Templates",id:"6-bfsdfs-templates",level:2},{value:"Description",id:"description-5",level:3},{value:"Example",id:"example-5",level:3},{value:"Practice Questions",id:"practice-questions-5",level:3}];function d(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"problem-solving-patterns",children:"Problem Solving Patterns"})}),"\n",(0,r.jsx)(i.p,{children:"Problem-solving patterns are essential techniques that can help simplify complex problems and make them easier to solve. Understanding these patterns can significantly enhance your ability to tackle a wide range of algorithmic challenges. Below are some common problem-solving patterns, along with detailed descriptions, examples, and practice questions from LeetCode and Codeforces."}),"\n",(0,r.jsx)(i.h2,{id:"1-sliding-window",children:"1. Sliding Window"}),"\n",(0,r.jsx)(i.h3,{id:"description",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"The sliding window pattern is used to solve problems involving contiguous subarrays or substrings. It involves maintaining a window that can expand and contract based on certain conditions."}),"\n",(0,r.jsx)(i.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Given a string, find the length of the longest substring without repeating characters."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",children:"Longest Substring Without Repeating Characters"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 1234A - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/1234/A",children:"Substring Removal"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"2-two-pointers",children:"2. Two Pointers"}),"\n",(0,r.jsx)(i.h3,{id:"description-1",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"The two pointers technique involves using two pointers to traverse a data structure, often from opposite ends. This pattern is useful for problems involving sorted arrays or linked lists."}),"\n",(0,r.jsx)(i.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Given a sorted array, find two numbers that add up to a specific target."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions-1",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",children:"Two Sum II - Input Array Is Sorted"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 800A - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/800/A",children:"Watermelon"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"3-fast--slow-pointers-tortoise-and-hare",children:"3. Fast & Slow Pointers (Tortoise and Hare)"}),"\n",(0,r.jsx)(i.h3,{id:"description-2",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"This pattern is used to detect cycles in a sequence or linked list. One pointer moves at twice the speed of the other, allowing for cycle detection."}),"\n",(0,r.jsx)(i.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Determine if a linked list has a cycle."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions-2",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/linked-list-cycle/",children:"Linked List Cycle"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 1234B - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/1234/B",children:"Cycle Detection"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"4-monotonic-stackqueue",children:"4. Monotonic Stack/Queue"}),"\n",(0,r.jsx)(i.h3,{id:"description-3",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"Monotonic stacks and queues are used to maintain elements in a specific order, allowing for efficient retrieval of the maximum or minimum element."}),"\n",(0,r.jsx)(i.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Given an array, find the next greater element for each element."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions-3",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/next-greater-element-i/",children:"Next Greater Element I"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 1234C - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/1234/C",children:"Next Greater Element"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"5-topological-sort",children:"5. Topological Sort"}),"\n",(0,r.jsx)(i.h3,{id:"description-4",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"Topological sorting is used for ordering the vertices of a directed acyclic graph (DAG) such that for every directed edge UV from vertex U to vertex V, U comes before V in the ordering."}),"\n",(0,r.jsx)(i.h3,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Given a list of courses and their prerequisites, determine the order in which to take the courses."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions-4",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/course-schedule/",children:"Course Schedule"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 1234D - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/1234/D",children:"Course Order"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"6-bfsdfs-templates",children:"6. BFS/DFS Templates"}),"\n",(0,r.jsx)(i.h3,{id:"description-5",children:"Description"}),"\n",(0,r.jsx)(i.p,{children:"Breadth-First Search (BFS) and Depth-First Search (DFS) are fundamental algorithms for traversing or searching tree or graph data structures."}),"\n",(0,r.jsx)(i.h3,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Given a binary tree, perform a level order traversal (BFS) or a pre-order traversal (DFS)."}),"\n",(0,r.jsx)(i.h3,{id:"practice-questions-5",children:"Practice Questions"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["LeetCode: ",(0,r.jsx)(i.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/",children:"Binary Tree Level Order Traversal"})]}),"\n",(0,r.jsxs)(i.li,{children:["Codeforces: Problem 1234E - ",(0,r.jsx)(i.a,{href:"https://codeforces.com/problemset/problem/1234/E",children:"Tree Traversal"})]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.p,{children:"By mastering these problem-solving patterns, you will be better equipped to approach a variety of algorithmic challenges effectively. Regular practice with these patterns will enhance your problem-solving skills and prepare you for coding interviews and competitive programming."})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>l});var t=n(6540);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);