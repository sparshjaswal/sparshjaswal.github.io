"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2932],{7561:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"design-pattern/behavioral/state","title":"State Pattern \ud83c\udf9b\ufe0f","description":"Definition: The State pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.","source":"@site/docs/design-pattern/behavioral/state.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/state","permalink":"/docs/design-pattern/behavioral/state","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Observer Pattern \ud83d\udd14","permalink":"/docs/design-pattern/behavioral/observer"},"next":{"title":"Strategy Pattern \ud83c\udfaf","permalink":"/docs/design-pattern/behavioral/strategy"}}');var s=t(4848),o=t(8453);const a={},i="State Pattern \ud83c\udf9b\ufe0f",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Media Player States",id:"media-player-states",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Document Workflow System",id:"document-workflow-system",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 State Pattern Variations",id:"-state-pattern-variations",level:2},{value:"1. <strong>Singleton States</strong>",id:"1-singleton-states",level:3},{value:"2. <strong>State with Data</strong>",id:"2-state-with-data",level:3},{value:"3. <strong>Hierarchical States</strong>",id:"3-hierarchical-states",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"state-pattern-\ufe0f",children:"State Pattern \ud83c\udf9b\ufe0f"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": The State pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,s.jsx)(n.p,{children:"Allow an object to alter its behavior when its internal state changes. The object will appear to change its class. This pattern encapsulates state-specific behavior and makes state transitions explicit."}),"\n",(0,s.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,s.jsx)(n.p,{children:"Objects often need to change their behavior based on their internal state:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Conditionals"}),": Many if/else or switch statements based on state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State-Dependent Behavior"}),": Different behavior for the same method in different states"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Transitions"}),": Complex rules for when states can change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintenance Issues"}),": Adding new states requires modifying existing code"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Conditional logic becomes unwieldy and error-prone as the number of states grows."}),"\n",(0,s.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,s.jsx)(n.p,{children:"The State pattern suggests creating separate classes for each state and extracting all state-specific behavior into these classes. The original object (context) maintains a reference to one of the state objects and delegates state-specific work to it."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Context\r\n\u251c\u2500\u2500 -state: State\r\n\u251c\u2500\u2500 +setState(state: State): void\r\n\u251c\u2500\u2500 +request(): void \u2192 state.handle(this)\r\n\r\nState (abstract)\r\n\u2514\u2500\u2500 +handle(context: Context): void\r\n\r\nConcreteStateA, ConcreteStateB implement State\r\n\u251c\u2500\u2500 +handle(context: Context): void \u2192 do work + context.setState(new ConcreteStateB())\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,s.jsx)(n.h3,{id:"media-player-states",children:"Media Player States"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Abstract State\r\nclass PlayerState {\r\n  constructor() {\r\n    if (this.constructor === PlayerState) {\r\n      throw new Error("PlayerState is abstract and cannot be instantiated");\r\n    }\r\n  }\r\n  \r\n  play(player) {\r\n    throw new Error("play() method must be implemented");\r\n  }\r\n  \r\n  pause(player) {\r\n    throw new Error("pause() method must be implemented");\r\n  }\r\n  \r\n  stop(player) {\r\n    throw new Error("stop() method must be implemented");\r\n  }\r\n  \r\n  next(player) {\r\n    throw new Error("next() method must be implemented");\r\n  }\r\n  \r\n  previous(player) {\r\n    throw new Error("previous() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete State - Stopped\r\nclass StoppedState extends PlayerState {\r\n  play(player) {\r\n    console.log("\u25b6\ufe0f Starting playback from beginning");\r\n    player.startPlayback();\r\n    player.setState(new PlayingState());\r\n  }\r\n  \r\n  pause(player) {\r\n    console.log("\u23f8\ufe0f Cannot pause - player is stopped");\r\n  }\r\n  \r\n  stop(player) {\r\n    console.log("\u23f9\ufe0f Already stopped");\r\n  }\r\n  \r\n  next(player) {\r\n    console.log("\u23ed\ufe0f Skipping to next track");\r\n    player.nextTrack();\r\n    // Stay in stopped state\r\n  }\r\n  \r\n  previous(player) {\r\n    console.log("\u23ee\ufe0f Going to previous track");\r\n    player.previousTrack();\r\n    // Stay in stopped state\r\n  }\r\n  \r\n  toString() {\r\n    return "Stopped";\r\n  }\r\n}\r\n\r\n// Concrete State - Playing\r\nclass PlayingState extends PlayerState {\r\n  play(player) {\r\n    console.log("\u25b6\ufe0f Already playing");\r\n  }\r\n  \r\n  pause(player) {\r\n    console.log("\u23f8\ufe0f Pausing playback");\r\n    player.pausePlayback();\r\n    player.setState(new PausedState());\r\n  }\r\n  \r\n  stop(player) {\r\n    console.log("\u23f9\ufe0f Stopping playback");\r\n    player.stopPlayback();\r\n    player.setState(new StoppedState());\r\n  }\r\n  \r\n  next(player) {\r\n    console.log("\u23ed\ufe0f Skipping to next track");\r\n    player.nextTrack();\r\n    player.startPlayback();\r\n    // Stay in playing state\r\n  }\r\n  \r\n  previous(player) {\r\n    console.log("\u23ee\ufe0f Going to previous track");\r\n    player.previousTrack();\r\n    player.startPlayback();\r\n    // Stay in playing state\r\n  }\r\n  \r\n  toString() {\r\n    return "Playing";\r\n  }\r\n}\r\n\r\n// Concrete State - Paused\r\nclass PausedState extends PlayerState {\r\n  play(player) {\r\n    console.log("\u25b6\ufe0f Resuming playback");\r\n    player.resumePlayback();\r\n    player.setState(new PlayingState());\r\n  }\r\n  \r\n  pause(player) {\r\n    console.log("\u23f8\ufe0f Already paused");\r\n  }\r\n  \r\n  stop(player) {\r\n    console.log("\u23f9\ufe0f Stopping playback");\r\n    player.stopPlayback();\r\n    player.setState(new StoppedState());\r\n  }\r\n  \r\n  next(player) {\r\n    console.log("\u23ed\ufe0f Skipping to next track");\r\n    player.nextTrack();\r\n    player.setState(new StoppedState());\r\n  }\r\n  \r\n  previous(player) {\r\n    console.log("\u23ee\ufe0f Going to previous track");\r\n    player.previousTrack();\r\n    player.setState(new StoppedState());\r\n  }\r\n  \r\n  toString() {\r\n    return "Paused";\r\n  }\r\n}\r\n\r\n// Context - Media Player\r\nclass MediaPlayer {\r\n  constructor() {\r\n    this.state = new StoppedState();\r\n    this.currentTrack = 0;\r\n    this.playlist = [\r\n      "Song 1 - Artist A",\r\n      "Song 2 - Artist B", \r\n      "Song 3 - Artist C",\r\n      "Song 4 - Artist D"\r\n    ];\r\n    this.volume = 50;\r\n    this.playbackPosition = 0;\r\n  }\r\n  \r\n  setState(state) {\r\n    console.log(`\ud83d\udd04 State changed: ${this.state} \u2192 ${state}`);\r\n    this.state = state;\r\n  }\r\n  \r\n  // Delegate to current state\r\n  play() {\r\n    console.log(`\\n\ud83d\udcf1 User pressed PLAY`);\r\n    this.state.play(this);\r\n  }\r\n  \r\n  pause() {\r\n    console.log(`\\n\ud83d\udcf1 User pressed PAUSE`);\r\n    this.state.pause(this);\r\n  }\r\n  \r\n  stop() {\r\n    console.log(`\\n\ud83d\udcf1 User pressed STOP`);\r\n    this.state.stop(this);\r\n  }\r\n  \r\n  next() {\r\n    console.log(`\\n\ud83d\udcf1 User pressed NEXT`);\r\n    this.state.next(this);\r\n  }\r\n  \r\n  previous() {\r\n    console.log(`\\n\ud83d\udcf1 User pressed PREVIOUS`);\r\n    this.state.previous(this);\r\n  }\r\n  \r\n  // Internal methods called by states\r\n  startPlayback() {\r\n    console.log(`\ud83c\udfb5 Playing: ${this.getCurrentTrack()}`);\r\n    this.playbackPosition = 0;\r\n  }\r\n  \r\n  pausePlayback() {\r\n    console.log(`\u23f8\ufe0f Playback paused at ${this.formatPosition(this.playbackPosition)}`);\r\n  }\r\n  \r\n  resumePlayback() {\r\n    console.log(`\u25b6\ufe0f Resuming: ${this.getCurrentTrack()} from ${this.formatPosition(this.playbackPosition)}`);\r\n  }\r\n  \r\n  stopPlayback() {\r\n    console.log(`\u23f9\ufe0f Playback stopped`);\r\n    this.playbackPosition = 0;\r\n  }\r\n  \r\n  nextTrack() {\r\n    if (this.currentTrack < this.playlist.length - 1) {\r\n      this.currentTrack++;\r\n    } else {\r\n      this.currentTrack = 0; // Loop to beginning\r\n    }\r\n    console.log(`\u23ed\ufe0f Current track: ${this.getCurrentTrack()}`);\r\n    this.playbackPosition = 0;\r\n  }\r\n  \r\n  previousTrack() {\r\n    if (this.currentTrack > 0) {\r\n      this.currentTrack--;\r\n    } else {\r\n      this.currentTrack = this.playlist.length - 1; // Loop to end\r\n    }\r\n    console.log(`\u23ee\ufe0f Current track: ${this.getCurrentTrack()}`);\r\n    this.playbackPosition = 0;\r\n  }\r\n  \r\n  getCurrentTrack() {\r\n    return this.playlist[this.currentTrack];\r\n  }\r\n  \r\n  formatPosition(position) {\r\n    const minutes = Math.floor(position / 60);\r\n    const seconds = position % 60;\r\n    return `${minutes}:${seconds.toString().padStart(2, \'0\')}`;\r\n  }\r\n  \r\n  getStatus() {\r\n    console.log(`\ud83d\udcca Media Player Status:`);\r\n    console.log(`   State: ${this.state}`);\r\n    console.log(`   Track: ${this.currentTrack + 1}/${this.playlist.length} - ${this.getCurrentTrack()}`);\r\n    console.log(`   Volume: ${this.volume}%`);\r\n    console.log(`   Position: ${this.formatPosition(this.playbackPosition)}`);\r\n  }\r\n  \r\n  setVolume(volume) {\r\n    this.volume = Math.max(0, Math.min(100, volume));\r\n    console.log(`\ud83d\udd0a Volume set to ${this.volume}%`);\r\n  }\r\n  \r\n  // Simulate playback progress\r\n  simulatePlayback(seconds) {\r\n    if (this.state instanceof PlayingState) {\r\n      this.playbackPosition += seconds;\r\n      console.log(`\u23f1\ufe0f Playback progress: ${this.formatPosition(this.playbackPosition)}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Media Player State Demo ===\\n");\r\n\r\nconsole.log("Creating media player:");\r\nconsole.log("-".repeat(23));\r\n\r\nconst player = new MediaPlayer();\r\nplayer.getStatus();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Testing player controls:");\r\nconsole.log("-".repeat(25));\r\n\r\n// Test various state transitions\r\nplayer.play();      // Stopped \u2192 Playing\r\nplayer.getStatus();\r\n\r\nplayer.pause();     // Playing \u2192 Paused\r\nplayer.getStatus();\r\n\r\nplayer.play();      // Paused \u2192 Playing\r\nplayer.getStatus();\r\n\r\nplayer.next();      // Stay in Playing, change track\r\nplayer.getStatus();\r\n\r\nplayer.stop();      // Playing \u2192 Stopped\r\nplayer.getStatus();\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("Testing invalid operations:");\r\nconsole.log("-".repeat(28));\r\n\r\nplayer.pause();     // Already stopped\r\nplayer.stop();      // Already stopped\r\nplayer.next();      // Change track while stopped\r\nplayer.play();      // Start playing new track\r\nplayer.play();      // Already playing\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Simulating user session:");\r\nconsole.log("-".repeat(25));\r\n\r\nplayer.stop();\r\nplayer.previous();  // Go to previous track\r\nplayer.play();      // Start playing\r\nplayer.simulatePlayback(30); // Simulate 30 seconds\r\nplayer.pause();     // Pause\r\nplayer.simulatePlayback(10); // Try to progress while paused (won\'t work)\r\nplayer.play();      // Resume\r\nplayer.simulatePlayback(20); // Continue playback\r\nplayer.next();      // Next track\r\nplayer.getStatus();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,s.jsx)(n.h3,{id:"document-workflow-system",children:"Document Workflow System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Abstract Document State\r\nclass DocumentState {\r\n  constructor() {\r\n    if (this.constructor === DocumentState) {\r\n      throw new Error("DocumentState is abstract");\r\n    }\r\n  }\r\n  \r\n  edit(document) { this.invalidOperation("edit"); }\r\n  submit(document) { this.invalidOperation("submit"); }\r\n  approve(document) { this.invalidOperation("approve"); }\r\n  reject(document) { this.invalidOperation("reject"); }\r\n  publish(document) { this.invalidOperation("publish"); }\r\n  archive(document) { this.invalidOperation("archive"); }\r\n  \r\n  invalidOperation(operation) {\r\n    console.log(`\u274c Cannot ${operation} document in ${this.constructor.name} state`);\r\n  }\r\n  \r\n  logTransition(document, newState) {\r\n    console.log(`\ud83d\udccb Document "${document.title}" transitioned: ${this.constructor.name} \u2192 ${newState.constructor.name}`);\r\n    document.addToHistory(`State changed to ${newState.constructor.name}`, document.currentUser);\r\n  }\r\n}\r\n\r\n// Concrete States\r\nclass DraftState extends DocumentState {\r\n  edit(document) {\r\n    console.log(`\u270f\ufe0f Editing document: ${document.title}`);\r\n    document.lastModified = new Date();\r\n    document.addToHistory("Document edited", document.currentUser);\r\n  }\r\n  \r\n  submit(document) {\r\n    if (document.content.trim().length === 0) {\r\n      console.log(`\u274c Cannot submit empty document`);\r\n      return;\r\n    }\r\n    \r\n    console.log(`\ud83d\udce4 Submitting document for review: ${document.title}`);\r\n    document.submittedAt = new Date();\r\n    const newState = new UnderReviewState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n  \r\n  archive(document) {\r\n    console.log(`\ud83d\uddc4\ufe0f Archiving draft document: ${document.title}`);\r\n    const newState = new ArchivedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n}\r\n\r\nclass UnderReviewState extends DocumentState {\r\n  approve(document) {\r\n    console.log(`\u2705 Approving document: ${document.title}`);\r\n    document.approvedAt = new Date();\r\n    document.approver = document.currentUser;\r\n    \r\n    const newState = new ApprovedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n  \r\n  reject(document) {\r\n    console.log(`\u274c Rejecting document: ${document.title}`);\r\n    document.rejectedAt = new Date();\r\n    document.rejectedBy = document.currentUser;\r\n    \r\n    const newState = new RejectedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n}\r\n\r\nclass ApprovedState extends DocumentState {\r\n  publish(document) {\r\n    console.log(`\ud83c\udf10 Publishing document: ${document.title}`);\r\n    document.publishedAt = new Date();\r\n    document.publisher = document.currentUser;\r\n    \r\n    const newState = new PublishedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n  \r\n  reject(document) {\r\n    console.log(`\u274c Rejecting approved document: ${document.title} (requires re-approval)`);\r\n    const newState = new RejectedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n}\r\n\r\nclass RejectedState extends DocumentState {\r\n  edit(document) {\r\n    console.log(`\u270f\ufe0f Editing rejected document: ${document.title} (back to draft)`);\r\n    document.lastModified = new Date();\r\n    \r\n    const newState = new DraftState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n    document.addToHistory("Document edited after rejection", document.currentUser);\r\n  }\r\n  \r\n  archive(document) {\r\n    console.log(`\ud83d\uddc4\ufe0f Archiving rejected document: ${document.title}`);\r\n    const newState = new ArchivedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n}\r\n\r\nclass PublishedState extends DocumentState {\r\n  archive(document) {\r\n    console.log(`\ud83d\uddc4\ufe0f Archiving published document: ${document.title}`);\r\n    const newState = new ArchivedState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n  }\r\n  \r\n  edit(document) {\r\n    console.log(`\u270f\ufe0f Creating new version of published document: ${document.title}`);\r\n    document.version++;\r\n    document.lastModified = new Date();\r\n    \r\n    const newState = new DraftState();\r\n    this.logTransition(document, newState);\r\n    document.setState(newState);\r\n    document.addToHistory(`New version ${document.version} created`, document.currentUser);\r\n  }\r\n}\r\n\r\nclass ArchivedState extends DocumentState {\r\n  // No operations allowed on archived documents\r\n  edit(document) { \r\n    console.log(`\u274c Cannot edit archived document. Create a new version instead.`);\r\n  }\r\n  \r\n  submit(document) { this.invalidOperation("submit"); }\r\n  approve(document) { this.invalidOperation("approve"); }\r\n  reject(document) { this.invalidOperation("reject"); }\r\n  publish(document) { this.invalidOperation("publish"); }\r\n  archive(document) { \r\n    console.log(`\ud83d\udcc1 Document already archived`);\r\n  }\r\n}\r\n\r\n// Context - Document\r\nclass Document {\r\n  constructor(title, author) {\r\n    this.title = title;\r\n    this.author = author;\r\n    this.content = "";\r\n    this.version = 1;\r\n    this.state = new DraftState();\r\n    this.currentUser = author;\r\n    this.createdAt = new Date();\r\n    this.lastModified = new Date();\r\n    this.history = [];\r\n    \r\n    // Workflow timestamps\r\n    this.submittedAt = null;\r\n    this.approvedAt = null;\r\n    this.rejectedAt = null;\r\n    this.publishedAt = null;\r\n    \r\n    // Workflow users\r\n    this.approver = null;\r\n    this.rejectedBy = null;\r\n    this.publisher = null;\r\n    \r\n    this.addToHistory("Document created", author);\r\n    console.log(`\ud83d\udcc4 Created new document: "${title}" by ${author}`);\r\n  }\r\n  \r\n  setState(state) {\r\n    this.state = state;\r\n  }\r\n  \r\n  setCurrentUser(user) {\r\n    this.currentUser = user;\r\n    console.log(`\ud83d\udc64 Current user changed to: ${user}`);\r\n  }\r\n  \r\n  setContent(content) {\r\n    this.content = content;\r\n    this.lastModified = new Date();\r\n    console.log(`\ud83d\udcdd Content updated for: ${this.title}`);\r\n  }\r\n  \r\n  // Delegate to current state\r\n  edit() {\r\n    this.state.edit(this);\r\n  }\r\n  \r\n  submit() {\r\n    this.state.submit(this);\r\n  }\r\n  \r\n  approve() {\r\n    this.state.approve(this);\r\n  }\r\n  \r\n  reject() {\r\n    this.state.reject(this);\r\n  }\r\n  \r\n  publish() {\r\n    this.state.publish(this);\r\n  }\r\n  \r\n  archive() {\r\n    this.state.archive(this);\r\n  }\r\n  \r\n  addToHistory(action, user) {\r\n    this.history.push({\r\n      action,\r\n      user,\r\n      timestamp: new Date(),\r\n      state: this.state.constructor.name\r\n    });\r\n  }\r\n  \r\n  getStatus() {\r\n    console.log(`\ud83d\udcca Document Status: "${this.title}"`);\r\n    console.log(`   Author: ${this.author}`);\r\n    console.log(`   Version: ${this.version}`);\r\n    console.log(`   State: ${this.state.constructor.name}`);\r\n    console.log(`   Created: ${this.createdAt.toLocaleDateString()}`);\r\n    console.log(`   Last Modified: ${this.lastModified.toLocaleDateString()}`);\r\n    console.log(`   Current User: ${this.currentUser}`);\r\n    \r\n    if (this.submittedAt) console.log(`   Submitted: ${this.submittedAt.toLocaleDateString()}`);\r\n    if (this.approvedAt) console.log(`   Approved: ${this.approvedAt.toLocaleDateString()} by ${this.approver}`);\r\n    if (this.rejectedAt) console.log(`   Rejected: ${this.rejectedAt.toLocaleDateString()} by ${this.rejectedBy}`);\r\n    if (this.publishedAt) console.log(`   Published: ${this.publishedAt.toLocaleDateString()} by ${this.publisher}`);\r\n  }\r\n  \r\n  getHistory() {\r\n    console.log(`\ud83d\udcda Document History: "${this.title}"`);\r\n    this.history.forEach((entry, index) => {\r\n      const time = entry.timestamp.toLocaleString();\r\n      console.log(`   ${index + 1}. ${time} - ${entry.action} by ${entry.user} (${entry.state})`);\r\n    });\r\n  }\r\n  \r\n  getStateInfo() {\r\n    const stateActions = {\r\n      \'DraftState\': [\'edit\', \'submit\', \'archive\'],\r\n      \'UnderReviewState\': [\'approve\', \'reject\'],\r\n      \'ApprovedState\': [\'publish\', \'reject\'],\r\n      \'RejectedState\': [\'edit\', \'archive\'],\r\n      \'PublishedState\': [\'archive\', \'edit (new version)\'],\r\n      \'ArchivedState\': []\r\n    };\r\n    \r\n    const currentStateActions = stateActions[this.state.constructor.name] || [];\r\n    \r\n    console.log(`\u2139\ufe0f Available actions in ${this.state.constructor.name}:`);\r\n    if (currentStateActions.length > 0) {\r\n      currentStateActions.forEach(action => {\r\n        console.log(`   \u2022 ${action}`);\r\n      });\r\n    } else {\r\n      console.log(`   \u2022 No actions available`);\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Document Workflow State Demo ===\\n");\r\n\r\nconsole.log("Creating documents:");\r\nconsole.log("-".repeat(19));\r\n\r\nconst doc1 = new Document("Product Requirements", "Alice");\r\nconst doc2 = new Document("API Documentation", "Bob");\r\n\r\ndoc1.setContent("This document outlines the product requirements...");\r\ndoc2.setContent("API documentation for the new service...");\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Document 1 workflow:");\r\nconsole.log("-".repeat(21));\r\n\r\ndoc1.getStatus();\r\nconsole.log();\r\n\r\ndoc1.edit();\r\ndoc1.submit();\r\ndoc1.getStatus();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\nconsole.log("Reviewer actions:");\r\nconsole.log("-".repeat(17));\r\n\r\ndoc1.setCurrentUser("Manager");\r\ndoc1.getStateInfo();\r\ndoc1.approve();\r\ndoc1.getStatus();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\nconsole.log("Publisher actions:");\r\nconsole.log("-".repeat(18));\r\n\r\ndoc1.setCurrentUser("Publisher");\r\ndoc1.publish();\r\ndoc1.getStatus();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Document 2 workflow (with rejection):");\r\nconsole.log("-".repeat(37));\r\n\r\ndoc2.edit();\r\ndoc2.submit();\r\n\r\ndoc2.setCurrentUser("Reviewer");\r\ndoc2.reject();\r\ndoc2.getStatus();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\ndoc2.setCurrentUser("Bob");\r\ndoc2.edit();\r\ndoc2.setContent("Updated API documentation with better examples...");\r\ndoc2.submit();\r\n\r\ndoc2.setCurrentUser("Reviewer");\r\ndoc2.approve();\r\ndoc2.publish();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Testing invalid operations:");\r\nconsole.log("-".repeat(29));\r\n\r\ndoc1.submit(); // Already published\r\ndoc1.approve(); // Already published\r\ndoc2.edit(); // Will create new version\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Document histories:");\r\nconsole.log("-".repeat(19));\r\n\r\nconsole.log("Document 1:");\r\ndoc1.getHistory();\r\n\r\nconsole.log("\\nDocument 2:");\r\ndoc2.getHistory();\r\n\r\nconsole.log("\\n" + "-".repeat(30) + "\\n");\r\n\r\nconsole.log("Final archiving:");\r\nconsole.log("-".repeat(16));\r\n\r\ndoc1.setCurrentUser("Admin");\r\ndoc1.archive();\r\n\r\ndoc2.setCurrentUser("Admin"); \r\ndoc2.archive();\r\n\r\nconsole.log("\\nTrying operations on archived documents:");\r\ndoc1.edit();\r\ndoc2.publish();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Code"}),": Eliminates complex conditional logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open/Closed"}),": Easy to add new states without modifying existing code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"}),": Each state class has one responsibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit Transitions"}),": State transitions are explicit and clear"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintainable"}),": Easy to understand and modify state-specific behavior"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increased Classes"}),": Can result in many small classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complexity"}),": May be overkill for simple state machines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Sharing"}),": Difficult to share data between states"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory"}),": Each state object consumes memory"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State-Dependent Behavior"}),": Object behavior depends heavily on its state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Conditionals"}),": Many if/else statements based on state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Machines"}),": Implementing finite state machines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Workflow Systems"}),": Document approval, order processing workflows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Game States"}),": Game menus, player states, game phases"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-state-pattern-variations",children:"\ud83d\udd04 State Pattern Variations"}),"\n",(0,s.jsxs)(n.h3,{id:"1-singleton-states",children:["1. ",(0,s.jsx)(n.strong,{children:"Singleton States"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class SingletonState extends PlayerState {\r\n  constructor() {\r\n    if (SingletonState.instance) {\r\n      return SingletonState.instance;\r\n    }\r\n    super();\r\n    SingletonState.instance = this;\r\n  }\r\n  \r\n  static getInstance() {\r\n    if (!SingletonState.instance) {\r\n      SingletonState.instance = new SingletonState();\r\n    }\r\n    return SingletonState.instance;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-state-with-data",children:["2. ",(0,s.jsx)(n.strong,{children:"State with Data"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class StateWithData extends PlayerState {\r\n  constructor(data) {\r\n    super();\r\n    this.stateData = data;\r\n  }\r\n  \r\n  handle(context) {\r\n    // Use this.stateData in state logic\r\n    context.processWithData(this.stateData);\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-hierarchical-states",children:["3. ",(0,s.jsx)(n.strong,{children:"Hierarchical States"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ParentState extends PlayerState {\r\n  constructor() {\r\n    super();\r\n    this.subStates = new Map();\r\n    this.currentSubState = null;\r\n  }\r\n  \r\n  handle(context) {\r\n    if (this.currentSubState) {\r\n      this.currentSubState.handle(context);\r\n    } else {\r\n      this.defaultHandle(context);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strategy"}),": Both encapsulate algorithms/behavior, but State changes behavior based on internal state while Strategy is chosen by client"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command"}),": State transitions can be implemented as commands"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Singleton"}),": States are often implemented as singletons"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flyweight"}),": Can be used to share state objects efficiently"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/state",children:"State Pattern - Refactoring.Guru"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Finite-state_machine",children:"Finite State Machines"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);