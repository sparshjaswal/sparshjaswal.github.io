"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3131],{7138:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"javascript/modern-js-patterns","title":"\ud83d\udd25 Modern JavaScript Patterns & Advanced Techniques","description":"Advanced patterns for professional JavaScript development in 2025","source":"@site/docs/javascript/modern-js-patterns.md","sourceDirName":"javascript","slug":"/javascript/modern-js-patterns","permalink":"/docs/javascript/modern-js-patterns","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Loop","permalink":"/docs/javascript/loops"},"next":{"title":"\ud83d\udce6 JavaScript Modules - Complete Guide (ES6+)","permalink":"/docs/javascript/modular-javascript-enhanced"}}');var s=n(4848),i=n(8453);const a={},o="\ud83d\udd25 Modern JavaScript Patterns & Advanced Techniques",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"\ud83d\ude80 Advanced ES6+ Features",id:"-advanced-es6-features",level:2},{value:"Optional Chaining &amp; Nullish Coalescing",id:"optional-chaining--nullish-coalescing",level:3},{value:"Advanced Destructuring Patterns",id:"advanced-destructuring-patterns",level:3},{value:"Template Literals &amp; Tagged Templates",id:"template-literals--tagged-templates",level:3},{value:"\ud83c\udfd7\ufe0f Design Patterns in JavaScript",id:"\ufe0f-design-patterns-in-javascript",level:2},{value:"Advanced Module Patterns",id:"advanced-module-patterns",level:3},{value:"Observer Pattern with Modern JavaScript",id:"observer-pattern-with-modern-javascript",level:3},{value:"Command Pattern for Undo/Redo",id:"command-pattern-for-undoredo",level:3},{value:"\u26a1 Performance Optimization Patterns",id:"-performance-optimization-patterns",level:2},{value:"Virtual Scrolling Implementation",id:"virtual-scrolling-implementation",level:3},{value:"Lazy Loading with Intersection Observer",id:"lazy-loading-with-intersection-observer",level:3},{value:"\ud83d\udd04 Reactive Programming",id:"-reactive-programming",level:2},{value:"Observable Pattern Implementation",id:"observable-pattern-implementation",level:3},{value:"\ud83d\udee1\ufe0f Advanced Type Safety",id:"\ufe0f-advanced-type-safety",level:2},{value:"Runtime Type Validation",id:"runtime-type-validation",level:3},{value:"\u26a1 Micro-optimizations",id:"-micro-optimizations",level:2},{value:"Memory-Efficient Patterns",id:"memory-efficient-patterns",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"\ud83d\udcca Summary",id:"-summary",level:2}];function d(r){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"-modern-javascript-patterns--advanced-techniques",children:"\ud83d\udd25 Modern JavaScript Patterns & Advanced Techniques"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Advanced patterns for professional JavaScript development in 2025"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#advanced-es6-features",children:"Advanced ES6+ Features"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#design-patterns-in-javascript",children:"Design Patterns in JavaScript"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#performance-optimization-patterns",children:"Performance Optimization Patterns"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#reactive-programming",children:"Reactive Programming"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#advanced-type-safety",children:"Advanced Type Safety"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#micro-optimizations",children:"Micro-optimizations"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-advanced-es6-features",children:"\ud83d\ude80 Advanced ES6+ Features"}),"\n",(0,s.jsx)(e.h3,{id:"optional-chaining--nullish-coalescing",children:"Optional Chaining & Nullish Coalescing"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Safe property access\r\nconst user = {\r\n  profile: {\r\n    address: {\r\n      street: '123 Main St'\r\n    }\r\n  }\r\n};\r\n\r\n// Optional chaining (?.)\r\nconst street = user?.profile?.address?.street; // '123 Main St'\r\nconst phone = user?.profile?.contact?.phone; // undefined (no error)\r\n\r\n// Nullish coalescing (??)\r\nconst displayName = user?.name ?? 'Anonymous';\r\nconst port = process.env.PORT ?? 3000;\r\n\r\n// \u2705 Advanced usage\r\nconst config = {\r\n  api: {\r\n    timeout: null,\r\n    retries: 0\r\n  }\r\n};\r\n\r\n// Only use default if null or undefined (not for falsy values)\r\nconst timeout = config?.api?.timeout ?? 5000; // 5000 (null triggers default)\r\nconst retries = config?.api?.retries ?? 3; // 0 (doesn't trigger default)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"advanced-destructuring-patterns",children:"Advanced Destructuring Patterns"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Nested destructuring with defaults\r\nconst response = {\r\n  data: {\r\n    users: [\r\n      { id: 1, name: 'Alice', metadata: { role: 'admin' } },\r\n      { id: 2, name: 'Bob' }\r\n    ]\r\n  },\r\n  meta: {\r\n    total: 2,\r\n    page: 1\r\n  }\r\n};\r\n\r\nconst {\r\n  data: { \r\n    users: [\r\n      { name: firstName, metadata: { role: firstUserRole = 'user' } = {} },\r\n      { name: secondName = 'Unknown' } = {}\r\n    ] = []\r\n  } = {},\r\n  meta: { total = 0, page = 1 } = {}\r\n} = response;\r\n\r\n// \u2705 Dynamic property destructuring\r\nconst dynamicKey = 'username';\r\nconst userData = { username: 'john_doe', email: 'john@example.com' };\r\nconst { [dynamicKey]: extractedValue } = userData; // 'john_doe'\r\n\r\n// \u2705 Rest patterns in destructuring\r\nconst { username, ...otherUserData } = userData;\r\nconst [first, ...remaining] = [1, 2, 3, 4, 5];\n"})}),"\n",(0,s.jsx)(e.h3,{id:"template-literals--tagged-templates",children:"Template Literals & Tagged Templates"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Advanced template literals\r\nconst createQuery = (table, conditions) => `\r\n  SELECT *\r\n  FROM ${table}\r\n  WHERE ${Object.entries(conditions)\r\n    .map(([key, value]) => `${key} = '${value}'`)\r\n    .join(' AND ')}\r\n`;\r\n\r\n// \u2705 Tagged template literals\r\nconst html = (strings, ...values) => {\r\n  return strings.reduce((result, string, i) => {\r\n    const value = values[i] ? escapeHtml(values[i]) : '';\r\n    return result + string + value;\r\n  }, '');\r\n};\r\n\r\nconst escapeHtml = (str) => String(str)\r\n  .replace(/&/g, '&amp;')\r\n  .replace(/</g, '&lt;')\r\n  .replace(/>/g, '&gt;');\r\n\r\n// Usage - automatically escapes values\r\nconst userInput = '<script>alert(\"xss\")<\/script>';\r\nconst safeHtml = html`<div>User input: ${userInput}</div>`;\r\n// Result: <div>User input: &lt;script&gt;alert(\"xss\")&lt;/script&gt;</div>\r\n\r\n// \u2705 SQL-like tagged template\r\nconst sql = (strings, ...values) => ({\r\n  query: strings.join('?'),\r\n  params: values\r\n});\r\n\r\nconst userId = 123;\r\nconst status = 'active';\r\nconst query = sql`\r\n  SELECT * FROM users \r\n  WHERE id = ${userId} AND status = ${status}\r\n`;\r\n// { query: \"SELECT * FROM users WHERE id = ? AND status = ?\", params: [123, \"active\"] }\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-design-patterns-in-javascript",children:"\ud83c\udfd7\ufe0f Design Patterns in JavaScript"}),"\n",(0,s.jsx)(e.h3,{id:"advanced-module-patterns",children:"Advanced Module Patterns"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Module with private methods using WeakMap\r\nconst UserManager = (() => {\r\n  const privateProps = new WeakMap();\r\n  \r\n  class UserManager {\r\n    constructor() {\r\n      privateProps.set(this, {\r\n        users: new Map(),\r\n        validateUser: (user) => {\r\n          return user && typeof user.name === 'string' && user.name.length > 0;\r\n        },\r\n        generateId: () => Date.now().toString(36) + Math.random().toString(36).substr(2)\r\n      });\r\n    }\r\n    \r\n    addUser(userData) {\r\n      const private = privateProps.get(this);\r\n      \r\n      if (!private.validateUser(userData)) {\r\n        throw new Error('Invalid user data');\r\n      }\r\n      \r\n      const id = private.generateId();\r\n      const user = { id, ...userData, createdAt: new Date() };\r\n      private.users.set(id, user);\r\n      \r\n      return user;\r\n    }\r\n    \r\n    getUser(id) {\r\n      return privateProps.get(this).users.get(id);\r\n    }\r\n    \r\n    getAllUsers() {\r\n      return Array.from(privateProps.get(this).users.values());\r\n    }\r\n  }\r\n  \r\n  return UserManager;\r\n})();\n"})}),"\n",(0,s.jsx)(e.h3,{id:"observer-pattern-with-modern-javascript",children:"Observer Pattern with Modern JavaScript"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Modern Observer pattern with EventTarget\r\nclass EventEmitter extends EventTarget {\r\n  emit(eventName, data) {\r\n    this.dispatchEvent(new CustomEvent(eventName, { detail: data }));\r\n  }\r\n  \r\n  on(eventName, callback) {\r\n    this.addEventListener(eventName, callback);\r\n    return () => this.removeEventListener(eventName, callback); // Return cleanup function\r\n  }\r\n  \r\n  once(eventName, callback) {\r\n    this.addEventListener(eventName, callback, { once: true });\r\n  }\r\n}\r\n\r\n// \u2705 Reactive Store pattern\r\nclass ReactiveStore extends EventEmitter {\r\n  constructor(initialState = {}) {\r\n    super();\r\n    this._state = { ...initialState };\r\n    this._subscribers = new Set();\r\n  }\r\n  \r\n  get state() {\r\n    return { ...this._state }; // Return immutable copy\r\n  }\r\n  \r\n  setState(updates) {\r\n    const prevState = this.state;\r\n    this._state = { ...this._state, ...updates };\r\n    \r\n    this.emit('stateChange', {\r\n      prevState,\r\n      nextState: this.state,\r\n      updates\r\n    });\r\n  }\r\n  \r\n  subscribe(callback) {\r\n    this._subscribers.add(callback);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      this._subscribers.delete(callback);\r\n    };\r\n  }\r\n  \r\n  getSnapshot() {\r\n    return this.state;\r\n  }\r\n}\r\n\r\n// Usage\r\nconst store = new ReactiveStore({ count: 0, user: null });\r\n\r\nconst unsubscribe = store.on('stateChange', ({ nextState, updates }) => {\r\n  console.log('State updated:', updates);\r\n  console.log('New state:', nextState);\r\n});\r\n\r\nstore.setState({ count: 1 });\r\nstore.setState({ user: { name: 'Alice' } });\n"})}),"\n",(0,s.jsx)(e.h3,{id:"command-pattern-for-undoredo",children:"Command Pattern for Undo/Redo"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Command pattern with undo/redo\r\nclass Command {\r\n  execute() {\r\n    throw new Error('Execute method must be implemented');\r\n  }\r\n  \r\n  undo() {\r\n    throw new Error('Undo method must be implemented');\r\n  }\r\n}\r\n\r\nclass AddItemCommand extends Command {\r\n  constructor(list, item) {\r\n    super();\r\n    this.list = list;\r\n    this.item = item;\r\n  }\r\n  \r\n  execute() {\r\n    this.list.push(this.item);\r\n  }\r\n  \r\n  undo() {\r\n    const index = this.list.indexOf(this.item);\r\n    if (index > -1) {\r\n      this.list.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\nclass RemoveItemCommand extends Command {\r\n  constructor(list, index) {\r\n    super();\r\n    this.list = list;\r\n    this.index = index;\r\n    this.removedItem = null;\r\n  }\r\n  \r\n  execute() {\r\n    this.removedItem = this.list.splice(this.index, 1)[0];\r\n  }\r\n  \r\n  undo() {\r\n    if (this.removedItem) {\r\n      this.list.splice(this.index, 0, this.removedItem);\r\n    }\r\n  }\r\n}\r\n\r\nclass CommandManager {\r\n  constructor() {\r\n    this.history = [];\r\n    this.currentIndex = -1;\r\n  }\r\n  \r\n  execute(command) {\r\n    // Remove any commands after current index (for when we're in middle of history)\r\n    this.history = this.history.slice(0, this.currentIndex + 1);\r\n    \r\n    command.execute();\r\n    this.history.push(command);\r\n    this.currentIndex++;\r\n  }\r\n  \r\n  undo() {\r\n    if (this.canUndo()) {\r\n      const command = this.history[this.currentIndex];\r\n      command.undo();\r\n      this.currentIndex--;\r\n    }\r\n  }\r\n  \r\n  redo() {\r\n    if (this.canRedo()) {\r\n      this.currentIndex++;\r\n      const command = this.history[this.currentIndex];\r\n      command.execute();\r\n    }\r\n  }\r\n  \r\n  canUndo() {\r\n    return this.currentIndex >= 0;\r\n  }\r\n  \r\n  canRedo() {\r\n    return this.currentIndex < this.history.length - 1;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-performance-optimization-patterns",children:"\u26a1 Performance Optimization Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"virtual-scrolling-implementation",children:"Virtual Scrolling Implementation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Virtual scrolling for large lists\r\nclass VirtualList {\r\n  constructor(container, items, itemHeight, visibleCount) {\r\n    this.container = container;\r\n    this.items = items;\r\n    this.itemHeight = itemHeight;\r\n    this.visibleCount = visibleCount;\r\n    this.scrollTop = 0;\r\n    \r\n    this.totalHeight = items.length * itemHeight;\r\n    this.visibleStart = 0;\r\n    this.visibleEnd = Math.min(visibleCount, items.length);\r\n    \r\n    this.setupContainer();\r\n    this.render();\r\n    this.attachScrollListener();\r\n  }\r\n  \r\n  setupContainer() {\r\n    this.container.style.height = `${this.visibleCount * this.itemHeight}px`;\r\n    this.container.style.overflow = 'auto';\r\n    this.container.style.position = 'relative';\r\n    \r\n    // Create virtual height element\r\n    this.spacer = document.createElement('div');\r\n    this.spacer.style.height = `${this.totalHeight}px`;\r\n    this.spacer.style.position = 'absolute';\r\n    this.spacer.style.top = '0';\r\n    this.spacer.style.width = '1px';\r\n    this.container.appendChild(this.spacer);\r\n  }\r\n  \r\n  attachScrollListener() {\r\n    this.container.addEventListener('scroll', \r\n      this.throttle(() => this.handleScroll(), 16)\r\n    );\r\n  }\r\n  \r\n  handleScroll() {\r\n    this.scrollTop = this.container.scrollTop;\r\n    const newVisibleStart = Math.floor(this.scrollTop / this.itemHeight);\r\n    const newVisibleEnd = Math.min(\r\n      newVisibleStart + this.visibleCount,\r\n      this.items.length\r\n    );\r\n    \r\n    if (newVisibleStart !== this.visibleStart || newVisibleEnd !== this.visibleEnd) {\r\n      this.visibleStart = newVisibleStart;\r\n      this.visibleEnd = newVisibleEnd;\r\n      this.render();\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    // Clear existing items\r\n    const existingItems = this.container.querySelectorAll('.virtual-item');\r\n    existingItems.forEach(item => item.remove());\r\n    \r\n    // Render visible items\r\n    for (let i = this.visibleStart; i < this.visibleEnd; i++) {\r\n      const item = this.createItemElement(this.items[i], i);\r\n      item.style.position = 'absolute';\r\n      item.style.top = `${i * this.itemHeight}px`;\r\n      item.style.height = `${this.itemHeight}px`;\r\n      item.className = 'virtual-item';\r\n      this.container.appendChild(item);\r\n    }\r\n  }\r\n  \r\n  createItemElement(data, index) {\r\n    const div = document.createElement('div');\r\n    div.textContent = `Item ${index}: ${data.name || data}`;\r\n    return div;\r\n  }\r\n  \r\n  throttle(func, limit) {\r\n    let inThrottle;\r\n    return function() {\r\n      const args = arguments;\r\n      const context = this;\r\n      if (!inThrottle) {\r\n        func.apply(context, args);\r\n        inThrottle = true;\r\n        setTimeout(() => inThrottle = false, limit);\r\n      }\r\n    };\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"lazy-loading-with-intersection-observer",children:"Lazy Loading with Intersection Observer"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Advanced lazy loading system\r\nclass LazyLoader {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      rootMargin: '50px',\r\n      threshold: 0.1,\r\n      ...options\r\n    };\r\n    \r\n    this.observer = new IntersectionObserver(\r\n      this.handleIntersection.bind(this),\r\n      this.options\r\n    );\r\n    \r\n    this.loadingPromises = new Map();\r\n  }\r\n  \r\n  observe(element, loadFn) {\r\n    if (typeof loadFn !== 'function') {\r\n      throw new Error('Load function is required');\r\n    }\r\n    \r\n    element.dataset.loadFn = this.registerLoadFunction(loadFn);\r\n    this.observer.observe(element);\r\n  }\r\n  \r\n  registerLoadFunction(fn) {\r\n    const id = `lazy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    this.loadingPromises.set(id, fn);\r\n    return id;\r\n  }\r\n  \r\n  async handleIntersection(entries) {\r\n    for (const entry of entries) {\r\n      if (entry.isIntersecting) {\r\n        await this.loadElement(entry.target);\r\n        this.observer.unobserve(entry.target);\r\n      }\r\n    }\r\n  }\r\n  \r\n  async loadElement(element) {\r\n    const loadFnId = element.dataset.loadFn;\r\n    const loadFn = this.loadingPromises.get(loadFnId);\r\n    \r\n    if (!loadFn) return;\r\n    \r\n    try {\r\n      element.classList.add('loading');\r\n      await loadFn(element);\r\n      element.classList.remove('loading');\r\n      element.classList.add('loaded');\r\n    } catch (error) {\r\n      element.classList.remove('loading');\r\n      element.classList.add('error');\r\n      console.error('Lazy loading failed:', error);\r\n    } finally {\r\n      this.loadingPromises.delete(loadFnId);\r\n    }\r\n  }\r\n  \r\n  disconnect() {\r\n    this.observer.disconnect();\r\n    this.loadingPromises.clear();\r\n  }\r\n}\r\n\r\n// Usage\r\nconst lazyLoader = new LazyLoader({ rootMargin: '100px' });\r\n\r\n// Lazy load images\r\ndocument.querySelectorAll('img[data-src]').forEach(img => {\r\n  lazyLoader.observe(img, async (element) => {\r\n    const src = element.dataset.src;\r\n    const response = await fetch(src);\r\n    const blob = await response.blob();\r\n    element.src = URL.createObjectURL(blob);\r\n  });\r\n});\r\n\r\n// Lazy load components\r\ndocument.querySelectorAll('.lazy-component').forEach(container => {\r\n  lazyLoader.observe(container, async (element) => {\r\n    const componentName = element.dataset.component;\r\n    const Component = await import(`./components/${componentName}.js`);\r\n    const instance = new Component.default();\r\n    instance.render(element);\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-reactive-programming",children:"\ud83d\udd04 Reactive Programming"}),"\n",(0,s.jsx)(e.h3,{id:"observable-pattern-implementation",children:"Observable Pattern Implementation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Modern Observable implementation\r\nclass Observable {\r\n  constructor(subscriber) {\r\n    this._subscriber = subscriber;\r\n  }\r\n  \r\n  subscribe(observer) {\r\n    const normalizedObserver = typeof observer === 'function' \r\n      ? { next: observer }\r\n      : observer;\r\n    \r\n    const subscription = {\r\n      closed: false,\r\n      unsubscribe() { this.closed = true; }\r\n    };\r\n    \r\n    try {\r\n      const teardown = this._subscriber({\r\n        next: (value) => {\r\n          if (!subscription.closed && normalizedObserver.next) {\r\n            normalizedObserver.next(value);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          if (!subscription.closed) {\r\n            subscription.closed = true;\r\n            if (normalizedObserver.error) {\r\n              normalizedObserver.error(error);\r\n            }\r\n          }\r\n        },\r\n        complete: () => {\r\n          if (!subscription.closed) {\r\n            subscription.closed = true;\r\n            if (normalizedObserver.complete) {\r\n              normalizedObserver.complete();\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (typeof teardown === 'function') {\r\n        subscription.unsubscribe = () => {\r\n          subscription.closed = true;\r\n          teardown();\r\n        };\r\n      }\r\n    } catch (error) {\r\n      normalizedObserver.error?.(error);\r\n    }\r\n    \r\n    return subscription;\r\n  }\r\n  \r\n  map(fn) {\r\n    return new Observable(observer => {\r\n      return this.subscribe({\r\n        next: value => observer.next(fn(value)),\r\n        error: error => observer.error(error),\r\n        complete: () => observer.complete()\r\n      });\r\n    });\r\n  }\r\n  \r\n  filter(predicate) {\r\n    return new Observable(observer => {\r\n      return this.subscribe({\r\n        next: value => {\r\n          if (predicate(value)) {\r\n            observer.next(value);\r\n          }\r\n        },\r\n        error: error => observer.error(error),\r\n        complete: () => observer.complete()\r\n      });\r\n    });\r\n  }\r\n  \r\n  debounce(ms) {\r\n    return new Observable(observer => {\r\n      let timeoutId;\r\n      \r\n      return this.subscribe({\r\n        next: value => {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(() => observer.next(value), ms);\r\n        },\r\n        error: error => observer.error(error),\r\n        complete: () => observer.complete()\r\n      });\r\n    });\r\n  }\r\n  \r\n  static fromEvent(element, eventName) {\r\n    return new Observable(observer => {\r\n      const handler = event => observer.next(event);\r\n      element.addEventListener(eventName, handler);\r\n      \r\n      return () => element.removeEventListener(eventName, handler);\r\n    });\r\n  }\r\n  \r\n  static fromPromise(promise) {\r\n    return new Observable(observer => {\r\n      promise\r\n        .then(value => {\r\n          observer.next(value);\r\n          observer.complete();\r\n        })\r\n        .catch(error => observer.error(error));\r\n    });\r\n  }\r\n  \r\n  static interval(ms) {\r\n    return new Observable(observer => {\r\n      let count = 0;\r\n      const intervalId = setInterval(() => {\r\n        observer.next(count++);\r\n      }, ms);\r\n      \r\n      return () => clearInterval(intervalId);\r\n    });\r\n  }\r\n}\r\n\r\n// Usage examples\r\nconst clicks$ = Observable.fromEvent(document, 'click');\r\nconst doubleClicks$ = clicks$\r\n  .debounce(300)\r\n  .filter(event => event.detail === 2);\r\n\r\ndoubleClicks$.subscribe(event => {\r\n  console.log('Double click at:', event.clientX, event.clientY);\r\n});\r\n\r\n// Search with debouncing\r\nconst searchInput = document.getElementById('search');\r\nconst search$ = Observable.fromEvent(searchInput, 'input')\r\n  .map(event => event.target.value)\r\n  .filter(value => value.length > 2)\r\n  .debounce(300);\r\n\r\nsearch$.subscribe(async (query) => {\r\n  const results = await searchAPI(query);\r\n  displayResults(results);\r\n});\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-advanced-type-safety",children:"\ud83d\udee1\ufe0f Advanced Type Safety"}),"\n",(0,s.jsx)(e.h3,{id:"runtime-type-validation",children:"Runtime Type Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Comprehensive type validation system\r\nconst Types = {\r\n  string: (value) => typeof value === 'string',\r\n  number: (value) => typeof value === 'number' && !isNaN(value),\r\n  boolean: (value) => typeof value === 'boolean',\r\n  array: (value) => Array.isArray(value),\r\n  object: (value) => value !== null && typeof value === 'object' && !Array.isArray(value),\r\n  function: (value) => typeof value === 'function',\r\n  \r\n  arrayOf: (typeValidator) => (value) => {\r\n    return Array.isArray(value) && value.every(typeValidator);\r\n  },\r\n  \r\n  objectOf: (schema) => (value) => {\r\n    if (!Types.object(value)) return false;\r\n    \r\n    return Object.entries(schema).every(([key, validator]) => {\r\n      const hasProperty = key in value;\r\n      const isOptional = validator.optional;\r\n      \r\n      if (!hasProperty && !isOptional) return false;\r\n      if (!hasProperty && isOptional) return true;\r\n      \r\n      const actualValidator = isOptional ? validator.type : validator;\r\n      return actualValidator(value[key]);\r\n    });\r\n  },\r\n  \r\n  optional: (typeValidator) => ({\r\n    type: typeValidator,\r\n    optional: true\r\n  }),\r\n  \r\n  oneOf: (...validators) => (value) => {\r\n    return validators.some(validator => validator(value));\r\n  },\r\n  \r\n  validate: (value, validator, path = '') => {\r\n    const isValid = validator(value);\r\n    if (!isValid) {\r\n      throw new TypeError(`Type validation failed at ${path || 'root'}: expected valid type, got ${typeof value}`);\r\n    }\r\n    return value;\r\n  }\r\n};\r\n\r\n// \u2705 Schema validation example\r\nconst UserSchema = Types.objectOf({\r\n  id: Types.number,\r\n  name: Types.string,\r\n  email: Types.string,\r\n  age: Types.optional(Types.number),\r\n  preferences: Types.optional(Types.objectOf({\r\n    theme: Types.oneOf(\r\n      value => value === 'light',\r\n      value => value === 'dark'\r\n    ),\r\n    notifications: Types.boolean\r\n  })),\r\n  roles: Types.arrayOf(Types.string)\r\n});\r\n\r\n// Usage\r\nconst validateUser = (userData) => {\r\n  try {\r\n    return Types.validate(userData, UserSchema, 'user');\r\n  } catch (error) {\r\n    console.error('User validation failed:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// API wrapper with validation\r\nconst createTypedAPI = (schema) => {\r\n  return (endpoint) => async (data) => {\r\n    // Validate input\r\n    Types.validate(data, schema.input, `${endpoint}.input`);\r\n    \r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    // Validate output\r\n    return Types.validate(result, schema.output, `${endpoint}.output`);\r\n  };\r\n};\r\n\r\nconst createUserAPI = createTypedAPI({\r\n  input: UserSchema,\r\n  output: Types.objectOf({\r\n    success: Types.boolean,\r\n    user: UserSchema,\r\n    token: Types.optional(Types.string)\r\n  })\r\n});\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-micro-optimizations",children:"\u26a1 Micro-optimizations"}),"\n",(0,s.jsx)(e.h3,{id:"memory-efficient-patterns",children:"Memory-Efficient Patterns"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Object pooling for frequent allocations\r\nclass ObjectPool {\r\n  constructor(createFn, resetFn, initialSize = 10) {\r\n    this.createFn = createFn;\r\n    this.resetFn = resetFn;\r\n    this.pool = [];\r\n    this.used = new Set();\r\n    \r\n    // Pre-populate pool\r\n    for (let i = 0; i < initialSize; i++) {\r\n      this.pool.push(this.createFn());\r\n    }\r\n  }\r\n  \r\n  acquire() {\r\n    let obj;\r\n    \r\n    if (this.pool.length > 0) {\r\n      obj = this.pool.pop();\r\n    } else {\r\n      obj = this.createFn();\r\n    }\r\n    \r\n    this.used.add(obj);\r\n    return obj;\r\n  }\r\n  \r\n  release(obj) {\r\n    if (this.used.has(obj)) {\r\n      this.used.delete(obj);\r\n      this.resetFn(obj);\r\n      this.pool.push(obj);\r\n    }\r\n  }\r\n  \r\n  clear() {\r\n    this.pool.length = 0;\r\n    this.used.clear();\r\n  }\r\n}\r\n\r\n// Usage for expensive objects\r\nconst vectorPool = new ObjectPool(\r\n  () => ({ x: 0, y: 0, z: 0 }),\r\n  (vector) => { vector.x = 0; vector.y = 0; vector.z = 0; }\r\n);\r\n\r\n// \u2705 Efficient string operations\r\nclass StringBuilder {\r\n  constructor() {\r\n    this.parts = [];\r\n  }\r\n  \r\n  append(str) {\r\n    this.parts.push(str);\r\n    return this;\r\n  }\r\n  \r\n  appendLine(str = '') {\r\n    this.parts.push(str, '\\n');\r\n    return this;\r\n  }\r\n  \r\n  toString() {\r\n    return this.parts.join('');\r\n  }\r\n  \r\n  clear() {\r\n    this.parts.length = 0;\r\n    return this;\r\n  }\r\n}\r\n\r\n// \u2705 Efficient array operations\r\nconst ArrayUtils = {\r\n  // Remove items without creating new array\r\n  removeInPlace: (array, predicate) => {\r\n    let writeIndex = 0;\r\n    for (let readIndex = 0; readIndex < array.length; readIndex++) {\r\n      if (!predicate(array[readIndex])) {\r\n        array[writeIndex] = array[readIndex];\r\n        writeIndex++;\r\n      }\r\n    }\r\n    array.length = writeIndex;\r\n    return array;\r\n  },\r\n  \r\n  // Binary search for sorted arrays\r\n  binarySearch: (array, target, compareFn = (a, b) => a - b) => {\r\n    let left = 0;\r\n    let right = array.length - 1;\r\n    \r\n    while (left <= right) {\r\n      const mid = Math.floor((left + right) / 2);\r\n      const comparison = compareFn(array[mid], target);\r\n      \r\n      if (comparison === 0) return mid;\r\n      if (comparison < 0) left = mid + 1;\r\n      else right = mid - 1;\r\n    }\r\n    \r\n    return -1;\r\n  },\r\n  \r\n  // Partition array in-place\r\n  partition: (array, predicate) => {\r\n    let left = 0;\r\n    let right = array.length - 1;\r\n    \r\n    while (left < right) {\r\n      while (left < right && predicate(array[left])) left++;\r\n      while (left < right && !predicate(array[right])) right--;\r\n      \r\n      if (left < right) {\r\n        [array[left], array[right]] = [array[right], array[left]];\r\n        left++;\r\n        right--;\r\n      }\r\n    }\r\n    \r\n    return left;\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Performance monitoring utilities\r\nclass PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = new Map();\r\n    this.observers = [];\r\n  }\r\n  \r\n  measure(name, fn) {\r\n    const start = performance.now();\r\n    let result;\r\n    let error;\r\n    \r\n    try {\r\n      result = fn();\r\n      \r\n      if (result instanceof Promise) {\r\n        return result.finally(() => {\r\n          this.recordMetric(name, performance.now() - start);\r\n        });\r\n      }\r\n    } catch (e) {\r\n      error = e;\r\n    } finally {\r\n      this.recordMetric(name, performance.now() - start, error);\r\n    }\r\n    \r\n    if (error) throw error;\r\n    return result;\r\n  }\r\n  \r\n  recordMetric(name, duration, error = null) {\r\n    if (!this.metrics.has(name)) {\r\n      this.metrics.set(name, {\r\n        count: 0,\r\n        totalTime: 0,\r\n        minTime: Infinity,\r\n        maxTime: 0,\r\n        errors: 0\r\n      });\r\n    }\r\n    \r\n    const metric = this.metrics.get(name);\r\n    metric.count++;\r\n    metric.totalTime += duration;\r\n    metric.minTime = Math.min(metric.minTime, duration);\r\n    metric.maxTime = Math.max(metric.maxTime, duration);\r\n    \r\n    if (error) metric.errors++;\r\n    \r\n    // Notify observers\r\n    this.observers.forEach(observer => {\r\n      observer({ name, duration, error, metric });\r\n    });\r\n  }\r\n  \r\n  getMetrics(name) {\r\n    const metric = this.metrics.get(name);\r\n    if (!metric) return null;\r\n    \r\n    return {\r\n      ...metric,\r\n      averageTime: metric.totalTime / metric.count,\r\n      errorRate: metric.errors / metric.count\r\n    };\r\n  }\r\n  \r\n  getAllMetrics() {\r\n    const result = {};\r\n    this.metrics.forEach((metric, name) => {\r\n      result[name] = this.getMetrics(name);\r\n    });\r\n    return result;\r\n  }\r\n  \r\n  subscribe(observer) {\r\n    this.observers.push(observer);\r\n    return () => {\r\n      const index = this.observers.indexOf(observer);\r\n      if (index > -1) this.observers.splice(index, 1);\r\n    };\r\n  }\r\n  \r\n  clear() {\r\n    this.metrics.clear();\r\n  }\r\n}\r\n\r\n// Global performance monitor\r\nconst perfMon = new PerformanceMonitor();\r\n\r\n// Auto-log slow operations\r\nperfMon.subscribe(({ name, duration, error }) => {\r\n  if (duration > 100) {\r\n    console.warn(`Slow operation detected: ${name} took ${duration.toFixed(2)}ms`);\r\n  }\r\n  if (error) {\r\n    console.error(`Operation failed: ${name}`, error);\r\n  }\r\n});\r\n\r\n// Usage decorator\r\nconst monitored = (name) => (target, propertyKey, descriptor) => {\r\n  const originalMethod = descriptor.value;\r\n  \r\n  descriptor.value = function(...args) {\r\n    return perfMon.measure(`${target.constructor.name}.${propertyKey}`, () => {\r\n      return originalMethod.apply(this, args);\r\n    });\r\n  };\r\n  \r\n  return descriptor;\r\n};\r\n\r\n// Example usage\r\nclass UserService {\r\n  @monitored('fetchUser')\r\n  async fetchUser(id) {\r\n    const response = await fetch(`/api/users/${id}`);\r\n    return response.json();\r\n  }\r\n  \r\n  @monitored('processUsers')\r\n  processUsers(users) {\r\n    return users.map(user => ({\r\n      ...user,\r\n      displayName: `${user.firstName} ${user.lastName}`\r\n    }));\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-summary",children:"\ud83d\udcca Summary"}),"\n",(0,s.jsx)(e.p,{children:"These advanced JavaScript patterns provide:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Better Performance"}),": Through virtual scrolling, object pooling, and efficient algorithms"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Type Safety"}),": Runtime validation and schema checking"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Maintainability"}),": Clean patterns and proper abstractions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Observability"}),": Performance monitoring and debugging tools"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Modern Features"}),": Latest JavaScript capabilities and best practices"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Use these patterns selectively based on your application's needs. Not every application requires all these optimizations, but understanding them will make you a more effective JavaScript developer."}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Next Steps"}),": Practice implementing these patterns in your projects, measure their impact, and gradually adopt the ones that provide the most value for your specific use cases."]}),"\n"]})]})}function u(r={}){const{wrapper:e}={...(0,i.R)(),...r.components};return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(d,{...r})}):d(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(r){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function o(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:a(r.components),t.createElement(i.Provider,{value:e},r.children)}}}]);