"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7922],{6960:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"javascript/destructuring","title":"JavaScript Destructuring","description":"What is Destructuring?","source":"@site/docs/javascript/destructuring.md","sourceDirName":"javascript","slug":"/javascript/destructuring","permalink":"/docs/javascript/destructuring","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"What is Asynchronous?","permalink":"/docs/javascript/asynchronous"},"next":{"title":"\ud83c\udf10 Document Object Model (DOM) - Complete Guide","permalink":"/docs/javascript/document-object-model"}}');var a=s(4848),t=s(8453);const i={},c="JavaScript Destructuring",l={},o=[{value:"What is Destructuring?",id:"what-is-destructuring",level:2},{value:"Array Destructuring",id:"array-destructuring",level:2},{value:"Basic Array Destructuring",id:"basic-array-destructuring",level:3},{value:"Skipping Elements",id:"skipping-elements",level:3},{value:"Rest Operator with Arrays",id:"rest-operator-with-arrays",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Swapping Variables",id:"swapping-variables",level:3},{value:"Object Destructuring",id:"object-destructuring",level:2},{value:"Basic Object Destructuring",id:"basic-object-destructuring",level:3},{value:"Renaming Variables",id:"renaming-variables",level:3},{value:"Default Values",id:"default-values-1",level:3},{value:"Nested Destructuring",id:"nested-destructuring",level:3},{value:"Rest Operator with Objects",id:"rest-operator-with-objects",level:3},{value:"Function Parameter Destructuring",id:"function-parameter-destructuring",level:2},{value:"Array Parameters",id:"array-parameters",level:3},{value:"Object Parameters",id:"object-parameters",level:3},{value:"Mixed Destructuring in Functions",id:"mixed-destructuring-in-functions",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Working with APIs",id:"working-with-apis",level:3},{value:"Array of Objects",id:"array-of-objects",level:3},{value:"Configuration Objects",id:"configuration-objects",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"javascript-destructuring",children:"JavaScript Destructuring"})}),"\n",(0,a.jsx)(n.h2,{id:"what-is-destructuring",children:"What is Destructuring?"}),"\n",(0,a.jsx)(n.p,{children:"Destructuring is a syntax that allows you to unpack values from arrays or properties from objects into distinct variables."}),"\n",(0,a.jsx)(n.h2,{id:"array-destructuring",children:"Array Destructuring"}),"\n",(0,a.jsx)(n.h3,{id:"basic-array-destructuring",children:"Basic Array Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const numbers = [1, 2, 3, 4, 5];\n\n// Traditional way\nconst first = numbers[0];\nconst second = numbers[1];\n\n// Destructuring way\nconst [a, b, c] = numbers;\nconsole.log(a, b, c); // 1, 2, 3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"skipping-elements",children:"Skipping Elements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const colors = ['red', 'green', 'blue', 'yellow'];\n\nconst [primary, , tertiary] = colors;\nconsole.log(primary, tertiary); // \"red\", \"blue\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rest-operator-with-arrays",children:"Rest Operator with Arrays"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const numbers = [1, 2, 3, 4, 5];\n\nconst [first, second, ...rest] = numbers;\nconsole.log(first);  // 1\nconsole.log(second); // 2\nconsole.log(rest);   // [3, 4, 5]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"default-values",children:"Default Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr = [1];\n\nconst [a, b = 2, c = 3] = arr;\nconsole.log(a, b, c); // 1, 2, 3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"swapping-variables",children:"Swapping Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"let x = 10;\nlet y = 20;\n\n[x, y] = [y, x];\nconsole.log(x, y); // 20, 10\n"})}),"\n",(0,a.jsx)(n.h2,{id:"object-destructuring",children:"Object Destructuring"}),"\n",(0,a.jsx)(n.h3,{id:"basic-object-destructuring",children:"Basic Object Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const person = {\n    name: 'Alice',\n    age: 30,\n    city: 'New York'\n};\n\n// Traditional way\nconst name = person.name;\nconst age = person.age;\n\n// Destructuring way\nconst { name, age, city } = person;\nconsole.log(name, age, city); // \"Alice\", 30, \"New York\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"renaming-variables",children:"Renaming Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const user = {\n    id: 1,\n    username: 'john_doe',\n    email: 'john@example.com'\n};\n\nconst { username: name, email: userEmail } = user;\nconsole.log(name);      // \"john_doe\"\nconsole.log(userEmail); // \"john@example.com\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"default-values-1",children:"Default Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const settings = {\n    theme: 'dark'\n};\n\nconst { theme, language = 'English', fontSize = 14 } = settings;\nconsole.log(theme);    // \"dark\"\nconsole.log(language); // \"English\"\nconsole.log(fontSize); // 14\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nested-destructuring",children:"Nested Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const student = {\n    name: 'Bob',\n    grades: {\n        math: 95,\n        science: 88\n    },\n    address: {\n        street: '123 Main St',\n        city: 'Boston'\n    }\n};\n\nconst {\n    name,\n    grades: { math, science },\n    address: { city }\n} = student;\n\nconsole.log(name);    // \"Bob\"\nconsole.log(math);    // 95\nconsole.log(science); // 88\nconsole.log(city);    // \"Boston\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rest-operator-with-objects",children:"Rest Operator with Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const user = {\n    id: 1,\n    name: 'Alice',\n    email: 'alice@example.com',\n    age: 30,\n    city: 'New York'\n};\n\nconst { id, name, ...details } = user;\nconsole.log(id);      // 1\nconsole.log(name);    // \"Alice\"\nconsole.log(details); // { email: \"alice@example.com\", age: 30, city: \"New York\" }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"function-parameter-destructuring",children:"Function Parameter Destructuring"}),"\n",(0,a.jsx)(n.h3,{id:"array-parameters",children:"Array Parameters"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function sum([a, b, c]) {\n    return a + b + c;\n}\n\nconsole.log(sum([1, 2, 3])); // 6\n"})}),"\n",(0,a.jsx)(n.h3,{id:"object-parameters",children:"Object Parameters"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function createUser({ name, email, age = 18 }) {\n    return {\n        id: Math.random(),\n        name,\n        email,\n        age,\n        createdAt: new Date()\n    };\n}\n\nconst newUser = createUser({\n    name: 'John',\n    email: 'john@example.com'\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mixed-destructuring-in-functions",children:"Mixed Destructuring in Functions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function processOrder({ id, items, customer: { name, email } }) {\n    console.log(`Processing order ${id} for ${name}`);\n    console.log(`Items: ${items.join(', ')}`);\n    console.log(`Send confirmation to: ${email}`);\n}\n\nconst order = {\n    id: 'ORD-123',\n    items: ['laptop', 'mouse'],\n    customer: {\n        name: 'Alice Smith',\n        email: 'alice@example.com'\n    }\n};\n\nprocessOrder(order);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,a.jsx)(n.h3,{id:"working-with-apis",children:"Working with APIs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// API response\nconst response = {\n    data: {\n        users: [\n            { id: 1, name: 'John', active: true },\n            { id: 2, name: 'Jane', active: false }\n        ]\n    },\n    status: 200,\n    message: 'Success'\n};\n\nconst {\n    data: { users },\n    status,\n    message\n} = response;\n\nconsole.log(users);   // Array of users\nconsole.log(status);  // 200\nconsole.log(message); // \"Success\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"array-of-objects",children:"Array of Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const employees = [\n    { name: 'Alice', department: 'Engineering' },\n    { name: 'Bob', department: 'Marketing' },\n    { name: 'Carol', department: 'Sales' }\n];\n\n// Destructure in loop\nfor (const { name, department } of employees) {\n    console.log(`${name} works in ${department}`);\n}\n\n// Destructure with map\nconst names = employees.map(({ name }) => name);\nconsole.log(names); // [\"Alice\", \"Bob\", \"Carol\"]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configuration-objects",children:"Configuration Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function setupServer({\n    port = 3000,\n    host = 'localhost',\n    ssl = false,\n    database: { url, name } = {}\n}) {\n    console.log(`Server running on ${host}:${port}`);\n    console.log(`SSL: ${ssl ? 'enabled' : 'disabled'}`);\n    if (url && name) {\n        console.log(`Database: ${name} at ${url}`);\n    }\n}\n\nsetupServer({\n    port: 8080,\n    ssl: true,\n    database: {\n        url: 'mongodb://localhost:27017',\n        name: 'myapp'\n    }\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Use meaningful variable names"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Good\nconst { firstName, lastName, email } = user;\n\n// Avoid\nconst { a, b, c } = user;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Provide default values for optional properties"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { theme = 'light', language = 'en' } = settings;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Use destructuring in function parameters for clean APIs"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Good\nfunction updateUser({ id, name, email }) {\n    // Clear what parameters are expected\n}\n\n// Less clear\nfunction updateUser(id, name, email) {\n    // Order matters, easy to mix up\n}\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Don't over-nest destructuring"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Reasonable\nconst { user: { name, email } } = response;\n\n// Too complex\nconst { data: { users: [{ profile: { personal: { name } } }] } } = response;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);