"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3868],{5489:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"design-pattern/creational/singleton","title":"Singleton Pattern \ud83c\udfef","description":"Definition: The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance.","source":"@site/docs/design-pattern/creational/singleton.md","sourceDirName":"design-pattern/creational","slug":"/design-pattern/creational/singleton","permalink":"/docs/design-pattern/creational/singleton","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Prototype Pattern \ud83e\uddec","permalink":"/docs/design-pattern/creational/prototype"},"next":{"title":"Adapter Pattern \ud83d\udd0c","permalink":"/docs/design-pattern/structural/adapter"}}');var o=t(4848),s=t(8453);const i={},l="Singleton Pattern \ud83c\udfef",a={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Application Settings",id:"application-settings",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Database Connection Manager",id:"database-connection-manager",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Logger Singleton",id:"logger-singleton",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Implementation Variations",id:"-implementation-variations",level:2},{value:"1. <strong>Eager Initialization</strong>",id:"1-eager-initialization",level:3},{value:"2. <strong>Lazy Initialization</strong> (shown in examples above)",id:"2-lazy-initialization-shown-in-examples-above",level:3},{value:"3. <strong>Thread-Safe (for Node.js with worker threads)</strong>",id:"3-thread-safe-for-nodejs-with-worker-threads",level:3},{value:"\u26a0\ufe0f Anti-Patterns to Avoid",id:"\ufe0f-anti-patterns-to-avoid",level:2},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function g(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"singleton-pattern-",children:"Singleton Pattern \ud83c\udfef"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Definition"}),": The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(e.p,{children:"Ensure a class has only one instance, and provide a global point of access to it. This is useful when exactly one object is needed to coordinate actions across the system."}),"\n",(0,o.jsx)(e.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(e.p,{children:"You need to ensure that a class has only one instance because:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Resource Management"}),": Database connections, file systems, or print spoolers"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Configuration Settings"}),": Application settings that should be consistent"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Logging"}),": Central logging mechanism"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Caching"}),": Shared cache across the application"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Thread Pools"}),": Managing limited resources"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Having multiple instances could cause:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Resource conflicts"}),"\n",(0,o.jsx)(e.li,{children:"Inconsistent behavior"}),"\n",(0,o.jsx)(e.li,{children:"Memory waste"}),"\n",(0,o.jsx)(e.li,{children:"Synchronization issues"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(e.p,{children:"The Singleton pattern solves this by making the class responsible for keeping track of its sole instance. The class ensures that no other instance can be created and provides a way to access the instance."}),"\n",(0,o.jsx)(e.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Singleton\r\n\u251c\u2500\u2500 -instance: Singleton (static)\r\n\u251c\u2500\u2500 -constructor() (private)\r\n\u251c\u2500\u2500 +getInstance(): Singleton (static)\r\n\u2514\u2500\u2500 +businessLogic()\r\n\r\nClient \u2192 Singleton.getInstance()\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,o.jsx)(e.h3,{id:"application-settings",children:"Application Settings"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Basic Singleton - Application Settings\r\nclass AppSettings {\r\n  constructor() {\r\n    // Prevent direct instantiation\r\n    if (AppSettings.instance) {\r\n      return AppSettings.instance;\r\n    }\r\n    \r\n    // Initialize settings\r\n    this.settings = {\r\n      theme: \'light\',\r\n      language: \'en\',\r\n      apiUrl: \'https://api.example.com\',\r\n      timeout: 5000,\r\n      debug: false\r\n    };\r\n    \r\n    this.version = \'1.0.0\';\r\n    this.created = new Date();\r\n    \r\n    // Store instance\r\n    AppSettings.instance = this;\r\n    \r\n    console.log("\u2699\ufe0f AppSettings instance created");\r\n  }\r\n  \r\n  static getInstance() {\r\n    if (!AppSettings.instance) {\r\n      console.log("\ud83c\udfed Creating new AppSettings instance");\r\n      AppSettings.instance = new AppSettings();\r\n    } else {\r\n      console.log("\u267b\ufe0f Returning existing AppSettings instance");\r\n    }\r\n    \r\n    return AppSettings.instance;\r\n  }\r\n  \r\n  getSetting(key) {\r\n    console.log(`\ud83d\udd0d Getting setting: ${key} = ${this.settings[key]}`);\r\n    return this.settings[key];\r\n  }\r\n  \r\n  setSetting(key, value) {\r\n    const oldValue = this.settings[key];\r\n    this.settings[key] = value;\r\n    console.log(`\ud83d\udcdd Setting updated: ${key} = ${value} (was: ${oldValue})`);\r\n  }\r\n  \r\n  getAllSettings() {\r\n    console.log("\ud83d\udccb Current Settings:");\r\n    Object.entries(this.settings).forEach(([key, value]) => {\r\n      console.log(`   ${key}: ${value}`);\r\n    });\r\n    return { ...this.settings };\r\n  }\r\n  \r\n  resetToDefaults() {\r\n    console.log("\ud83d\udd04 Resetting to default settings");\r\n    this.settings = {\r\n      theme: \'light\',\r\n      language: \'en\',\r\n      apiUrl: \'https://api.example.com\',\r\n      timeout: 5000,\r\n      debug: false\r\n    };\r\n  }\r\n  \r\n  getInfo() {\r\n    console.log(`\u2139\ufe0f AppSettings Info:`);\r\n    console.log(`   Version: ${this.version}`);\r\n    console.log(`   Created: ${this.created.toLocaleString()}`);\r\n    console.log(`   Instance ID: ${this.constructor.name}@${this.created.getTime()}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Application Settings Singleton Demo ===\\n");\r\n\r\nconsole.log("Getting instances from different parts of the app:");\r\nconsole.log("-".repeat(50));\r\n\r\n// Simulate different modules accessing settings\r\nconsole.log("1. Main App Module:");\r\nconst mainAppSettings = AppSettings.getInstance();\r\nmainAppSettings.setSetting(\'theme\', \'dark\');\r\nmainAppSettings.setSetting(\'debug\', true);\r\n\r\nconsole.log("\\n2. User Interface Module:");\r\nconst uiSettings = AppSettings.getInstance();\r\nconsole.log(`UI Theme: ${uiSettings.getSetting(\'theme\')}`);\r\n\r\nconsole.log("\\n3. API Module:");\r\nconst apiSettings = AppSettings.getInstance();\r\nconsole.log(`API URL: ${apiSettings.getSetting(\'apiUrl\')}`);\r\napiSettings.setSetting(\'timeout\', 10000);\r\n\r\nconsole.log("\\n4. Logger Module:");\r\nconst loggerSettings = AppSettings.getInstance();\r\nconsole.log(`Debug Mode: ${loggerSettings.getSetting(\'debug\')}`);\r\n\r\nconsole.log("\\nVerifying all instances are the same:");\r\nconsole.log("-".repeat(35));\r\nconsole.log(`mainAppSettings === uiSettings: ${mainAppSettings === uiSettings}`);\r\nconsole.log(`uiSettings === apiSettings: ${uiSettings === apiSettings}`);\r\nconsole.log(`apiSettings === loggerSettings: ${apiSettings === loggerSettings}`);\r\n\r\nconsole.log("\\nFinal settings state:");\r\nconsole.log("-".repeat(20));\r\nmainAppSettings.getAllSettings();\r\nmainAppSettings.getInfo();\n'})}),"\n",(0,o.jsx)(e.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,o.jsx)(e.h3,{id:"database-connection-manager",children:"Database Connection Manager"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Database Connection Singleton\r\nclass DatabaseManager {\r\n  constructor() {\r\n    if (DatabaseManager.instance) {\r\n      return DatabaseManager.instance;\r\n    }\r\n    \r\n    this.connections = new Map();\r\n    this.connectionCount = 0;\r\n    this.maxConnections = 10;\r\n    this.activeQueries = 0;\r\n    this.totalQueries = 0;\r\n    this.created = new Date();\r\n    \r\n    // Initialize default connection\r\n    this.initializeConnection('default', {\r\n      host: 'localhost',\r\n      port: 5432,\r\n      database: 'myapp',\r\n      username: 'admin',\r\n      password: '****'\r\n    });\r\n    \r\n    DatabaseManager.instance = this;\r\n    console.log(\"\ud83d\uddc3\ufe0f DatabaseManager singleton created\");\r\n  }\r\n  \r\n  static getInstance() {\r\n    if (!DatabaseManager.instance) {\r\n      console.log(\"\ud83c\udfed Creating new DatabaseManager instance\");\r\n      DatabaseManager.instance = new DatabaseManager();\r\n    } else {\r\n      console.log(\"\u267b\ufe0f Returning existing DatabaseManager instance\");\r\n    }\r\n    \r\n    return DatabaseManager.instance;\r\n  }\r\n  \r\n  initializeConnection(name, config) {\r\n    if (this.connections.has(name)) {\r\n      console.log(`\u26a0\ufe0f Connection '${name}' already exists`);\r\n      return false;\r\n    }\r\n    \r\n    if (this.connectionCount >= this.maxConnections) {\r\n      console.log(`\u274c Maximum connections reached (${this.maxConnections})`);\r\n      return false;\r\n    }\r\n    \r\n    const connection = {\r\n      name,\r\n      config: { ...config, password: '****' }, // Hide password in logs\r\n      connected: false,\r\n      lastUsed: null,\r\n      queryCount: 0,\r\n      id: ++this.connectionCount\r\n    };\r\n    \r\n    this.connections.set(name, connection);\r\n    console.log(`\u2705 Connection '${name}' initialized (ID: ${connection.id})`);\r\n    return true;\r\n  }\r\n  \r\n  connect(connectionName = 'default') {\r\n    const connection = this.connections.get(connectionName);\r\n    \r\n    if (!connection) {\r\n      console.log(`\u274c Connection '${connectionName}' not found`);\r\n      return false;\r\n    }\r\n    \r\n    if (connection.connected) {\r\n      console.log(`\u2139\ufe0f Connection '${connectionName}' already connected`);\r\n      return true;\r\n    }\r\n    \r\n    // Simulate connection establishment\r\n    console.log(`\ud83d\udd17 Connecting to database: ${connection.config.host}:${connection.config.port}/${connection.config.database}`);\r\n    connection.connected = true;\r\n    connection.lastUsed = new Date();\r\n    \r\n    console.log(`\u2705 Connected to '${connectionName}'`);\r\n    return true;\r\n  }\r\n  \r\n  query(sql, connectionName = 'default') {\r\n    const connection = this.connections.get(connectionName);\r\n    \r\n    if (!connection) {\r\n      console.log(`\u274c Connection '${connectionName}' not found`);\r\n      return null;\r\n    }\r\n    \r\n    if (!connection.connected) {\r\n      console.log(`\ud83d\udd17 Auto-connecting to '${connectionName}'`);\r\n      if (!this.connect(connectionName)) {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Simulate query execution\r\n    this.activeQueries++;\r\n    this.totalQueries++;\r\n    connection.queryCount++;\r\n    connection.lastUsed = new Date();\r\n    \r\n    console.log(`\ud83d\udcca Executing query on '${connectionName}': ${sql}`);\r\n    console.log(`   Active queries: ${this.activeQueries}`);\r\n    \r\n    // Simulate query completion\r\n    setTimeout(() => {\r\n      this.activeQueries--;\r\n    }, 100);\r\n    \r\n    return {\r\n      connection: connectionName,\r\n      query: sql,\r\n      result: `Result for: ${sql}`,\r\n      timestamp: new Date()\r\n    };\r\n  }\r\n  \r\n  disconnect(connectionName = 'default') {\r\n    const connection = this.connections.get(connectionName);\r\n    \r\n    if (!connection) {\r\n      console.log(`\u274c Connection '${connectionName}' not found`);\r\n      return false;\r\n    }\r\n    \r\n    if (!connection.connected) {\r\n      console.log(`\u2139\ufe0f Connection '${connectionName}' already disconnected`);\r\n      return true;\r\n    }\r\n    \r\n    connection.connected = false;\r\n    console.log(`\ud83d\udd12 Disconnected from '${connectionName}'`);\r\n    return true;\r\n  }\r\n  \r\n  getConnectionInfo(connectionName = 'default') {\r\n    const connection = this.connections.get(connectionName);\r\n    \r\n    if (!connection) {\r\n      console.log(`\u274c Connection '${connectionName}' not found`);\r\n      return null;\r\n    }\r\n    \r\n    console.log(`\ud83d\udccb Connection Info [${connectionName}]:`);\r\n    console.log(`   ID: ${connection.id}`);\r\n    console.log(`   Status: ${connection.connected ? 'Connected' : 'Disconnected'}`);\r\n    console.log(`   Host: ${connection.config.host}:${connection.config.port}`);\r\n    console.log(`   Database: ${connection.config.database}`);\r\n    console.log(`   Queries: ${connection.queryCount}`);\r\n    console.log(`   Last Used: ${connection.lastUsed ? connection.lastUsed.toLocaleString() : 'Never'}`);\r\n    \r\n    return connection;\r\n  }\r\n  \r\n  getStats() {\r\n    console.log(`\ud83d\udcca DatabaseManager Statistics:`);\r\n    console.log(`   Total Connections: ${this.connections.size}/${this.maxConnections}`);\r\n    console.log(`   Active Queries: ${this.activeQueries}`);\r\n    console.log(`   Total Queries: ${this.totalQueries}`);\r\n    console.log(`   Created: ${this.created.toLocaleString()}`);\r\n    \r\n    const connectionStats = {};\r\n    this.connections.forEach((conn, name) => {\r\n      connectionStats[name] = {\r\n        connected: conn.connected,\r\n        queries: conn.queryCount\r\n      };\r\n    });\r\n    \r\n    console.log(`   Connection Status:`, connectionStats);\r\n    return connectionStats;\r\n  }\r\n  \r\n  closeAllConnections() {\r\n    console.log(\"\ud83d\udd12 Closing all database connections\");\r\n    let closedCount = 0;\r\n    \r\n    this.connections.forEach((connection, name) => {\r\n      if (connection.connected) {\r\n        this.disconnect(name);\r\n        closedCount++;\r\n      }\r\n    });\r\n    \r\n    console.log(`\u2705 Closed ${closedCount} connections`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"\\n=== Database Manager Singleton Demo ===\\n\");\r\n\r\nconsole.log(\"Different modules accessing database:\");\r\nconsole.log(\"-\".repeat(35));\r\n\r\n// Module 1: User Service\r\nconsole.log(\"1. User Service Module:\");\r\nconst userServiceDB = DatabaseManager.getInstance();\r\nuserServiceDB.initializeConnection('users', {\r\n  host: 'user-db.company.com',\r\n  port: 5432,\r\n  database: 'users',\r\n  username: 'user_service'\r\n});\r\n\r\nuserServiceDB.query(\"SELECT * FROM users WHERE active = true\", 'users');\r\n\r\nconsole.log(\"\\n2. Product Service Module:\");\r\nconst productServiceDB = DatabaseManager.getInstance();\r\nproductServiceDB.query(\"SELECT * FROM products WHERE in_stock = true\");\r\n\r\nconsole.log(\"\\n3. Order Service Module:\");\r\nconst orderServiceDB = DatabaseManager.getInstance();\r\norderServiceDB.initializeConnection('orders', {\r\n  host: 'order-db.company.com', \r\n  port: 5433,\r\n  database: 'orders',\r\n  username: 'order_service'\r\n});\r\n\r\norderServiceDB.query(\"SELECT * FROM orders WHERE status = 'pending'\", 'orders');\r\n\r\nconsole.log(\"\\nVerifying singleton behavior:\");\r\nconsole.log(\"-\".repeat(30));\r\nconsole.log(`userServiceDB === productServiceDB: ${userServiceDB === productServiceDB}`);\r\nconsole.log(`productServiceDB === orderServiceDB: ${productServiceDB === orderServiceDB}`);\r\n\r\nconsole.log(\"\\nDatabase statistics:\");\r\nconsole.log(\"-\".repeat(20));\r\nuserServiceDB.getStats();\r\n\r\nconsole.log(\"\\nConnection details:\");\r\nconsole.log(\"-\".repeat(18));\r\nuserServiceDB.getConnectionInfo('default');\r\nconsole.log();\r\nuserServiceDB.getConnectionInfo('users');\r\nconsole.log();\r\nuserServiceDB.getConnectionInfo('orders');\r\n\r\nconsole.log(\"\\nShutdown:\");\r\nconsole.log(\"-\".repeat(9));\r\nuserServiceDB.closeAllConnections();\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,o.jsx)(e.h3,{id:"logger-singleton",children:"Logger Singleton"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Logger Singleton with different log levels\r\nclass Logger {\r\n  constructor() {\r\n    if (Logger.instance) {\r\n      return Logger.instance;\r\n    }\r\n    \r\n    this.logs = [];\r\n    this.level = \'info\'; // debug, info, warn, error\r\n    this.maxLogs = 1000;\r\n    this.created = new Date();\r\n    this.logCount = 0;\r\n    \r\n    Logger.instance = this;\r\n    console.log("\ud83d\udcdd Logger singleton created");\r\n  }\r\n  \r\n  static getInstance() {\r\n    if (!Logger.instance) {\r\n      Logger.instance = new Logger();\r\n    }\r\n    return Logger.instance;\r\n  }\r\n  \r\n  setLevel(level) {\r\n    const levels = [\'debug\', \'info\', \'warn\', \'error\'];\r\n    if (!levels.includes(level)) {\r\n      this.error(`Invalid log level: ${level}`);\r\n      return;\r\n    }\r\n    \r\n    const oldLevel = this.level;\r\n    this.level = level;\r\n    this.info(`Log level changed from ${oldLevel} to ${level}`);\r\n  }\r\n  \r\n  shouldLog(level) {\r\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\r\n    return levels[level] >= levels[this.level];\r\n  }\r\n  \r\n  log(level, message, category = \'GENERAL\') {\r\n    if (!this.shouldLog(level)) {\r\n      return;\r\n    }\r\n    \r\n    const logEntry = {\r\n      id: ++this.logCount,\r\n      timestamp: new Date(),\r\n      level: level.toUpperCase(),\r\n      category,\r\n      message\r\n    };\r\n    \r\n    this.logs.push(logEntry);\r\n    \r\n    // Keep only recent logs\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs = this.logs.slice(-this.maxLogs);\r\n    }\r\n    \r\n    // Output to console with formatting\r\n    const emoji = { debug: \'\ud83d\udc1b\', info: \'\u2139\ufe0f\', warn: \'\u26a0\ufe0f\', error: \'\u274c\' };\r\n    const timestamp = logEntry.timestamp.toLocaleTimeString();\r\n    console.log(`${emoji[level]} [${timestamp}] ${category}: ${message}`);\r\n  }\r\n  \r\n  debug(message, category) {\r\n    this.log(\'debug\', message, category);\r\n  }\r\n  \r\n  info(message, category) {\r\n    this.log(\'info\', message, category);\r\n  }\r\n  \r\n  warn(message, category) {\r\n    this.log(\'warn\', message, category);\r\n  }\r\n  \r\n  error(message, category) {\r\n    this.log(\'error\', message, category);\r\n  }\r\n  \r\n  getStats() {\r\n    const stats = { debug: 0, info: 0, warn: 0, error: 0 };\r\n    this.logs.forEach(log => {\r\n      stats[log.level.toLowerCase()]++;\r\n    });\r\n    \r\n    console.log("\ud83d\udcca Logger Statistics:");\r\n    console.log(`   Total Logs: ${this.logCount}`);\r\n    console.log(`   Current Level: ${this.level}`);\r\n    console.log(`   Debug: ${stats.debug}`);\r\n    console.log(`   Info: ${stats.info}`);\r\n    console.log(`   Warn: ${stats.warn}`);\r\n    console.log(`   Error: ${stats.error}`);\r\n    console.log(`   Created: ${this.created.toLocaleString()}`);\r\n    \r\n    return stats;\r\n  }\r\n  \r\n  getRecentLogs(count = 10) {\r\n    const recent = this.logs.slice(-count);\r\n    console.log(`\ud83d\udccb Recent ${count} logs:`);\r\n    recent.forEach(log => {\r\n      console.log(`   ${log.id}: [${log.level}] ${log.category} - ${log.message}`);\r\n    });\r\n    return recent;\r\n  }\r\n  \r\n  clearLogs() {\r\n    const count = this.logs.length;\r\n    this.logs = [];\r\n    console.log(`\ud83d\uddd1\ufe0f Cleared ${count} logs`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Logger Singleton Demo ===\\n");\r\n\r\nconsole.log("Different modules using logger:");\r\nconsole.log("-".repeat(30));\r\n\r\n// Module 1\r\nconsole.log("1. Authentication Module:");\r\nconst authLogger = Logger.getInstance();\r\nauthLogger.info("User login attempt", "AUTH");\r\nauthLogger.warn("Invalid password attempt", "AUTH");\r\nauthLogger.info("User successfully logged in", "AUTH");\r\n\r\nconsole.log("\\n2. Database Module:");\r\nconst dbLogger = Logger.getInstance();\r\ndbLogger.debug("Connection pool initialized", "DATABASE");\r\ndbLogger.info("Query executed successfully", "DATABASE");\r\ndbLogger.error("Connection timeout", "DATABASE");\r\n\r\nconsole.log("\\n3. API Module:");\r\nconst apiLogger = Logger.getInstance();\r\napiLogger.info("API server started on port 3000", "API");\r\napiLogger.warn("Rate limit approaching for user 123", "API");\r\n\r\nconsole.log("\\nVerifying singleton:");\r\nconsole.log("-".repeat(18));\r\nconsole.log(`authLogger === dbLogger: ${authLogger === dbLogger}`);\r\nconsole.log(`dbLogger === apiLogger: ${dbLogger === apiLogger}`);\r\n\r\nconsole.log("\\nChanging log level:");\r\nconsole.log("-".repeat(18));\r\nauthLogger.setLevel(\'warn\');\r\n\r\nconsole.log("\\nTesting with new level (debug should be filtered):");\r\nauthLogger.debug("This debug message won\'t show", "TEST");\r\nauthLogger.warn("This warning will show", "TEST");\r\n\r\nconsole.log("\\nLogger statistics:");\r\nconsole.log("-".repeat(18));\r\nauthLogger.getStats();\r\n\r\nconsole.log();\r\nauthLogger.getRecentLogs(5);\n'})}),"\n",(0,o.jsx)(e.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Controlled Access"}),": Guarantees only one instance exists"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Global Access"}),": Provides a global point of access"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Lazy Initialization"}),": Instance created only when needed"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Memory Efficient"}),": Saves memory by avoiding multiple instances"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Consistency"}),": Ensures consistent state across the application"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Global State"}),": Can make testing and debugging difficult"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Hidden Dependencies"}),": Makes dependencies less explicit"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Concurrency Issues"}),": Can cause problems in multi-threaded environments"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Tight Coupling"}),": Can create tight coupling between components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Difficult to Mock"}),": Hard to replace with mock objects for testing"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Resource Management"}),": Database connections, file handles, thread pools"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Configuration"}),": Application settings that should be consistent"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Logging"}),": Central logging mechanism"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Caching"}),": Shared cache across the application"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Hardware Access"}),": Printer spoolers, device drivers"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Coordinated Access"}),": When you need to coordinate actions across the system"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-implementation-variations",children:"\ud83d\udd04 Implementation Variations"}),"\n",(0,o.jsxs)(e.h3,{id:"1-eager-initialization",children:["1. ",(0,o.jsx)(e.strong,{children:"Eager Initialization"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"class EagerSingleton {\r\n  static instance = new EagerSingleton();\r\n  \r\n  constructor() {\r\n    if (EagerSingleton.instance) {\r\n      return EagerSingleton.instance;\r\n    }\r\n  }\r\n  \r\n  static getInstance() {\r\n    return EagerSingleton.instance;\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(e.h3,{id:"2-lazy-initialization-shown-in-examples-above",children:["2. ",(0,o.jsx)(e.strong,{children:"Lazy Initialization"})," (shown in examples above)"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"static getInstance() {\r\n  if (!MySingleton.instance) {\r\n    MySingleton.instance = new MySingleton();\r\n  }\r\n  return MySingleton.instance;\r\n}\n"})}),"\n",(0,o.jsxs)(e.h3,{id:"3-thread-safe-for-nodejs-with-worker-threads",children:["3. ",(0,o.jsx)(e.strong,{children:"Thread-Safe (for Node.js with worker threads)"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"const singletonInstances = new Map();\r\n\r\nclass ThreadSafeSingleton {\r\n  constructor() {\r\n    const className = this.constructor.name;\r\n    if (singletonInstances.has(className)) {\r\n      return singletonInstances.get(className);\r\n    }\r\n    singletonInstances.set(className, this);\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\ufe0f-anti-patterns-to-avoid",children:"\u26a0\ufe0f Anti-Patterns to Avoid"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Using Singleton for everything"}),": Not every class needs to be a singleton"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Making everything global"}),": Reduces testability and maintainability"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Ignoring dependency injection"}),": Singleton can hide dependencies"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Not considering alternatives"}),": Sometimes simple module patterns work better"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Factory Method"}),": Can use Singleton to ensure only one factory exists"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Abstract Factory"}),": Factory instances are often singletons"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Builder"}),": Director object might be a singleton"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Prototype"}),": Prototype registry can be implemented as singleton"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Facade"}),": Facade objects are often implemented as singletons"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://refactoring.guru/design-patterns/singleton",children:"Singleton Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons",children:"Singleton Pattern Criticisms"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>l});var r=t(6540);const o={},s=r.createContext(o);function i(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);