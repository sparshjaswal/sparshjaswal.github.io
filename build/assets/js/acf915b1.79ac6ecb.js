"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[8593],{980:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"javascript/how-browsers-load-webpages","title":"How Browsers Load Webpages - Complete Guide","description":"A comprehensive guide to understanding browser rendering processes, performance optimization, and modern web development practices.","source":"@site/docs/javascript/how-browsers-load-webpages.md","sourceDirName":"javascript","slug":"/javascript/how-browsers-load-webpages","permalink":"/docs/javascript/how-browsers-load-webpages","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Hoisting","permalink":"/docs/javascript/hoisting"},"next":{"title":"import-and-export","permalink":"/docs/javascript/import-and-export"}}');var i=r(4848),s=r(8453);const o={},a="How Browsers Load Webpages - Complete Guide",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Browser Architecture",id:"browser-architecture",level:2},{value:"Modern Browser Components",id:"modern-browser-components",level:3},{value:"Process Isolation Benefits",id:"process-isolation-benefits",level:3},{value:"Critical Rendering Path",id:"critical-rendering-path",level:2},{value:"The Complete Pipeline",id:"the-complete-pipeline",level:3},{value:"Detailed Phase Breakdown",id:"detailed-phase-breakdown",level:3},{value:"Phase 1: Network &amp; Parsing",id:"phase-1-network--parsing",level:4},{value:"Phase 2: Style Processing",id:"phase-2-style-processing",level:4},{value:"Phase 3: Layout &amp; Rendering",id:"phase-3-layout--rendering",level:4},{value:"DOM Construction Process",id:"dom-construction-process",level:2},{value:"DOM Building Steps",id:"dom-building-steps",level:3},{value:"1. Byte Conversion",id:"1-byte-conversion",level:4},{value:"2. Character Conversion",id:"2-character-conversion",level:4},{value:"3. Tokenization",id:"3-tokenization",level:4},{value:"4. Node Creation",id:"4-node-creation",level:4},{value:"5. DOM Tree Construction",id:"5-dom-tree-construction",level:4},{value:"DOM Construction Performance",id:"dom-construction-performance",level:3},{value:"CSSOM Construction",id:"cssom-construction",level:2},{value:"CSSOM Building Process",id:"cssom-building-process",level:3},{value:"1. CSS Parsing",id:"1-css-parsing",level:4},{value:"2. CSSOM Tree Structure",id:"2-cssom-tree-structure",level:4},{value:"3. Style Computation",id:"3-style-computation",level:4},{value:"Accessing CSSOM via JavaScript",id:"accessing-cssom-via-javascript",level:3},{value:"JavaScript Execution Context",id:"javascript-execution-context",level:2},{value:"Script Loading Behaviors",id:"script-loading-behaviors",level:3},{value:"1. Synchronous Scripts (Default)",id:"1-synchronous-scripts-default",level:4},{value:"2. Async Scripts",id:"2-async-scripts",level:4},{value:"3. Defer Scripts",id:"3-defer-scripts",level:4},{value:"4. Module Scripts (Modern Approach)",id:"4-module-scripts-modern-approach",level:4},{value:"Script Execution Timeline",id:"script-execution-timeline",level:3},{value:"Advanced Browser Internals",id:"advanced-browser-internals",level:2},{value:"V8 JavaScript Engine Architecture",id:"v8-javascript-engine-architecture",level:3},{value:"V8 Compilation Pipeline",id:"v8-compilation-pipeline",level:4},{value:"Hidden Classes and Inline Caching",id:"hidden-classes-and-inline-caching",level:4},{value:"Memory Management and Garbage Collection",id:"memory-management-and-garbage-collection",level:3},{value:"Understanding Memory Allocation",id:"understanding-memory-allocation",level:4},{value:"Garbage Collection Monitoring",id:"garbage-collection-monitoring",level:4},{value:"Network Layer Optimization",id:"network-layer-optimization",level:2},{value:"HTTP/3 and QUIC Protocol Benefits",id:"http3-and-quic-protocol-benefits",level:3},{value:"Understanding HTTP/3 Advantages",id:"understanding-http3-advantages",level:4},{value:"Security &amp; Loading Performance",id:"security--loading-performance",level:2},{value:"Content Security Policy (CSP) Impact",id:"content-security-policy-csp-impact",level:3},{value:"Implementing Performance-Aware CSP",id:"implementing-performance-aware-csp",level:4},{value:"CORS and Cross-Origin Resource Optimization",id:"cors-and-cross-origin-resource-optimization",level:3},{value:"Optimizing Cross-Origin Requests",id:"optimizing-cross-origin-requests",level:4},{value:"Subresource Integrity and Performance",id:"subresource-integrity-and-performance",level:3},{value:"Balancing Security and Speed",id:"balancing-security-and-speed",level:4}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"how-browsers-load-webpages---complete-guide",children:"How Browsers Load Webpages - Complete Guide"})}),"\n",(0,i.jsx)(e.p,{children:"A comprehensive guide to understanding browser rendering processes, performance optimization, and modern web development practices."}),"\n",(0,i.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#browser-architecture",children:"Browser Architecture"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#critical-rendering-path",children:"Critical Rendering Path"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#dom-construction-process",children:"DOM Construction Process"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#cssom-construction",children:"CSSOM Construction"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#javascript-execution-context",children:"JavaScript Execution Context"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#advanced-browser-internals",children:"Advanced Browser Internals"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#modern-web-apis--loading",children:"Modern Web APIs & Loading"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#network-layer-optimization",children:"Network Layer Optimization"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#security--loading-performance",children:"Security & Loading Performance"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#mobile--touch-optimizations",children:"Mobile & Touch Optimizations"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#modern-loading-strategies",children:"Modern Loading Strategies"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#framework-specific-patterns",children:"Framework-Specific Patterns"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#advanced-debugging--monitoring",children:"Advanced Debugging & Monitoring"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#webassembly-integration",children:"WebAssembly Integration"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#practical-examples",children:"Practical Examples"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(e.p,{children:"Understanding how browsers load and render webpages is crucial for building performant web applications. This process involves multiple phases that work together to transform HTML, CSS, and JavaScript into the visual webpage users see."}),"\n",(0,i.jsx)(e.h3,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"DOM (Document Object Model)"})," - Tree structure representing HTML elements"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"CSSOM (CSS Object Model)"})," - Tree structure representing CSS styles"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Render Tree"})," - Combined DOM and CSSOM for visual rendering"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"JavaScript Engine"})," - Executes JavaScript and manipulates DOM/CSSOM"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Layout Engine"})," - Calculates element positions and sizes"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Paint Engine"})," - Renders pixels to the screen"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"browser-architecture",children:"Browser Architecture"}),"\n",(0,i.jsx)(e.h3,{id:"modern-browser-components",children:"Modern Browser Components"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                    Browser Process                          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\r\n\u2502  \u2502    GPU      \u2502  \u2502   Network   \u2502  \u2502     Storage         \u2502  \u2502\r\n\u2502  \u2502  Process    \u2502  \u2502   Process   \u2502  \u2502     Process         \u2502  \u2502\r\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                 Renderer Process (Per Tab)                 \u2502\r\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\r\n\u2502  \u2502   Main      \u2502  \u2502 Compositor  \u2502  \u2502      Raster         \u2502  \u2502\r\n\u2502  \u2502   Thread    \u2502  \u2502   Thread    \u2502  \u2502      Thread         \u2502  \u2502\r\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(e.h3,{id:"process-isolation-benefits",children:"Process Isolation Benefits"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Security"}),": Each tab runs in isolation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Stability"}),": One tab crash doesn't affect others"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Performance"}),": Parallel processing across cores"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Resource Management"}),": Better memory and CPU allocation"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"critical-rendering-path",children:"Critical Rendering Path"}),"\n",(0,i.jsx)(e.p,{children:"The Critical Rendering Path (CRP) is the sequence of steps browsers follow to convert HTML, CSS, and JavaScript into pixels on the screen."}),"\n",(0,i.jsx)(e.h3,{id:"the-complete-pipeline",children:"The Complete Pipeline"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Network Request \u2192 HTML Parsing \u2192 DOM Construction\r\n                              \u2193\r\nCSS Parsing \u2192 CSSOM Construction \u2192 Render Tree Construction\r\n                              \u2193\r\nJavaScript Execution \u2190 \u2192 DOM/CSSOM Manipulation\r\n                              \u2193\r\nLayout (Reflow) \u2192 Paint \u2192 Composite \u2192 Display\n"})}),"\n",(0,i.jsx)(e.h3,{id:"detailed-phase-breakdown",children:"Detailed Phase Breakdown"}),"\n",(0,i.jsx)(e.h4,{id:"phase-1-network--parsing",children:"Phase 1: Network & Parsing"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"DNS Lookup"}),": Resolve domain to IP address"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"TCP Handshake"}),": Establish connection"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"HTTP Request/Response"}),": Download HTML"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"HTML Parsing"}),": Convert bytes to DOM"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"phase-2-style-processing",children:"Phase 2: Style Processing"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"CSS Download"}),": Fetch external stylesheets"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"CSS Parsing"}),": Convert CSS to CSSOM"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Style Computation"}),": Calculate final styles"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"phase-3-layout--rendering",children:"Phase 3: Layout & Rendering"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Render Tree"}),": Combine DOM + CSSOM"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Layout"}),": Calculate positions and sizes"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Paint"}),": Fill in pixels"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Composite"}),": Layer composition"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"dom-construction-process",children:"DOM Construction Process"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.strong,{children:"Document Object Model (DOM)"})," represents the HTML document as a tree of objects that JavaScript can manipulate."]}),"\n",(0,i.jsx)(e.h3,{id:"dom-building-steps",children:"DOM Building Steps"}),"\n",(0,i.jsx)(e.h4,{id:"1-byte-conversion",children:"1. Byte Conversion"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Raw bytes received from server\r\n[60, 104, 116, 109, 108, 62] // <html> in UTF-8\n"})}),"\n",(0,i.jsx)(e.h4,{id:"2-character-conversion",children:"2. Character Conversion"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Bytes converted to characters using charset encoding\r\n"<html><head><title>Page</title></head><body>...</body></html>"\n'})}),"\n",(0,i.jsx)(e.h4,{id:"3-tokenization",children:"3. Tokenization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Characters parsed into meaningful tokens\r\nconst tokens = [\r\n  { type: 'StartTag', name: 'html' },\r\n  { type: 'StartTag', name: 'head' },\r\n  { type: 'StartTag', name: 'title' },\r\n  { type: 'Characters', data: 'Page' },\r\n  { type: 'EndTag', name: 'title' },\r\n  // ... more tokens\r\n];\n"})}),"\n",(0,i.jsx)(e.h4,{id:"4-node-creation",children:"4. Node Creation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Tokens converted to Node objects\r\nclass HTMLElement {\r\n  constructor(tagName) {\r\n    this.tagName = tagName;\r\n    this.children = [];\r\n    this.attributes = new Map();\r\n    this.parent = null;\r\n  }\r\n}\r\n\r\nconst htmlElement = new HTMLElement('html');\r\nconst headElement = new HTMLElement('head');\n"})}),"\n",(0,i.jsx)(e.h4,{id:"5-dom-tree-construction",children:"5. DOM Tree Construction"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Example DOM structure\r\nconst dom = {\r\n  documentElement: {\r\n    tagName: 'HTML',\r\n    children: [\r\n      {\r\n        tagName: 'HEAD',\r\n        children: [\r\n          { tagName: 'TITLE', textContent: 'Page Title' },\r\n          { tagName: 'META', attributes: { charset: 'UTF-8' } }\r\n        ]\r\n      },\r\n      {\r\n        tagName: 'BODY',\r\n        children: [\r\n          { tagName: 'H1', textContent: 'Welcome' },\r\n          { tagName: 'P', textContent: 'Content here...' }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h3,{id:"dom-construction-performance",children:"DOM Construction Performance"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Measuring DOM construction time\r\nperformance.mark('dom-start');\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  performance.mark('dom-end');\r\n  performance.measure('dom-construction', 'dom-start', 'dom-end');\r\n  \r\n  const measure = performance.getEntriesByName('dom-construction')[0];\r\n  console.log(`DOM constructed in ${measure.duration}ms`);\r\n});\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"cssom-construction",children:"CSSOM Construction"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.strong,{children:"CSS Object Model (CSSOM)"})," represents all CSS styles as a tree structure that can be manipulated by JavaScript."]}),"\n",(0,i.jsx)(e.h3,{id:"cssom-building-process",children:"CSSOM Building Process"}),"\n",(0,i.jsx)(e.h4,{id:"1-css-parsing",children:"1. CSS Parsing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:"/* Input CSS */\r\nbody {\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.header {\r\n  background: blue;\r\n  padding: 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .header {\r\n    padding: 10px;\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"2-cssom-tree-structure",children:"2. CSSOM Tree Structure"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Conceptual CSSOM representation\r\nconst cssom = {\r\n  rules: [\r\n    {\r\n      selector: 'body',\r\n      declarations: {\r\n        'font-size': '16px',\r\n        'color': '#333'\r\n      }\r\n    },\r\n    {\r\n      selector: '.header',\r\n      declarations: {\r\n        'background': 'blue',\r\n        'padding': '20px'\r\n      }\r\n    }\r\n  ],\r\n  mediaRules: [\r\n    {\r\n      media: '(max-width: 768px)',\r\n      rules: [\r\n        {\r\n          selector: '.header',\r\n          declarations: {\r\n            'padding': '10px'\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n};\n"})}),"\n",(0,i.jsx)(e.h4,{id:"3-style-computation",children:"3. Style Computation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Browser computes final styles for each element\r\nfunction computeStyles(element, cssom) {\r\n  const computedStyle = {};\r\n  \r\n  // Apply default browser styles\r\n  Object.assign(computedStyle, getDefaultStyles(element.tagName));\r\n  \r\n  // Apply author styles (cascade, specificity, inheritance)\r\n  const matchingRules = findMatchingRules(element, cssom);\r\n  matchingRules.forEach(rule => {\r\n    Object.assign(computedStyle, rule.declarations);\r\n  });\r\n  \r\n  return computedStyle;\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"accessing-cssom-via-javascript",children:"Accessing CSSOM via JavaScript"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Modern way to interact with CSSOM\r\nconst element = document.querySelector('.header');\r\n\r\n// Get computed styles\r\nconst styles = window.getComputedStyle(element);\r\nconsole.log(styles.backgroundColor); // \"rgb(0, 0, 255)\"\r\n\r\n// Modify styles\r\nelement.style.setProperty('--custom-color', '#ff0000');\r\n\r\n// Access CSS rules\r\nconst styleSheet = document.styleSheets[0];\r\nconst rule = styleSheet.cssRules[0];\r\nconsole.log(rule.cssText); // \"body { font-size: 16px; color: rgb(51, 51, 51); }\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"javascript-execution-context",children:"JavaScript Execution Context"}),"\n",(0,i.jsx)(e.p,{children:"JavaScript can block DOM construction and manipulate both DOM and CSSOM, making its execution timing critical for performance."}),"\n",(0,i.jsx)(e.h3,{id:"script-loading-behaviors",children:"Script Loading Behaviors"}),"\n",(0,i.jsx)(e.h4,{id:"1-synchronous-scripts-default",children:"1. Synchronous Scripts (Default)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'\x3c!-- Blocks DOM parsing until script loads and executes --\x3e\r\n<script src="app.js"><\/script>\n'})}),"\n",(0,i.jsx)(e.h4,{id:"2-async-scripts",children:"2. Async Scripts"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'\x3c!-- Downloads in parallel, executes immediately when ready --\x3e\r\n<script src="analytics.js" async><\/script>\n'})}),"\n",(0,i.jsx)(e.h4,{id:"3-defer-scripts",children:"3. Defer Scripts"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'\x3c!-- Downloads in parallel, executes after DOM parsing --\x3e\r\n<script src="main.js" defer><\/script>\n'})}),"\n",(0,i.jsx)(e.h4,{id:"4-module-scripts-modern-approach",children:"4. Module Scripts (Modern Approach)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'\x3c!-- ES6 modules with automatic defer behavior --\x3e\r\n<script type="module" src="app.mjs"><\/script>\n'})}),"\n",(0,i.jsx)(e.h3,{id:"script-execution-timeline",children:"Script Execution Timeline"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Example of script execution monitoring\r\nclass ScriptPerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = new Map();\r\n  }\r\n  \r\n  trackScript(src) {\r\n    const startTime = performance.now();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = src;\r\n      \r\n      script.onload = () => {\r\n        const loadTime = performance.now() - startTime;\r\n        this.metrics.set(src, { loadTime, status: 'loaded' });\r\n        resolve();\r\n      };\r\n      \r\n      script.onerror = () => {\r\n        this.metrics.set(src, { status: 'error' });\r\n        reject(new Error(`Failed to load ${src}`));\r\n      };\r\n      \r\n      document.head.appendChild(script);\r\n    });\r\n  }\r\n  \r\n  getMetrics() {\r\n    return Object.fromEntries(this.metrics);\r\n  }\r\n}\r\n\r\n// Usage\r\nconst monitor = new ScriptPerformanceMonitor();\r\nmonitor.trackScript('/js/app.js').then(() => {\r\n  console.log('Script loaded:', monitor.getMetrics());\r\n});\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"advanced-browser-internals",children:"Advanced Browser Internals"}),"\n",(0,i.jsx)(e.h3,{id:"v8-javascript-engine-architecture",children:"V8 JavaScript Engine Architecture"}),"\n",(0,i.jsx)(e.p,{children:"Modern browsers use sophisticated JavaScript engines. V8 (used by Chrome and Node.js) exemplifies advanced compilation techniques."}),"\n",(0,i.jsx)(e.h4,{id:"v8-compilation-pipeline",children:"V8 Compilation Pipeline"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// V8's multi-tier compilation process\r\nclass V8CompilationExample {\r\n  static demonstrateOptimization() {\r\n    // This function shows how V8 optimizes code\r\n    function hotFunction(x, y) {\r\n      return x + y; // Initially interpreted\r\n    }\r\n    \r\n    // After many calls, V8 compiles this to optimized machine code\r\n    for (let i = 0; i < 10000; i++) {\r\n      hotFunction(i, i + 1); // Triggers TurboFan compilation\r\n    }\r\n    \r\n    // V8 can deoptimize if assumptions change\r\n    hotFunction(\"string\", \"concatenation\"); // May trigger deoptimization\r\n  }\r\n  \r\n  static monitorOptimization() {\r\n    // Use --trace-opt and --trace-deopt flags in Chrome\r\n    // chrome --js-flags=\"--trace-opt --trace-deopt\"\r\n    \r\n    performance.mark('function-start');\r\n    \r\n    // Code that will be optimized\r\n    const optimizedFunction = (data) => {\r\n      return data.map(item => item * 2).filter(item => item > 10);\r\n    };\r\n    \r\n    performance.mark('function-end');\r\n    performance.measure('function-execution', 'function-start', 'function-end');\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"hidden-classes-and-inline-caching",children:"Hidden Classes and Inline Caching"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Optimize object creation for V8\r\nclass OptimizedObjectPatterns {\r\n  // Good: Consistent object shape\r\n  static createOptimizedObjects() {\r\n    const objects = [];\r\n    \r\n    for (let i = 0; i < 1000; i++) {\r\n      // Same property order and types = same hidden class\r\n      objects.push({\r\n        id: i,\r\n        name: `object-${i}`,\r\n        active: true,\r\n        value: i * 2\r\n      });\r\n    }\r\n    \r\n    return objects;\r\n  }\r\n  \r\n  // Bad: Inconsistent object shapes\r\n  static createPessimizedObjects() {\r\n    const objects = [];\r\n    \r\n    for (let i = 0; i < 1000; i++) {\r\n      const obj = { id: i };\r\n      \r\n      // Adding properties in different orders creates multiple hidden classes\r\n      if (i % 2) {\r\n        obj.name = `object-${i}`;\r\n        obj.active = true;\r\n      } else {\r\n        obj.active = true;\r\n        obj.name = `object-${i}`;\r\n      }\r\n      \r\n      objects.push(obj);\r\n    }\r\n    \r\n    return objects;\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"memory-management-and-garbage-collection",children:"Memory Management and Garbage Collection"}),"\n",(0,i.jsx)(e.h4,{id:"understanding-memory-allocation",children:"Understanding Memory Allocation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Memory-efficient patterns for web applications\r\nclass MemoryOptimization {\r\n  constructor() {\r\n    this.cache = new Map();\r\n    this.weakCache = new WeakMap();\r\n    this.observers = new Set();\r\n  }\r\n  \r\n  // Object pooling for frequent allocations\r\n  static createObjectPool(createFn, resetFn, initialSize = 10) {\r\n    const pool = [];\r\n    \r\n    for (let i = 0; i < initialSize; i++) {\r\n      pool.push(createFn());\r\n    }\r\n    \r\n    return {\r\n      get() {\r\n        return pool.length > 0 ? pool.pop() : createFn();\r\n      },\r\n      \r\n      release(obj) {\r\n        resetFn(obj);\r\n        pool.push(obj);\r\n      },\r\n      \r\n      size() {\r\n        return pool.length;\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Example: DOM element pool\r\n  static createDOMElementPool() {\r\n    return this.createObjectPool(\r\n      () => document.createElement('div'),\r\n      (element) => {\r\n        element.className = '';\r\n        element.textContent = '';\r\n        element.style.cssText = '';\r\n        element.removeAttribute('data-id');\r\n      }\r\n    );\r\n  }\r\n  \r\n  // Memory leak prevention\r\n  preventMemoryLeaks() {\r\n    // Use WeakMap for DOM element associations\r\n    const elementData = new WeakMap();\r\n    \r\n    const attachData = (element, data) => {\r\n      elementData.set(element, data);\r\n    };\r\n    \r\n    // Automatic cleanup of event listeners\r\n    const managedListeners = new Map();\r\n    \r\n    const addManagedListener = (element, event, handler) => {\r\n      const key = `${element.id || 'unknown'}-${event}`;\r\n      \r\n      // Remove existing listener if any\r\n      if (managedListeners.has(key)) {\r\n        const { el, evt, h } = managedListeners.get(key);\r\n        el.removeEventListener(evt, h);\r\n      }\r\n      \r\n      element.addEventListener(event, handler);\r\n      managedListeners.set(key, { el: element, evt: event, h: handler });\r\n    };\r\n    \r\n    // Cleanup method\r\n    const cleanup = () => {\r\n      managedListeners.forEach(({ el, evt, h }) => {\r\n        el.removeEventListener(evt, h);\r\n      });\r\n      managedListeners.clear();\r\n    };\r\n    \r\n    return { attachData, addManagedListener, cleanup };\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"garbage-collection-monitoring",children:"Garbage Collection Monitoring"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Monitor and optimize garbage collection\r\nclass GCMonitor {\r\n  constructor() {\r\n    this.memoryMetrics = [];\r\n    this.setupMonitoring();\r\n  }\r\n  \r\n  setupMonitoring() {\r\n    // Modern browsers support PerformanceObserver for GC\r\n    if ('PerformanceObserver' in window) {\r\n      try {\r\n        const observer = new PerformanceObserver((list) => {\r\n          list.getEntries().forEach(entry => {\r\n            if (entry.entryType === 'measure' && entry.name.includes('gc')) {\r\n              this.recordGCEvent(entry);\r\n            }\r\n          });\r\n        });\r\n        \r\n        observer.observe({ entryTypes: ['measure'] });\r\n      } catch (error) {\r\n        console.log('GC monitoring not available:', error);\r\n      }\r\n    }\r\n    \r\n    // Manual memory monitoring\r\n    this.startMemoryMonitoring();\r\n  }\r\n  \r\n  startMemoryMonitoring() {\r\n    const checkMemory = () => {\r\n      if ('memory' in performance) {\r\n        const memInfo = {\r\n          used: performance.memory.usedJSHeapSize,\r\n          total: performance.memory.totalJSHeapSize,\r\n          limit: performance.memory.jsHeapSizeLimit,\r\n          timestamp: Date.now()\r\n        };\r\n        \r\n        this.memoryMetrics.push(memInfo);\r\n        this.analyzeMemoryTrends();\r\n      }\r\n    };\r\n    \r\n    // Check every 5 seconds\r\n    setInterval(checkMemory, 5000);\r\n    checkMemory();\r\n  }\r\n  \r\n  analyzeMemoryTrends() {\r\n    if (this.memoryMetrics.length < 3) return;\r\n    \r\n    const recent = this.memoryMetrics.slice(-3);\r\n    const increasing = recent.every((curr, i) => \r\n      i === 0 || curr.used > recent[i - 1].used\r\n    );\r\n    \r\n    if (increasing) {\r\n      const growth = recent[2].used - recent[0].used;\r\n      const timespan = recent[2].timestamp - recent[0].timestamp;\r\n      const growthRate = growth / timespan * 1000; // bytes per second\r\n      \r\n      if (growthRate > 100000) { // 100KB/s growth\r\n        console.warn('Potential memory leak detected:', {\r\n          growthRate: `${(growthRate / 1024).toFixed(2)} KB/s`,\r\n          currentUsage: `${(recent[2].used / 1024 / 1024).toFixed(2)} MB`\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  recordGCEvent(entry) {\r\n    console.log('GC Event:', {\r\n      duration: entry.duration,\r\n      startTime: entry.startTime,\r\n      type: entry.name\r\n    });\r\n  }\r\n  \r\n  triggerGC() {\r\n    // Force garbage collection in development (Chrome DevTools)\r\n    if (window.gc) {\r\n      window.gc();\r\n    } else {\r\n      console.log('Manual GC not available. Use Chrome DevTools or --expose-gc flag');\r\n    }\r\n  }\r\n}\r\n\r\n// Initialize GC monitoring\r\nconst gcMonitor = new GCMonitor();\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"network-layer-optimization",children:"Network Layer Optimization"}),"\n",(0,i.jsx)(e.h3,{id:"http3-and-quic-protocol-benefits",children:"HTTP/3 and QUIC Protocol Benefits"}),"\n",(0,i.jsx)(e.p,{children:"Modern web applications can leverage HTTP/3 for improved performance, especially on mobile networks."}),"\n",(0,i.jsx)(e.h4,{id:"understanding-http3-advantages",children:"Understanding HTTP/3 Advantages"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Monitor connection protocol and adapt accordingly\r\nclass NetworkOptimizer {\r\n  constructor() {\r\n    this.connectionInfo = this.getConnectionInfo();\r\n    this.setupNetworkMonitoring();\r\n  }\r\n  \r\n  getConnectionInfo() {\r\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\r\n    const protocol = this.detectHTTPVersion();\r\n    \r\n    return {\r\n      effectiveType: connection?.effectiveType || 'unknown',\r\n      downlink: connection?.downlink || 0,\r\n      rtt: connection?.rtt || 0,\r\n      saveData: connection?.saveData || false,\r\n      protocol: protocol\r\n    };\r\n  }\r\n  \r\n  detectHTTPVersion() {\r\n    // Check if HTTP/3 is supported\r\n    if ('navigator' in window && 'serviceWorker' in navigator) {\r\n      // Use Performance API to detect protocol\r\n      const entries = performance.getEntriesByType('navigation');\r\n      if (entries.length > 0) {\r\n        const navEntry = entries[0];\r\n        return navEntry.nextHopProtocol || 'unknown';\r\n      }\r\n    }\r\n    return 'unknown';\r\n  }\r\n  \r\n  setupNetworkMonitoring() {\r\n    // Monitor connection changes\r\n    if ('connection' in navigator) {\r\n      navigator.connection.addEventListener('change', () => {\r\n        this.connectionInfo = this.getConnectionInfo();\r\n        this.adaptToConnection();\r\n      });\r\n    }\r\n  }\r\n  \r\n  adaptToConnection() {\r\n    const { effectiveType, saveData, protocol } = this.connectionInfo;\r\n    \r\n    if (saveData) {\r\n      this.enableDataSaver();\r\n    }\r\n    \r\n    switch (effectiveType) {\r\n      case 'slow-2g':\r\n      case '2g':\r\n        this.optimizeForSlowConnection();\r\n        break;\r\n      case '3g':\r\n        this.optimizeForMediumConnection();\r\n        break;\r\n      case '4g':\r\n        this.optimizeForFastConnection();\r\n        break;\r\n    }\r\n    \r\n    if (protocol.includes('h3') || protocol.includes('quic')) {\r\n      this.enableHTTP3Optimizations();\r\n    }\r\n  }\r\n  \r\n  optimizeForSlowConnection() {\r\n    // Aggressive resource reduction\r\n    document.documentElement.classList.add('slow-connection');\r\n    \r\n    // Disable auto-loading content\r\n    document.querySelectorAll('img[loading=\"eager\"]').forEach(img => {\r\n      img.loading = 'lazy';\r\n    });\r\n    \r\n    // Use WebP with aggressive compression\r\n    this.enableAggressiveImageOptimization();\r\n  }\r\n  \r\n  optimizeForMediumConnection() {\r\n    document.documentElement.classList.add('medium-connection');\r\n    \r\n    // Selective preloading\r\n    this.enableSelectivePreloading();\r\n  }\r\n  \r\n  optimizeForFastConnection() {\r\n    document.documentElement.classList.add('fast-connection');\r\n    \r\n    // Aggressive preloading and prefetching\r\n    this.enableAggressivePreloading();\r\n  }\r\n  \r\n  enableHTTP3Optimizations() {\r\n    // Take advantage of HTTP/3 multiplexing\r\n    document.documentElement.classList.add('http3-enabled');\r\n    \r\n    // Enable server push hints\r\n    this.enableServerPushHints();\r\n    \r\n    // Use connection migration benefits\r\n    this.setupConnectionMigration();\r\n  }\r\n  \r\n  enableDataSaver() {\r\n    // Implement data saving strategies\r\n    document.documentElement.classList.add('data-saver');\r\n    \r\n    // Replace images with placeholders\r\n    document.querySelectorAll('img:not([data-original])').forEach(img => {\r\n      img.dataset.original = img.src;\r\n      img.src = this.generatePlaceholder(img.width, img.height);\r\n    });\r\n  }\r\n  \r\n  enableAggressiveImageOptimization() {\r\n    // Use modern image formats with fallbacks\r\n    document.querySelectorAll('img').forEach(img => {\r\n      if (!img.dataset.optimized) {\r\n        this.optimizeImage(img);\r\n        img.dataset.optimized = 'true';\r\n      }\r\n    });\r\n  }\r\n  \r\n  optimizeImage(img) {\r\n    const picture = document.createElement('picture');\r\n    \r\n    // AVIF for best compression\r\n    const avifSource = document.createElement('source');\r\n    avifSource.srcset = this.convertToFormat(img.src, 'avif');\r\n    avifSource.type = 'image/avif';\r\n    \r\n    // WebP fallback\r\n    const webpSource = document.createElement('source');\r\n    webpSource.srcset = this.convertToFormat(img.src, 'webp');\r\n    webpSource.type = 'image/webp';\r\n    \r\n    picture.appendChild(avifSource);\r\n    picture.appendChild(webpSource);\r\n    picture.appendChild(img.cloneNode(true));\r\n    \r\n    img.parentNode.replaceChild(picture, img);\r\n  }\r\n  \r\n  convertToFormat(src, format) {\r\n    // Placeholder for image format conversion\r\n    // In reality, this would be handled by your image CDN\r\n    return src.replace(/\\.(jpg|jpeg|png)$/, `.${format}`);\r\n  }\r\n  \r\n  generatePlaceholder(width, height) {\r\n    // Generate SVG placeholder\r\n    return `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`\r\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <rect width=\"100%\" height=\"100%\" fill=\"#f0f0f0\"/>\r\n        <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\".3em\" fill=\"#999\">\r\n          ${width}\xd7${height}\r\n        </text>\r\n      </svg>\r\n    `)}`;\r\n  }\r\n  \r\n  enableServerPushHints() {\r\n    // Add server push hints for HTTP/3\r\n    const criticalResources = [\r\n      '/css/critical.css',\r\n      '/js/app.js',\r\n      '/fonts/main.woff2'\r\n    ];\r\n    \r\n    criticalResources.forEach(resource => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preload';\r\n      link.href = resource;\r\n      link.as = this.getResourceType(resource);\r\n      \r\n      // Add push hint\r\n      link.setAttribute('data-server-push', 'true');\r\n      document.head.appendChild(link);\r\n    });\r\n  }\r\n  \r\n  getResourceType(url) {\r\n    if (url.includes('.css')) return 'style';\r\n    if (url.includes('.js')) return 'script';\r\n    if (url.includes('.woff')) return 'font';\r\n    return 'fetch';\r\n  }\r\n  \r\n  setupConnectionMigration() {\r\n    // Monitor for connection changes and prepare for migration\r\n    let connectionStart = performance.now();\r\n    \r\n    const checkConnection = () => {\r\n      const now = performance.now();\r\n      const duration = now - connectionStart;\r\n      \r\n      // If connection seems unstable, prepare for migration\r\n      if (duration > 5000 && this.connectionInfo.rtt > 500) {\r\n        this.prepareConnectionMigration();\r\n      }\r\n      \r\n      connectionStart = now;\r\n    };\r\n    \r\n    setInterval(checkConnection, 1000);\r\n  }\r\n  \r\n  prepareConnectionMigration() {\r\n    // Prepare for potential connection migration in HTTP/3\r\n    console.log('Preparing for connection migration');\r\n    \r\n    // Prebuffer critical resources\r\n    this.prebufferCriticalResources();\r\n  }\r\n  \r\n  prebufferCriticalResources() {\r\n    const criticalUrls = [\r\n      '/api/user-data',\r\n      '/api/app-config'\r\n    ];\r\n    \r\n    criticalUrls.forEach(async (url) => {\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.text();\r\n        \r\n        // Store in session storage for quick access\r\n        sessionStorage.setItem(`prebuffer_${url}`, data);\r\n      } catch (error) {\r\n        console.warn('Failed to prebuffer:', url, error);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// Initialize network optimizer\r\nconst networkOptimizer = new NetworkOptimizer();\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"security--loading-performance",children:"Security & Loading Performance"}),"\n",(0,i.jsx)(e.h3,{id:"content-security-policy-csp-impact",children:"Content Security Policy (CSP) Impact"}),"\n",(0,i.jsx)(e.p,{children:"CSP can significantly affect loading performance. Understanding how to optimize both security and performance is crucial."}),"\n",(0,i.jsx)(e.h4,{id:"implementing-performance-aware-csp",children:"Implementing Performance-Aware CSP"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Optimize CSP for both security and performance\r\nclass CSPOptimizer {\r\n  constructor() {\r\n    this.cspConfig = this.generateOptimalCSP();\r\n    this.nonces = new Map();\r\n    this.setupCSPMonitoring();\r\n  }\r\n  \r\n  generateOptimalCSP() {\r\n    const basePolicy = {\r\n      'default-src': [\"'self'\"],\r\n      'script-src': [\r\n        \"'self'\",\r\n        \"'nonce-{SCRIPT_NONCE}'\",\r\n        'https://trusted-cdn.com'\r\n      ],\r\n      'style-src': [\r\n        \"'self'\",\r\n        \"'nonce-{STYLE_NONCE}'\",\r\n        'https://fonts.googleapis.com'\r\n      ],\r\n      'img-src': [\r\n        \"'self'\",\r\n        'data:',\r\n        'https:',\r\n        'blob:'\r\n      ],\r\n      'font-src': [\r\n        \"'self'\",\r\n        'https://fonts.gstatic.com'\r\n      ],\r\n      'connect-src': [\r\n        \"'self'\",\r\n        'https://api.example.com',\r\n        'wss://websocket.example.com'\r\n      ],\r\n      'media-src': [\"'self'\", 'blob:', 'https:'],\r\n      'object-src': [\"'none'\"],\r\n      'base-uri': [\"'self'\"],\r\n      'form-action': [\"'self'\"],\r\n      'frame-ancestors': [\"'none'\"],\r\n      'upgrade-insecure-requests': []\r\n    };\r\n    \r\n    return this.optimizeForPerformance(basePolicy);\r\n  }\r\n  \r\n  optimizeForPerformance(policy) {\r\n    // Add performance-related CSP directives\r\n    const performanceOptimized = {\r\n      ...policy,\r\n      'report-uri': ['/csp-report'],\r\n      'report-to': ['csp-endpoint']\r\n    };\r\n    \r\n    // Enable resource hints within CSP\r\n    performanceOptimized['prefetch-src'] = [\"'self'\", 'https://cdn.example.com'];\r\n    \r\n    return performanceOptimized;\r\n  }\r\n  \r\n  generateNonce(type) {\r\n    const nonce = btoa(crypto.getRandomValues(new Uint8Array(16)).join(''));\r\n    this.nonces.set(type, nonce);\r\n    return nonce;\r\n  }\r\n  \r\n  applyCSP() {\r\n    const scriptNonce = this.generateNonce('script');\r\n    const styleNonce = this.generateNonce('style');\r\n    \r\n    let policyString = '';\r\n    \r\n    Object.entries(this.cspConfig).forEach(([directive, sources]) => {\r\n      if (sources.length === 0) {\r\n        policyString += `${directive}; `;\r\n      } else {\r\n        const processedSources = sources.map(source => \r\n          source.replace('{SCRIPT_NONCE}', scriptNonce)\r\n                .replace('{STYLE_NONCE}', styleNonce)\r\n        );\r\n        policyString += `${directive} ${processedSources.join(' ')}; `;\r\n      }\r\n    });\r\n    \r\n    // Apply via meta tag for immediate effect\r\n    const metaCSP = document.createElement('meta');\r\n    metaCSP.httpEquiv = 'Content-Security-Policy';\r\n    metaCSP.content = policyString.trim();\r\n    document.head.appendChild(metaCSP);\r\n    \r\n    return { scriptNonce, styleNonce };\r\n  }\r\n  \r\n  createSecureScript(src, nonce) {\r\n    const script = document.createElement('script');\r\n    script.src = src;\r\n    script.nonce = nonce;\r\n    \r\n    // Add integrity check for external scripts\r\n    if (src.startsWith('https://') && !src.includes(location.hostname)) {\r\n      script.integrity = this.generateIntegrityHash(src);\r\n      script.crossOrigin = 'anonymous';\r\n    }\r\n    \r\n    return script;\r\n  }\r\n  \r\n  createSecureStyle(href, nonce) {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = href;\r\n    link.nonce = nonce;\r\n    \r\n    // Add integrity for external stylesheets\r\n    if (href.startsWith('https://') && !href.includes(location.hostname)) {\r\n      link.integrity = this.generateIntegrityHash(href);\r\n      link.crossOrigin = 'anonymous';\r\n    }\r\n    \r\n    return link;\r\n  }\r\n  \r\n  async generateIntegrityHash(url) {\r\n    try {\r\n      const response = await fetch(url);\r\n      const content = await response.arrayBuffer();\r\n      const hashBuffer = await crypto.subtle.digest('SHA-256', content);\r\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n      const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n      return `sha256-${btoa(hashHex)}`;\r\n    } catch (error) {\r\n      console.warn('Failed to generate integrity hash for:', url);\r\n      return '';\r\n    }\r\n  }\r\n  \r\n  setupCSPMonitoring() {\r\n    // Monitor CSP violations\r\n    document.addEventListener('securitypolicyviolation', (event) => {\r\n      const violation = {\r\n        blockedURI: event.blockedURI,\r\n        violatedDirective: event.violatedDirective,\r\n        originalPolicy: event.originalPolicy,\r\n        sourceFile: event.sourceFile,\r\n        lineNumber: event.lineNumber,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      this.reportViolation(violation);\r\n      this.analyzePerformanceImpact(violation);\r\n    });\r\n  }\r\n  \r\n  reportViolation(violation) {\r\n    // Send violation report to server\r\n    if (navigator.sendBeacon) {\r\n      navigator.sendBeacon('/csp-report', JSON.stringify(violation));\r\n    }\r\n    \r\n    console.warn('CSP Violation:', violation);\r\n  }\r\n  \r\n  analyzePerformanceImpact(violation) {\r\n    // Check if violation affects performance-critical resources\r\n    const criticalResources = [\r\n      '/css/critical.css',\r\n      '/js/app.js',\r\n      'https://fonts.googleapis.com'\r\n    ];\r\n    \r\n    const isCritical = criticalResources.some(resource => \r\n      violation.blockedURI.includes(resource)\r\n    );\r\n    \r\n    if (isCritical) {\r\n      console.error('CSP blocking critical resource:', violation.blockedURI);\r\n      this.handleCriticalViolation(violation);\r\n    }\r\n  }\r\n  \r\n  handleCriticalViolation(violation) {\r\n    // Implement fallback loading strategy\r\n    if (violation.violatedDirective.includes('script-src')) {\r\n      this.loadScriptFallback(violation.blockedURI);\r\n    } else if (violation.violatedDirective.includes('style-src')) {\r\n      this.loadStyleFallback(violation.blockedURI);\r\n    }\r\n  }\r\n  \r\n  loadScriptFallback(originalSrc) {\r\n    // Try loading from alternative source\r\n    const fallbackSrc = originalSrc.replace('https://external-cdn.com', '/fallback');\r\n    \r\n    const script = document.createElement('script');\r\n    script.src = fallbackSrc;\r\n    script.nonce = this.nonces.get('script');\r\n    document.head.appendChild(script);\r\n  }\r\n  \r\n  loadStyleFallback(originalHref) {\r\n    // Inline critical CSS as fallback\r\n    const fallbackCSS = this.getCriticalCSS();\r\n    \r\n    const style = document.createElement('style');\r\n    style.nonce = this.nonces.get('style');\r\n    style.textContent = fallbackCSS;\r\n    document.head.appendChild(style);\r\n  }\r\n  \r\n  getCriticalCSS() {\r\n    // Return minimal critical CSS\r\n    return `\r\n      body { font-family: system-ui, sans-serif; }\r\n      .critical { display: block; }\r\n      .loading { opacity: 0.5; }\r\n    `;\r\n  }\r\n}\r\n\r\n// Initialize CSP optimizer\r\nconst cspOptimizer = new CSPOptimizer();\r\nconst { scriptNonce, styleNonce } = cspOptimizer.applyCSP();\r\n\r\n// Use secure script loading\r\nconst secureScript = cspOptimizer.createSecureScript('/js/app.js', scriptNonce);\r\ndocument.head.appendChild(secureScript);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"cors-and-cross-origin-resource-optimization",children:"CORS and Cross-Origin Resource Optimization"}),"\n",(0,i.jsx)(e.h4,{id:"optimizing-cross-origin-requests",children:"Optimizing Cross-Origin Requests"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Handle CORS efficiently for better performance\r\nclass CORSOptimizer {\r\n  constructor() {\r\n    this.trustedOrigins = new Set([\r\n      'https://api.example.com',\r\n      'https://cdn.example.com',\r\n      'https://fonts.googleapis.com'\r\n    ]);\r\n    this.preflightCache = new Map();\r\n    this.setupCORSOptimization();\r\n  }\r\n  \r\n  setupCORSOptimization() {\r\n    // Override fetch to optimize CORS requests\r\n    const originalFetch = window.fetch;\r\n    \r\n    window.fetch = async (url, options = {}) => {\r\n      const optimizedOptions = this.optimizeCORSRequest(url, options);\r\n      \r\n      try {\r\n        return await originalFetch(url, optimizedOptions);\r\n      } catch (error) {\r\n        return this.handleCORSError(url, options, error);\r\n      }\r\n    };\r\n  }\r\n  \r\n  optimizeCORSRequest(url, options) {\r\n    const urlObj = new URL(url, window.location.origin);\r\n    const isCrossOrigin = urlObj.origin !== window.location.origin;\r\n    \r\n    if (!isCrossOrigin) {\r\n      return options; // No optimization needed for same-origin\r\n    }\r\n    \r\n    const optimized = { ...options };\r\n    \r\n    // Optimize headers to avoid preflight when possible\r\n    if (optimized.headers) {\r\n      optimized.headers = this.optimizeHeaders(optimized.headers);\r\n    }\r\n    \r\n    // Use simple methods when possible\r\n    if (!optimized.method || optimized.method === 'GET') {\r\n      optimized.method = 'GET';\r\n    }\r\n    \r\n    // Add credentials only when needed\r\n    if (this.trustedOrigins.has(urlObj.origin)) {\r\n      optimized.credentials = 'include';\r\n    } else {\r\n      optimized.credentials = 'omit';\r\n    }\r\n    \r\n    // Cache preflight responses\r\n    if (this.requiresPreflight(optimized)) {\r\n      this.cachePreflightResponse(urlObj.origin);\r\n    }\r\n    \r\n    return optimized;\r\n  }\r\n  \r\n  optimizeHeaders(headers) {\r\n    const optimized = new Headers(headers);\r\n    \r\n    // Remove headers that trigger preflight if not necessary\r\n    const simpleHeaders = [\r\n      'accept',\r\n      'accept-language',\r\n      'content-language',\r\n      'content-type'\r\n    ];\r\n    \r\n    const allowedContentTypes = [\r\n      'application/x-www-form-urlencoded',\r\n      'multipart/form-data',\r\n      'text/plain'\r\n    ];\r\n    \r\n    // Only keep simple headers when possible\r\n    for (const [name, value] of optimized.entries()) {\r\n      const lowerName = name.toLowerCase();\r\n      \r\n      if (!simpleHeaders.includes(lowerName)) {\r\n        // Check if this header is really necessary\r\n        if (!this.isEssentialHeader(lowerName, value)) {\r\n          optimized.delete(name);\r\n        }\r\n      }\r\n      \r\n      // Optimize Content-Type\r\n      if (lowerName === 'content-type' && !allowedContentTypes.includes(value)) {\r\n        if (value.includes('application/json')) {\r\n          // This will trigger preflight, but it's often necessary\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return optimized;\r\n  }\r\n  \r\n  isEssentialHeader(name, value) {\r\n    const essentialHeaders = [\r\n      'authorization',\r\n      'x-api-key',\r\n      'x-csrf-token'\r\n    ];\r\n    \r\n    return essentialHeaders.includes(name);\r\n  }\r\n  \r\n  requiresPreflight(options) {\r\n    // Determine if request requires preflight\r\n    const method = options.method?.toUpperCase() || 'GET';\r\n    const simpleMethods = ['GET', 'HEAD', 'POST'];\r\n    \r\n    if (!simpleMethods.includes(method)) {\r\n      return true;\r\n    }\r\n    \r\n    // Check headers\r\n    if (options.headers) {\r\n      const headers = new Headers(options.headers);\r\n      for (const [name] of headers.entries()) {\r\n        if (!this.isSimpleHeader(name)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  isSimpleHeader(name) {\r\n    const simpleHeaders = [\r\n      'accept',\r\n      'accept-language',\r\n      'content-language',\r\n      'content-type'\r\n    ];\r\n    \r\n    return simpleHeaders.includes(name.toLowerCase());\r\n  }\r\n  \r\n  cachePreflightResponse(origin) {\r\n    if (this.preflightCache.has(origin)) {\r\n      return; // Already cached\r\n    }\r\n    \r\n    // Cache preflight response metadata\r\n    this.preflightCache.set(origin, {\r\n      timestamp: Date.now(),\r\n      maxAge: 86400000 // 24 hours default\r\n    });\r\n    \r\n    // Set timeout to clear cache\r\n    setTimeout(() => {\r\n      this.preflightCache.delete(origin);\r\n    }, 86400000);\r\n  }\r\n  \r\n  async handleCORSError(url, options, error) {\r\n    console.warn('CORS error for:', url, error);\r\n    \r\n    // Try fallback strategies\r\n    const urlObj = new URL(url, window.location.origin);\r\n    \r\n    // Strategy 1: Try with JSONP for GET requests\r\n    if (options.method === 'GET' || !options.method) {\r\n      const jsonpResult = await this.tryJSONP(url);\r\n      if (jsonpResult) {\r\n        return new Response(JSON.stringify(jsonpResult), {\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Strategy 2: Use proxy server\r\n    const proxyUrl = `/proxy?url=${encodeURIComponent(url)}`;\r\n    try {\r\n      return await fetch(proxyUrl, options);\r\n    } catch (proxyError) {\r\n      console.warn('Proxy fallback failed:', proxyError);\r\n    }\r\n    \r\n    // Strategy 3: Return cached response if available\r\n    const cached = await this.getCachedResponse(url);\r\n    if (cached) {\r\n      console.log('Returning cached response for CORS failed request');\r\n      return cached;\r\n    }\r\n    \r\n    // Re-throw original error if all strategies fail\r\n    throw error;\r\n  }\r\n  \r\n  tryJSONP(url) {\r\n    return new Promise((resolve, reject) => {\r\n      const callbackName = `jsonp_${Date.now()}_${Math.random().toString(36).substr(2)}`;\r\n      const script = document.createElement('script');\r\n      \r\n      // Set up callback\r\n      window[callbackName] = (data) => {\r\n        document.head.removeChild(script);\r\n        delete window[callbackName];\r\n        resolve(data);\r\n      };\r\n      \r\n      // Set up error handling\r\n      script.onerror = () => {\r\n        document.head.removeChild(script);\r\n        delete window[callbackName];\r\n        reject(new Error('JSONP failed'));\r\n      };\r\n      \r\n      // Add callback parameter to URL\r\n      const separator = url.includes('?') ? '&' : '?';\r\n      script.src = `${url}${separator}callback=${callbackName}`;\r\n      \r\n      document.head.appendChild(script);\r\n      \r\n      // Timeout after 10 seconds\r\n      setTimeout(() => {\r\n        if (script.parentNode) {\r\n          document.head.removeChild(script);\r\n          delete window[callbackName];\r\n          reject(new Error('JSONP timeout'));\r\n        }\r\n      }, 10000);\r\n    });\r\n  }\r\n  \r\n  async getCachedResponse(url) {\r\n    if ('caches' in window) {\r\n      const cache = await caches.open('cors-fallback');\r\n      return await cache.match(url);\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  // Performance monitoring for CORS requests\r\n  monitorCORSPerformance() {\r\n    const corsMetrics = {\r\n      preflightCount: 0,\r\n      preflightTime: 0,\r\n      corsErrors: 0,\r\n      successfulRequests: 0\r\n    };\r\n    \r\n    // Monitor using Performance Observer\r\n    const observer = new PerformanceObserver((list) => {\r\n      list.getEntries().forEach((entry) => {\r\n        if (entry.name.includes('://') && !entry.name.startsWith(location.origin)) {\r\n          corsMetrics.successfulRequests++;\r\n          \r\n          // Check if request had preflight\r\n          if (entry.requestStart - entry.fetchStart > 50) { // Threshold for preflight\r\n            corsMetrics.preflightCount++;\r\n            corsMetrics.preflightTime += entry.requestStart - entry.fetchStart;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    \r\n    observer.observe({ entryTypes: ['resource'] });\r\n    \r\n    // Report metrics periodically\r\n    setInterval(() => {\r\n      if (corsMetrics.successfulRequests > 0) {\r\n        console.log('CORS Performance Metrics:', {\r\n          ...corsMetrics,\r\n          avgPreflightTime: corsMetrics.preflightTime / corsMetrics.preflightCount || 0\r\n        });\r\n      }\r\n    }, 30000);\r\n  }\r\n}\r\n\r\n// Initialize CORS optimizer\r\nconst corsOptimizer = new CORSOptimizer();\r\ncorsOptimizer.monitorCORSPerformance();\n"})}),"\n",(0,i.jsx)(e.h3,{id:"subresource-integrity-and-performance",children:"Subresource Integrity and Performance"}),"\n",(0,i.jsx)(e.h4,{id:"balancing-security-and-speed",children:"Balancing Security and Speed"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Implement SRI with performance considerations\r\nclass SRIOptimizer {\r\n  constructor() {\r\n    this.integrityCache = new Map();\r\n    this.setupSRIOptimization();\r\n  }\r\n  \r\n  setupSRIOptimization() {\r\n    // Automatically add SRI to external resources\r\n    this.observeResourceAdditions();\r\n    this.optimizeExistingResources();\r\n  }\r\n  \r\n  observeResourceAdditions() {\r\n    const observer = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        mutation.addedNodes.forEach((node) => {\r\n          if (node.nodeType === Node.ELEMENT_NODE) {\r\n            this.processElement(node);\r\n          }\r\n        });\r\n      });\r\n    });\r\n    \r\n    observer.observe(document, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n  \r\n  optimizeExistingResources() {\r\n    // Process existing script and link elements\r\n    document.querySelectorAll('script[src], link[rel=\"stylesheet\"]').forEach(element => {\r\n      this.processElement(element);\r\n    });\r\n  }\r\n  \r\n  processElement(element) {\r\n    const tagName = element.tagName.toLowerCase();\r\n    \r\n    if (tagName === 'script' && element.src) {\r\n      this.addSRIToScript(element);\r\n    } else if (tagName === 'link' && element.rel === 'stylesheet' && element.href) {\r\n      this.addSRIToStylesheet(element);\r\n    }\r\n  }\r\n  \r\n  async addSRIToScript(script) {\r\n    if (script.integrity || !this.shouldAddSRI(script.src)) {\r\n      return;\r\n    }\r\n    \r\n    const integrity = await this.generateOrGetIntegrity(script.src);\r\n    if (integrity) {\r\n      script.integrity = integrity;\r\n      script.crossOrigin = 'anonymous';\r\n      \r\n      // Add fallback handling\r\n      this.addFallbackHandling(script);\r\n    }\r\n  }\r\n  \r\n  async addSRIToStylesheet(link) {\r\n    if (link.integrity || !this.shouldAddSRI(link.href)) {\r\n      return;\r\n    }\r\n    \r\n    const integrity = await this.generateOrGetIntegrity(link.href);\r\n    if (integrity) {\r\n      link.integrity = integrity;\r\n      link.crossOrigin = 'anonymous';\r\n      \r\n      // Add fallback handling\r\n      this.addFallbackHandling(link);\r\n    }\r\n  }\r\n  \r\n  shouldAddSRI(url) {\r\n    try {\r\n      const urlObj = new URL(url, window.location.origin);\r\n      \r\n      // Only add SRI to cross-origin resources\r\n      if (urlObj.origin === window.location.origin) {\r\n        return false;\r\n      }\r\n      \r\n      // Skip certain domains that don't support CORS\r\n      const skipDomains = [\r\n        'googletagmanager.com',\r\n        'google-analytics.com'\r\n      ];\r\n      \r\n      return !skipDomains.some(domain => urlObj.hostname.includes(domain));\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  async generateOrGetIntegrity(url) {\r\n    // Check cache first\r\n    if (this.integrityCache.has(url)) {\r\n      return this.integrityCache.get(url);\r\n    }\r\n    \r\n    try {\r\n      // Fetch resource with no-cors mode first\r\n      const response = await fetch(url, { mode: 'cors' });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n      \r\n      const content = await response.arrayBuffer();\r\n      const integrity = await this.computeIntegrity(content);\r\n      \r\n      // Cache the integrity hash\r\n      this.integrityCache.set(url, integrity);\r\n      \r\n      return integrity;\r\n    } catch (error) {\r\n      console.warn('Failed to generate SRI for:', url, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  async computeIntegrity(content) {\r\n    // Generate SHA-384 hash (recommended for SRI)\r\n    const hashBuffer = await crypto.subtle.digest('SHA-384', content);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashBase64 = btoa(String.fromCharCode(...hashArray));\r\n    return `sha384-${hashBase64}`;\r\n  }\r\n  \r\n  addFallbackHandling(element) {\r\n    const originalSrc = element.src || element.href;\r\n    \r\n    element.addEventListener('error', async (event) => {\r\n      console.warn('SRI validation failed for:', originalSrc);\r\n      \r\n      // Try loading without SRI\r\n      const fallback = element.cloneNode(true);\r\n      fallback.removeAttribute('integrity');\r\n      fallback.removeAttribute('crossorigin');\r\n      \r\n      // For scripts, try local fallback\r\n      if (element.tagName.toLowerCase() === 'script') {\r\n        await this.tryScriptFallback(fallback, originalSrc);\r\n      } else {\r\n        await this.tryStylesheetFallback(fallback, originalSrc);\r\n      }\r\n      \r\n      // Replace original element\r\n      element.parentNode.replaceChild(fallback, element);\r\n    });\r\n  }\r\n  \r\n  async tryScriptFallback(script, originalSrc) {\r\n    // Try to load from local backup\r\n    const fallbackSrc = this.getFallbackURL(originalSrc, 'js');\r\n    \r\n    if (fallbackSrc) {\r\n      script.src = fallbackSrc;\r\n    } else {\r\n      // Load inline fallback if available\r\n      const inlineFallback = this.getInlineScriptFallback(originalSrc);\r\n      if (inlineFallback) {\r\n        const inlineScript = document.createElement('script');\r\n        inlineScript.textContent = inlineFallback;\r\n        script.parentNode.replaceChild(inlineScript, script);\r\n      }\r\n    }\r\n  }\r\n  \r\n  async tryStylesheetFallback(link, originalHref) {\r\n    const fallbackHref = this.getFallbackURL(originalHref, 'css');\r\n    \r\n    if (fallbackHref) {\r\n      link.href = fallbackHref;\r\n    } else {\r\n      // Load inline CSS fallback\r\n      const inlineFallback = this.getInlineCSSFallback(originalHref);\r\n      if (inlineFallback) {\r\n        const style = document.createElement('style');\r\n        style.textContent = inlineFallback;\r\n        link.parentNode.replaceChild(style, link);\r\n      }\r\n    }\r\n  }\r\n  \r\n  getFallbackURL(originalUrl, type) {\r\n    // Map external URLs to local fallbacks\r\n    const fallbackMap = {\r\n      'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css': '/css/bootstrap.min.css',\r\n      'https://code.jquery.com/jquery-3.6.0.min.js': '/js/jquery.min.js'\r\n    };\r\n    \r\n    return fallbackMap[originalUrl] || null;\r\n  }\r\n  \r\n  getInlineScriptFallback(originalSrc) {\r\n    // Provide minimal inline fallbacks for critical scripts\r\n    const fallbacks = {\r\n      'jquery': 'window.jQuery = window.$ = function() { console.warn(\"jQuery fallback loaded\"); };'\r\n    };\r\n    \r\n    for (const [key, code] of Object.entries(fallbacks)) {\r\n      if (originalSrc.includes(key)) {\r\n        return code;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  getInlineCSSFallback(originalHref) {\r\n    // Provide minimal CSS fallbacks\r\n    const fallbacks = {\r\n      'bootstrap': `\r\n        .container { max-width: 1200px; margin: 0 auto; padding: 0 15px; }\r\n        .row { display: flex; flex-wrap: wrap; margin: 0 -15px; }\r\n        .col { flex: 1; padding: 0 15px; }\r\n      `\r\n    };\r\n    \r\n    for (const [key, css] of Object.entries(fallbacks)) {\r\n      if (originalHref.includes(key)) {\r\n        return css;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  // Performance monitoring for SRI\r\n  monitorSRIPerformance() {\r\n    const sriMetrics = {\r\n      totalResources: 0,\r\n      sriEnabled: 0,\r\n      sriFailures: 0,\r\n      fallbacksUsed: 0\r\n    };\r\n    \r\n    // Monitor resource loading\r\n    const observer = new PerformanceObserver((list) => {\r\n      list.getEntries().forEach((entry) => {\r\n        if (entry.name.includes('://') && !entry.name.startsWith(location.origin)) {\r\n          sriMetrics.totalResources++;\r\n          \r\n          // Check if resource has SRI\r\n          const element = this.findElementByURL(entry.name);\r\n          if (element && element.integrity) {\r\n            sriMetrics.sriEnabled++;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    \r\n    observer.observe({ entryTypes: ['resource'] });\r\n    \r\n    // Monitor SRI failures\r\n    document.addEventListener('error', (event) => {\r\n      if (event.target.integrity) {\r\n        sriMetrics.sriFailures++;\r\n        sriMetrics.fallbacksUsed++;\r\n      }\r\n    }, true);\r\n    \r\n    // Report metrics\r\n    setInterval(() => {\r\n      console.log('SRI Performance Metrics:', sriMetrics);\r\n    }, 30000);\r\n  }\r\n  \r\n  findElementByURL(url) {\r\n    return document.querySelector(`script[src=\"${url}\"], link[href=\"${url}\"]`);\r\n  }\r\n}\r\n\r\n// Initialize SRI optimizer\r\nconst sriOptimizer = new SRIOptimizer();\r\nsriOptimizer.monitorSRIPerformance();\n"})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);