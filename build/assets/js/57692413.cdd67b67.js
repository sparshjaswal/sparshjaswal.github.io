"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6998],{8020:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"functional-programming/function-and-composition/README","title":"\ud83d\udd04 Function Composition & Higher-Order Functions","description":"Master the art of combining simple functions to create powerful, reusable abstractions","source":"@site/docs/functional-programming/function-and-composition/README.md","sourceDirName":"functional-programming/function-and-composition","slug":"/functional-programming/function-and-composition/","permalink":"/docs/functional-programming/function-and-composition/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\ude80 Functional Programming - Quick Start Guide","permalink":"/docs/functional-programming/GETTING_STARTED"},"next":{"title":"\ud83c\udfad Functor Functions & Mappable Structures","permalink":"/docs/functional-programming/functor-functions/"}}');var i=t(4848),o=t(8453);const r={},a="\ud83d\udd04 Function Composition & Higher-Order Functions",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"First-Class Functions",id:"first-class-functions",level:2},{value:"Functions as Values",id:"functions-as-values",level:3},{value:"Function Declarations vs Expressions",id:"function-declarations-vs-expressions",level:3},{value:"Functions as Object Methods",id:"functions-as-object-methods",level:3},{value:"Higher-Order Functions",id:"higher-order-functions",level:2},{value:"Functions that Take Functions",id:"functions-that-take-functions",level:3},{value:"Functions that Return Functions",id:"functions-that-return-functions",level:3},{value:"Closures and Lexical Scope",id:"closures-and-lexical-scope",level:3},{value:"Function Composition",id:"function-composition",level:2},{value:"Basic Composition",id:"basic-composition",level:3},{value:"Multi-Function Composition",id:"multi-function-composition",level:3},{value:"Composition with Real Examples",id:"composition-with-real-examples",level:3},{value:"Pipe vs Compose",id:"pipe-vs-compose",level:2},{value:"Compose (Right to Left)",id:"compose-right-to-left",level:3},{value:"Pipe (Left to Right)",id:"pipe-left-to-right",level:3},{value:"When to Use Which",id:"when-to-use-which",level:3},{value:"Currying and Partial Application",id:"currying-and-partial-application",level:2},{value:"Currying",id:"currying",level:3},{value:"Practical Currying Examples",id:"practical-currying-examples",level:3},{value:"Partial Application",id:"partial-application",level:3},{value:"Point-Free Programming",id:"point-free-programming",level:2},{value:"Basic Point-Free Style",id:"basic-point-free-style",level:3},{value:"Advanced Point-Free Patterns",id:"advanced-point-free-patterns",level:3},{value:"Advanced Composition Patterns",id:"advanced-composition-patterns",level:2},{value:"Async Composition",id:"async-composition",level:3},{value:"Conditional Composition",id:"conditional-composition",level:3},{value:"Error Handling in Composition",id:"error-handling-in-composition",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Data Processing Pipeline",id:"data-processing-pipeline",level:3},{value:"API Request Builder",id:"api-request-builder",level:3},{value:"Form Validation Pipeline",id:"form-validation-pipeline",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Memoization with Composition",id:"memoization-with-composition",level:3},{value:"Lazy Evaluation",id:"lazy-evaluation",level:3},{value:"\ud83c\udfaf Key Takeaways",id:"-key-takeaways",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"-function-composition--higher-order-functions",children:"\ud83d\udd04 Function Composition & Higher-Order Functions"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Master the art of combining simple functions to create powerful, reusable abstractions"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#first-class-functions",children:"First-Class Functions"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#higher-order-functions",children:"Higher-Order Functions"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#function-composition",children:"Function Composition"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pipe-vs-compose",children:"Pipe vs Compose"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#currying-and-partial-application",children:"Currying and Partial Application"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#point-free-programming",children:"Point-Free Programming"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#advanced-composition-patterns",children:"Advanced Composition Patterns"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#real-world-examples",children:"Real-World Examples"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#performance-considerations",children:"Performance Considerations"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"first-class-functions",children:"First-Class Functions"}),"\n",(0,i.jsxs)(e.p,{children:["In JavaScript, functions are ",(0,i.jsx)(e.strong,{children:"first-class citizens"}),", meaning they can be:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Assigned to variables"}),"\n",(0,i.jsx)(e.li,{children:"Passed as arguments to other functions"}),"\n",(0,i.jsx)(e.li,{children:"Returned from functions"}),"\n",(0,i.jsx)(e.li,{children:"Stored in data structures"}),"\n",(0,i.jsx)(e.li,{children:"Created at runtime"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"functions-as-values",children:"Functions as Values"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Function as a variable\nconst greet = function(name) {\n    return `Hello, ${name}!`;\n};\n\n// \u2705 Function as an arrow function\nconst add = (a, b) => a + b;\n\n// \u2705 Function stored in an object\nconst mathOperations = {\n    add: (a, b) => a + b,\n    multiply: (a, b) => a * b,\n    divide: (a, b) => b !== 0 ? a / b : null\n};\n\n// \u2705 Function in an array\nconst operations = [\n    x => x + 1,\n    x => x * 2,\n    x => x ** 2\n];\n"})}),"\n",(0,i.jsx)(e.h3,{id:"function-declarations-vs-expressions",children:"Function Declarations vs Expressions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Function declaration - hoisted\nfunction declaredFunction(x) {\n    return x * 2;\n}\n\n// Function expression - not hoisted\nconst expressedFunction = function(x) {\n    return x * 2;\n};\n\n// Arrow function expression - concise syntax\nconst arrowFunction = x => x * 2;\n\n// Immediately Invoked Function Expression (IIFE)\nconst result = ((x) => x * 2)(5); // result = 10\n"})}),"\n",(0,i.jsx)(e.h3,{id:"functions-as-object-methods",children:"Functions as Object Methods"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Functions as object properties\nconst calculator = {\n    value: 0,\n    \n    // Method using function expression\n    add: function(n) {\n        return this.value + n;\n    },\n    \n    // Method using arrow function (no 'this' binding)\n    multiply: (n) => n * 2,\n    \n    // ES6 method syntax\n    subtract(n) {\n        return this.value - n;\n    }\n};\n\nconsole.log(calculator.add(5)); // 5\nconsole.log(calculator.multiply(3)); // 6\nconsole.log(calculator.subtract(2)); // -2\n"})}),"\n",(0,i.jsx)(e.h2,{id:"higher-order-functions",children:"Higher-Order Functions"}),"\n",(0,i.jsxs)(e.p,{children:["A ",(0,i.jsx)(e.strong,{children:"higher-order function"})," is a function that either:"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Takes one or more functions as arguments"}),"\n",(0,i.jsx)(e.li,{children:"Returns a function as its result"}),"\n",(0,i.jsx)(e.li,{children:"Or both"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"functions-that-take-functions",children:"Functions that Take Functions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Array methods are higher-order functions\nconst numbers = [1, 2, 3, 4, 5];\n\nconst doubled = numbers.map(x => x * 2);\n// [2, 4, 6, 8, 10]\n\nconst evens = numbers.filter(x => x % 2 === 0);\n// [2, 4]\n\nconst sum = numbers.reduce((acc, x) => acc + x, 0);\n// 15\n\n// \u2705 Custom higher-order function\nconst withLogging = (fn) => (...args) => {\n    console.log(`Calling function with args: ${args}`);\n    const result = fn(...args);\n    console.log(`Result: ${result}`);\n    return result;\n};\n\nconst addWithLogging = withLogging((a, b) => a + b);\naddWithLogging(3, 4); // Logs the call and result\n"})}),"\n",(0,i.jsx)(e.h3,{id:"functions-that-return-functions",children:"Functions that Return Functions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Function factory\nconst createMultiplier = (factor) => (value) => value * factor;\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(4)); // 12\n\n// \u2705 Configuration function\nconst createValidator = (rules) => (data) => {\n    return rules.every(rule => {\n        const isValid = rule.test(data);\n        if (!isValid) {\n            console.log(`Validation failed: ${rule.message}`);\n        }\n        return isValid;\n    });\n};\n\nconst emailRules = [\n    { test: email => email.includes('@'), message: 'Must contain @' },\n    { test: email => email.length > 3, message: 'Must be longer than 3 chars' }\n];\n\nconst validateEmail = createValidator(emailRules);\nconsole.log(validateEmail('user@example.com')); // true\n"})}),"\n",(0,i.jsx)(e.h3,{id:"closures-and-lexical-scope",children:"Closures and Lexical Scope"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Closures preserve outer function's variables\nconst createCounter = (initialValue = 0) => {\n    let count = initialValue;\n    \n    return {\n        increment: () => ++count,\n        decrement: () => --count,\n        getValue: () => count,\n        reset: () => { count = initialValue; return count; }\n    };\n};\n\nconst counter = createCounter(5);\nconsole.log(counter.increment()); // 6\nconsole.log(counter.increment()); // 7\nconsole.log(counter.getValue()); // 7\nconsole.log(counter.reset()); // 5\n\n// \u2705 Module pattern using closures\nconst mathModule = (() => {\n    const PI = 3.14159;\n    \n    const circleArea = (radius) => PI * radius * radius;\n    const circleCircumference = (radius) => 2 * PI * radius;\n    \n    return {\n        area: circleArea,\n        circumference: circleCircumference\n    };\n})();\n\nconsole.log(mathModule.area(5)); // 78.54\n// console.log(PI); // Error: PI is not accessible\n"})}),"\n",(0,i.jsx)(e.h2,{id:"function-composition",children:"Function Composition"}),"\n",(0,i.jsxs)(e.p,{children:["Function composition is the process of combining two or more functions to produce a new function. It's based on the mathematical concept where ",(0,i.jsx)(e.code,{children:"(f \u2218 g)(x) = f(g(x))"}),"."]}),"\n",(0,i.jsx)(e.h3,{id:"basic-composition",children:"Basic Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Manual composition\nconst add1 = x => x + 1;\nconst multiply2 = x => x * 2;\nconst square = x => x * x;\n\n// Composing manually\nconst addThenMultiplyThenSquare = x => square(multiply2(add1(x)));\nconsole.log(addThenMultiplyThenSquare(3)); // ((3+1)*2)^2 = 64\n\n// \u2705 Generic composition function\nconst compose = (f, g) => (x) => f(g(x));\n\nconst add1ThenMultiply2 = compose(multiply2, add1);\nconsole.log(add1ThenMultiply2(3)); // (3+1)*2 = 8\n"})}),"\n",(0,i.jsx)(e.h3,{id:"multi-function-composition",children:"Multi-Function Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// \u2705 Compose multiple functions (right to left)\nconst compose = (...fns) => (value) => \n    fns.reduceRight((acc, fn) => fn(acc), value);\n\n// \u2705 Pipe multiple functions (left to right)\nconst pipe = (...fns) => (value) => \n    fns.reduce((acc, fn) => fn(acc), value);\n\n// Example functions\nconst add = (x) => x + 1;\nconst multiply = (x) => x * 2;\nconst square = (x) => x * x;\nconst toString = (x) => `Result: ${x}`;\n\n// Using compose (reads right to left)\nconst complexOperation1 = compose(toString, square, multiply, add);\nconsole.log(complexOperation1(3)); // "Result: 64"\n\n// Using pipe (reads left to right - more intuitive)\nconst complexOperation2 = pipe(add, multiply, square, toString);\nconsole.log(complexOperation2(3)); // "Result: 64"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"composition-with-real-examples",children:"Composition with Real Examples"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Data transformation pipeline\nconst users = [\n    { name: 'John Doe', age: 25, active: true },\n    { name: 'Jane Smith', age: 30, active: false },\n    { name: 'Bob Johnson', age: 35, active: true }\n];\n\n// Individual transformation functions\nconst filterActive = users => users.filter(user => user.active);\nconst extractNames = users => users.map(user => user.name);\nconst sortNames = names => [...names].sort();\nconst formatList = names => names.join(', ');\n\n// Compose the pipeline\nconst getActiveUserNames = pipe(\n    filterActive,\n    extractNames,\n    sortNames,\n    formatList\n);\n\nconsole.log(getActiveUserNames(users)); // \"Bob Johnson, John Doe\"\n\n// \u2705 String processing pipeline\nconst processText = pipe(\n    text => text.toLowerCase(),\n    text => text.trim(),\n    text => text.replace(/\\s+/g, ' '),\n    text => text.split(' '),\n    words => words.filter(word => word.length > 2),\n    words => words.join('-')\n);\n\nconsole.log(processText('  Hello   World  FOO  ')); // \"hello-world\"\n"})}),"\n",(0,i.jsx)(e.h2,{id:"pipe-vs-compose",children:"Pipe vs Compose"}),"\n",(0,i.jsx)(e.h3,{id:"compose-right-to-left",children:"Compose (Right to Left)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Mathematical composition: f(g(x))\nconst compose = (...fns) => (value) => \n    fns.reduceRight((acc, fn) => fn(acc), value);\n\n// Reads from right to left\nconst operation = compose(\n    x => `Final: ${x}`,  // 4. Last operation\n    x => x * 2,          // 3. Then multiply by 2\n    x => x + 10,         // 2. Then add 10\n    x => x ** 2          // 1. First, square the input\n);\n\nconsole.log(operation(3)); // "Final: 38" (3^2 + 10) * 2 = 38\n'})}),"\n",(0,i.jsx)(e.h3,{id:"pipe-left-to-right",children:"Pipe (Left to Right)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Unix pipe-like: left to right flow\nconst pipe = (...fns) => (value) => \n    fns.reduce((acc, fn) => fn(acc), value);\n\n// Reads from left to right (more intuitive)\nconst operation = pipe(\n    x => x ** 2,         // 1. First, square the input\n    x => x + 10,         // 2. Then add 10\n    x => x * 2,          // 3. Then multiply by 2\n    x => `Final: ${x}`   // 4. Finally, format result\n);\n\nconsole.log(operation(3)); // "Final: 38"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"when-to-use-which",children:"When to Use Which"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pipe"}),": More intuitive, reads like a step-by-step process"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Compose"}),": Mathematical notation, common in functional programming literature"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Pipe for data transformation (recommended)\nconst processData = pipe(\n    validateInput,\n    sanitizeData,\n    transformData,\n    formatOutput\n);\n\n// \u2705 Compose for mathematical operations\nconst mathOperation = compose(\n    Math.sqrt,\n    x => x * 2,\n    x => x + 1\n);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"currying-and-partial-application",children:"Currying and Partial Application"}),"\n",(0,i.jsx)(e.h3,{id:"currying",children:"Currying"}),"\n",(0,i.jsx)(e.p,{children:"Currying transforms a function that takes multiple arguments into a series of functions that each take a single argument."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Manual currying\nconst add = (a) => (b) => (c) => a + b + c;\nconsole.log(add(1)(2)(3)); // 6\n\n// \u2705 Generic curry function\nconst curry = (fn) => {\n    return function curried(...args) {\n        if (args.length >= fn.length) {\n            return fn.apply(this, args);\n        } else {\n            return function(...nextArgs) {\n                return curried.apply(this, args.concat(nextArgs));\n            };\n        }\n    };\n};\n\n// Original function\nconst multiply = (a, b, c) => a * b * c;\n\n// Curried version\nconst curriedMultiply = curry(multiply);\n\nconsole.log(curriedMultiply(2)(3)(4)); // 24\nconsole.log(curriedMultiply(2, 3)(4)); // 24\nconsole.log(curriedMultiply(2)(3, 4)); // 24\nconsole.log(curriedMultiply(2, 3, 4)); // 24\n"})}),"\n",(0,i.jsx)(e.h3,{id:"practical-currying-examples",children:"Practical Currying Examples"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Configuration with currying\nconst createLogger = (level) => (module) => (message) => {\n    console.log(`[${level}] ${module}: ${message}`);\n};\n\nconst errorLogger = createLogger('ERROR');\nconst dbErrorLogger = errorLogger('DATABASE');\nconst apiErrorLogger = errorLogger('API');\n\ndbErrorLogger('Connection failed');    // [ERROR] DATABASE: Connection failed\napiErrorLogger('Invalid request');     // [ERROR] API: Invalid request\n\n// \u2705 Validation with currying\nconst validate = (rule) => (message) => (value) => {\n    if (!rule(value)) {\n        throw new Error(message);\n    }\n    return value;\n};\n\nconst isString = validate(x => typeof x === 'string');\nconst isNumber = validate(x => typeof x === 'number');\nconst isPositive = validate(x => x > 0);\n\nconst validateName = isString('Name must be a string');\nconst validateAge = pipe(\n    isNumber('Age must be a number'),\n    isPositive('Age must be positive')\n);\n\ntry {\n    const name = validateName('John');\n    const age = validateAge(25);\n    console.log({ name, age }); // { name: 'John', age: 25 }\n} catch (error) {\n    console.error(error.message);\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"partial-application",children:"Partial Application"}),"\n",(0,i.jsx)(e.p,{children:"Partial application is creating a new function by fixing some arguments of an existing function."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Manual partial application\nconst multiply = (a, b, c) => a * b * c;\nconst multiplyBy2 = (b, c) => multiply(2, b, c);\nconsole.log(multiplyBy2(3, 4)); // 24\n\n// \u2705 Generic partial function\nconst partial = (fn, ...args1) => (...args2) => fn(...args1, ...args2);\n\nconst multiplyBy2Partial = partial(multiply, 2);\nconsole.log(multiplyBy2Partial(3, 4)); // 24\n\n// \u2705 Partial application with object methods\nconst fetchData = (method, url, options) => {\n    return fetch(url, { method, ...options });\n};\n\nconst get = partial(fetchData, 'GET');\nconst post = partial(fetchData, 'POST');\n\n// Usage\nget('/api/users').then(response => response.json());\npost('/api/users', { body: JSON.stringify(userData) });\n"})}),"\n",(0,i.jsx)(e.h2,{id:"point-free-programming",children:"Point-Free Programming"}),"\n",(0,i.jsx)(e.p,{children:"Point-free style (also called tacit programming) is writing functions without explicitly mentioning their arguments."}),"\n",(0,i.jsx)(e.h3,{id:"basic-point-free-style",children:"Basic Point-Free Style"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u274c Pointful (explicit arguments)\nconst double = x => x * 2;\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(x => double(x));\n\n// \u2705 Point-free (no explicit arguments)\nconst doubled2 = numbers.map(double);\n\n// \u2705 More point-free examples\nconst add = (a, b) => a + b;\nconst isEven = x => x % 2 === 0;\nconst toString = x => x.toString();\n\n// Pointful\nconst processNumbers = arr => arr\n    .filter(x => isEven(x))\n    .map(x => add(x, 1))\n    .map(x => toString(x));\n\n// Point-free\nconst addOne = add.bind(null, 1); // or curry(add)(1)\nconst processNumbersPointFree = pipe(\n    arr => arr.filter(isEven),\n    arr => arr.map(addOne),\n    arr => arr.map(toString)\n);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"advanced-point-free-patterns",children:"Advanced Point-Free Patterns"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Point-free utility functions\nconst prop = (key) => (obj) => obj[key];\nconst not = (fn) => (...args) => !fn(...args);\nconst gt = (threshold) => (value) => value > threshold;\nconst lt = (threshold) => (value) => value < threshold;\n\n// Usage\nconst users = [\n    { name: 'John', age: 25, active: true },\n    { name: 'Jane', age: 17, active: false },\n    { name: 'Bob', age: 35, active: true }\n];\n\nconst getName = prop('name');\nconst getAge = prop('age');\nconst isActive = prop('active');\nconst isAdult = gt(18);\nconst isNotActive = not(isActive);\n\n// Point-free data processing\nconst getActiveAdultNames = pipe(\n    arr => arr.filter(isActive),\n    arr => arr.filter(user => isAdult(getAge(user))),\n    arr => arr.map(getName)\n);\n\nconsole.log(getActiveAdultNames(users)); // ['John', 'Bob']\n"})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-composition-patterns",children:"Advanced Composition Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"async-composition",children:"Async Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Async pipe\nconst pipeAsync = (...fns) => (value) => \n    fns.reduce((acc, fn) => acc.then(fn), Promise.resolve(value));\n\n// Async functions\nconst fetchUser = async (id) => {\n    const response = await fetch(`/api/users/${id}`);\n    return response.json();\n};\n\nconst enrichUser = async (user) => {\n    const posts = await fetch(`/api/users/${user.id}/posts`);\n    return { ...user, posts: await posts.json() };\n};\n\nconst formatUser = async (user) => ({\n    displayName: `${user.name} (${user.posts.length} posts)`,\n    ...user\n});\n\n// Compose async operations\nconst getUserWithPosts = pipeAsync(\n    fetchUser,\n    enrichUser,\n    formatUser\n);\n\n// Usage\ngetUserWithPosts(123)\n    .then(user => console.log(user))\n    .catch(error => console.error(error));\n"})}),"\n",(0,i.jsx)(e.h3,{id:"conditional-composition",children:"Conditional Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// \u2705 Conditional composition utilities\nconst when = (predicate, fn) => (value) => \n    predicate(value) ? fn(value) : value;\n\nconst unless = (predicate, fn) => (value) => \n    !predicate(value) ? fn(value) : value;\n\nconst branch = (predicate, trueFn, falseFn) => (value) => \n    predicate(value) ? trueFn(value) : falseFn(value);\n\n// Example usage\nconst processNumber = pipe(\n    x => x * 2,\n    when(x => x > 10, x => x + 5),\n    unless(x => x % 2 === 0, x => x + 1),\n    branch(\n        x => x > 20,\n        x => `High: ${x}`,\n        x => `Low: ${x}`\n    )\n);\n\nconsole.log(processNumber(3)); // "High: 12" -> 3*2=6, 6+5=11, 11+1=12, "High: 12"\nconsole.log(processNumber(8)); // "High: 21" -> 8*2=16, 16+5=21, "High: 21"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"error-handling-in-composition",children:"Error Handling in Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Safe composition with error handling\nconst tryCatch = (fn, defaultValue) => (value) => {\n    try {\n        return fn(value);\n    } catch (error) {\n        console.error('Error in composition:', error);\n        return defaultValue;\n    }\n};\n\nconst safeParseJSON = tryCatch(JSON.parse, {});\nconst safeToUpperCase = tryCatch(str => str.toUpperCase(), '');\n\n// Error-safe pipeline\nconst processData = pipe(\n    safeParseJSON,\n    data => data.message || 'No message',\n    safeToUpperCase,\n    str => `Processed: ${str}`\n);\n\nconsole.log(processData('{\"message\": \"hello\"}')); // \"Processed: HELLO\"\nconsole.log(processData('invalid json'));          // \"Processed: NO MESSAGE\"\n"})}),"\n",(0,i.jsx)(e.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,i.jsx)(e.h3,{id:"data-processing-pipeline",children:"Data Processing Pipeline"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 E-commerce order processing\nconst orders = [\n    { id: 1, items: [{ price: 10, qty: 2 }], customer: { type: 'premium' } },\n    { id: 2, items: [{ price: 5, qty: 1 }], customer: { type: 'regular' } },\n    { id: 3, items: [{ price: 15, qty: 3 }], customer: { type: 'premium' } }\n];\n\n// Individual processing functions\nconst calculateTotal = order => ({\n    ...order,\n    total: order.items.reduce((sum, item) => sum + (item.price * item.qty), 0)\n});\n\nconst applyDiscount = order => ({\n    ...order,\n    total: order.customer.type === 'premium' \n        ? order.total * 0.9 \n        : order.total\n});\n\nconst addTax = order => ({\n    ...order,\n    total: order.total * 1.08\n});\n\nconst formatCurrency = order => ({\n    ...order,\n    total: `$${order.total.toFixed(2)}`\n});\n\n// Compose the processing pipeline\nconst processOrder = pipe(\n    calculateTotal,\n    applyDiscount,\n    addTax,\n    formatCurrency\n);\n\nconst processedOrders = orders.map(processOrder);\nconsole.log(processedOrders);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"api-request-builder",children:"API Request Builder"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Functional API request builder\nconst createRequest = (baseURL) => ({\n    url: baseURL,\n    method: 'GET',\n    headers: {},\n    params: {}\n});\n\nconst setMethod = (method) => (request) => ({\n    ...request,\n    method\n});\n\nconst setHeader = (key, value) => (request) => ({\n    ...request,\n    headers: { ...request.headers, [key]: value }\n});\n\nconst setParam = (key, value) => (request) => ({\n    ...request,\n    params: { ...request.params, [key]: value }\n});\n\nconst setAuth = (token) => setHeader('Authorization', `Bearer ${token}`);\nconst setContentType = (type) => setHeader('Content-Type', type);\nconst setJSON = setContentType('application/json');\n\n// Build requests using composition\nconst getUsers = pipe(\n    createRequest,\n    setMethod('GET'),\n    setJSON,\n    setAuth('your-token-here'),\n    setParam('page', 1),\n    setParam('limit', 10)\n);\n\nconst userRequest = getUsers('/api/users');\nconsole.log(userRequest);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"form-validation-pipeline",children:"Form Validation Pipeline"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Functional form validation\nconst createValidator = (rules) => (data) => {\n    const errors = [];\n    \n    rules.forEach(rule => {\n        const result = rule(data);\n        if (result.error) {\n            errors.push(result.error);\n        }\n    });\n    \n    return {\n        isValid: errors.length === 0,\n        errors,\n        data\n    };\n};\n\n// Validation rules\nconst required = (field, message) => (data) => ({\n    error: !data[field] ? message : null\n});\n\nconst minLength = (field, min, message) => (data) => ({\n    error: data[field] && data[field].length < min ? message : null\n});\n\nconst email = (field, message) => (data) => ({\n    error: data[field] && !/\\S+@\\S+\\.\\S+/.test(data[field]) ? message : null\n});\n\n// Create specific validators\nconst validateUser = createValidator([\n    required('name', 'Name is required'),\n    minLength('name', 2, 'Name must be at least 2 characters'),\n    required('email', 'Email is required'),\n    email('email', 'Email format is invalid'),\n    minLength('password', 8, 'Password must be at least 8 characters')\n]);\n\n// Test the validator\nconst userData = {\n    name: 'Jo',\n    email: 'john@example.com',\n    password: 'short'\n};\n\nconst result = validateUser(userData);\nconsole.log(result);\n// { isValid: false, errors: ['Name must be at least 2 characters', 'Password must be at least 8 characters'], data: {...} }\n"})}),"\n",(0,i.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(e.h3,{id:"memoization-with-composition",children:"Memoization with Composition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Memoize expensive composed functions\nconst memoize = (fn) => {\n    const cache = new Map();\n    return (...args) => {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = fn(...args);\n        cache.set(key, result);\n        return result;\n    };\n};\n\n// Expensive operations\nconst expensiveCalc1 = (x) => {\n    console.log('Calculating step 1');\n    return x * x;\n};\n\nconst expensiveCalc2 = (x) => {\n    console.log('Calculating step 2');\n    return x + 10;\n};\n\n// Memoized composition\nconst expensiveOperation = memoize(\n    pipe(expensiveCalc1, expensiveCalc2)\n);\n\nconsole.log(expensiveOperation(5)); // Logs \"Calculating...\" and returns 35\nconsole.log(expensiveOperation(5)); // Returns 35 from cache, no logs\n"})}),"\n",(0,i.jsx)(e.h3,{id:"lazy-evaluation",children:"Lazy Evaluation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Lazy function composition\nconst lazy = (fn) => {\n    let computed = false;\n    let result;\n    \n    return (...args) => {\n        if (!computed) {\n            result = fn(...args);\n            computed = true;\n        }\n        return result;\n    };\n};\n\n// Create lazy pipeline\nconst lazyPipeline = (...fns) => (value) => {\n    const lazyFns = fns.map(fn => lazy(() => fn));\n    return (inputValue = value) => {\n        return lazyFns.reduce((acc, fn) => fn()(acc), inputValue);\n    };\n};\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-key-takeaways",children:"\ud83c\udfaf Key Takeaways"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Functions are first-class citizens"})," in JavaScript - treat them as values"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Higher-order functions"})," enable powerful abstractions and reusability"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Composition over inheritance"})," - build complexity from simple functions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pipe vs Compose"})," - choose based on readability preferences"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Currying enables partial application"})," - create specialized functions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Point-free style reduces noise"})," but balance with readability"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error handling"})," should be built into your composition patterns"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Performance matters"})," - use memoization and lazy evaluation when appropriate"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Function composition is the heart of functional programming. It enables you to build complex behavior from simple, pure functions while maintaining readability and reusability."}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.em,{children:["Next: Learn about ",(0,i.jsx)(e.a,{href:"../Functor%20Functions/",children:"Functor Functions"})," to understand how to work with values in containers."]})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);