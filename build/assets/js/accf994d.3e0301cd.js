"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4814],{6503:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"javascript/function-closure","title":"JavaScript Closures","description":"What is a Closure?","source":"@site/docs/javascript/function-closure.md","sourceDirName":"javascript","slug":"/javascript/function-closure","permalink":"/docs/javascript/function-closure","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"function-callback","permalink":"/docs/javascript/function-callback"},"next":{"title":"IIFE (Immediately Invoked Function Expression)","permalink":"/docs/javascript/function-iife"}}');var i=t(4848),l=t(8453);const a={},s="JavaScript Closures",o={},c=[{value:"What is a Closure?",id:"what-is-a-closure",level:2},{value:"Basic Example",id:"basic-example",level:2},{value:"How Closures Work",id:"how-closures-work",level:2},{value:"Practical Use Cases",id:"practical-use-cases",level:2},{value:"1. Data Privacy",id:"1-data-privacy",level:3},{value:"2. Function Factory",id:"2-function-factory",level:3},{value:"3. Module Pattern",id:"3-module-pattern",level:3},{value:"Common Pitfall: Loop with Closures",id:"common-pitfall-loop-with-closures",level:2},{value:"Problem:",id:"problem",level:3},{value:"Solutions:",id:"solutions",level:3},{value:"Key Points",id:"key-points",level:2},{value:"5. \ud83c\udfed Factory Functions",id:"5--factory-functions",level:3},{value:"\ud83d\udd27 Advanced Closure Patterns",id:"-advanced-closure-patterns",level:2},{value:"\ud83c\udfdb\ufe0f Module Pattern (Pre-ES6 Modules)",id:"\ufe0f-module-pattern-pre-es6-modules",level:3},{value:"\ud83d\udd04 Function Currying",id:"-function-currying",level:3},{value:"\u23f0 Debouncing and Throttling",id:"-debouncing-and-throttling",level:3},{value:"\u26a0\ufe0f Common Closure Pitfalls",id:"\ufe0f-common-closure-pitfalls",level:2},{value:"\ud83e\udeb2 The Classic Loop Problem",id:"-the-classic-loop-problem",level:3},{value:"\u2705 Solutions:",id:"-solutions",level:3},{value:"Solution 1: IIFE (Immediately Invoked Function Expression)",id:"solution-1-iife-immediately-invoked-function-expression",level:4},{value:"Solution 2: Use <code>let</code> instead of <code>var</code>",id:"solution-2-use-let-instead-of-var",level:4},{value:"Solution 3: Bind method",id:"solution-3-bind-method",level:4},{value:"\ud83d\udcbe Memory Leaks",id:"-memory-leaks",level:3},{value:"\ud83e\uddea Practice Exercises",id:"-practice-exercises",level:2},{value:"Exercise 1: Counter with Reset",id:"exercise-1-counter-with-reset",level:3},{value:"Exercise 2: Private Variable Logger",id:"exercise-2-private-variable-logger",level:3},{value:"Exercise 3: Function Timer",id:"exercise-3-function-timer",level:3},{value:"\ud83c\udfaf Key Takeaways",id:"-key-takeaways",level:2},{value:"\ud83e\udde0 Mental Checklist for Closures:",id:"-mental-checklist-for-closures",level:3},{value:"Case 2 (callback)",id:"case-2-callback",level:4}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"javascript-closures",children:"JavaScript Closures"})}),"\n",(0,i.jsx)(e.h2,{id:"what-is-a-closure",children:"What is a Closure?"}),"\n",(0,i.jsx)(e.p,{children:"A closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created."}),"\n",(0,i.jsx)(e.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function outerFunction(x) {\n    // Outer function's variable\n    let outerVariable = x;\n    \n    function innerFunction(y) {\n        // Inner function can access outer variable\n        console.log(outerVariable + y);\n    }\n    \n    return innerFunction;\n}\n\nconst addFive = outerFunction(5);\naddFive(3); // Output: 8\n"})}),"\n",(0,i.jsx)(e.h2,{id:"how-closures-work",children:"How Closures Work"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function createCounter() {\n    let count = 0; // Private variable\n    \n    return function() {\n        count++; // Accesses outer scope\n        return count;\n    };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1()); // 1\nconsole.log(counter1()); // 2\nconsole.log(counter2()); // 1 (independent counter)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"practical-use-cases",children:"Practical Use Cases"}),"\n",(0,i.jsx)(e.h3,{id:"1-data-privacy",children:"1. Data Privacy"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function createBankAccount(initialBalance) {\n    let balance = initialBalance; // Private variable\n    \n    return {\n        deposit(amount) {\n            balance += amount;\n            return balance;\n        },\n        withdraw(amount) {\n            if (amount <= balance) {\n                balance -= amount;\n                return balance;\n            }\n            return "Insufficient funds";\n        },\n        getBalance() {\n            return balance;\n        }\n    };\n}\n\nconst account = createBankAccount(100);\naccount.deposit(50); // 150\nconsole.log(account.balance); // undefined (private!)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-function-factory",children:"2. Function Factory"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function multiplyBy(factor) {\n    return function(number) {\n        return number * factor;\n    };\n}\n\nconst double = multiplyBy(2);\nconst triple = multiplyBy(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-module-pattern",children:"3. Module Pattern"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const calculator = (function() {\n    let result = 0; // Private variable\n    \n    return {\n        add(x) {\n            result += x;\n            return this;\n        },\n        multiply(x) {\n            result *= x;\n            return this;\n        },\n        getResult() {\n            return result;\n        },\n        reset() {\n            result = 0;\n            return this;\n        }\n    };\n})();\n\ncalculator.add(5).multiply(2).getResult(); // 10\n"})}),"\n",(0,i.jsx)(e.h2,{id:"common-pitfall-loop-with-closures",children:"Common Pitfall: Loop with Closures"}),"\n",(0,i.jsx)(e.h3,{id:"problem",children:"Problem:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"for (var i = 0; i < 3; i++) {\n    setTimeout(function() {\n        console.log(i); // Prints 3, 3, 3\n    }, 1000);\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"solutions",children:"Solutions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Solution 1: Use let instead of var\nfor (let i = 0; i < 3; i++) {\n    setTimeout(function() {\n        console.log(i); // Prints 0, 1, 2\n    }, 1000);\n}\n\n// Solution 2: IIFE (Immediately Invoked Function Expression)\nfor (var i = 0; i < 3; i++) {\n    (function(j) {\n        setTimeout(function() {\n            console.log(j); // Prints 0, 1, 2\n        }, 1000);\n    })(i);\n}\n\n// Solution 3: bind method\nfor (var i = 0; i < 3; i++) {\n    setTimeout(function(j) {\n        console.log(j); // Prints 0, 1, 2\n    }.bind(null, i), 1000);\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"key-points",children:"Key Points"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Closures preserve the environment in which they were created"}),"\n",(0,i.jsx)(e.li,{children:"Inner functions have access to outer function variables"}),"\n",(0,i.jsx)(e.li,{children:"Variables remain accessible even after outer function returns"}),"\n",(0,i.jsx)(e.li,{children:"Each closure maintains its own copy of variables"}),"\n",(0,i.jsx)(e.li,{children:"Useful for data privacy, callbacks, and module patterns"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"    clickCount++;\n    console.log(`${name} clicked ${clickCount} times`);\n    \n    if (clickCount >= 5) {\n      console.log(`${name} has been clicked too many times!`);\n      event.target.disabled = true;\n    }\n  };\n}\n\n// In a web page:\ndocument.getElementById('button1').addEventListener('click', \n  createClickHandler('Save Button')\n);\n\ndocument.getElementById('button2').addEventListener('click', \n  createClickHandler('Delete Button')\n);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"5--factory-functions",children:"5. \ud83c\udfed Factory Functions"}),"\n",(0,i.jsx)(e.p,{children:"Creating specialized functions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function createValidator(rules) {\n  return function(value) {\n    for (const rule of rules) {\n      if (!rule.test(value)) {\n        return {\n          isValid: false,\n          message: rule.message\n        };\n      }\n    }\n    \n    return { isValid: true };\n  };\n}\n\nconst emailValidator = createValidator([\n  {\n    test: (value) => value.includes('@'),\n    message: 'Email must contain @'\n  },\n  {\n    test: (value) => value.length >= 5,\n    message: 'Email must be at least 5 characters'\n  },\n  {\n    test: (value) => /\\.[a-z]{2,}$/i.test(value),\n    message: 'Email must have valid domain'\n  }\n]);\n\nconsole.log(emailValidator(\"test@example.com\")); // { isValid: true }\nconsole.log(emailValidator(\"invalid\"));          // { isValid: false, message: ... }\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-advanced-closure-patterns",children:"\ud83d\udd27 Advanced Closure Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"\ufe0f-module-pattern-pre-es6-modules",children:"\ud83c\udfdb\ufe0f Module Pattern (Pre-ES6 Modules)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const Calculator = (function() {\n  // Private variables and functions\n  let history = [];\n  \n  function addToHistory(operation, result) {\n    history.push({ operation, result, timestamp: new Date() });\n  }\n  \n  function validateNumber(num) {\n    if (typeof num !== 'number' || isNaN(num)) {\n      throw new Error('Invalid number');\n    }\n  }\n  \n  // Public API\n  return {\n    add(a, b) {\n      validateNumber(a);\n      validateNumber(b);\n      const result = a + b;\n      addToHistory(`${a} + ${b}`, result);\n      return result;\n    },\n    \n    subtract(a, b) {\n      validateNumber(a);\n      validateNumber(b);\n      const result = a - b;\n      addToHistory(`${a} - ${b}`, result);\n      return result;\n    },\n    \n    getHistory() {\n      return [...history]; // Return copy, not original\n    },\n    \n    clearHistory() {\n      history = [];\n    }\n  };\n})();\n\nCalculator.add(5, 3);        // 8\nCalculator.subtract(10, 4);  // 6\nconsole.log(Calculator.getHistory());\n// [\n//   { operation: \"5 + 3\", result: 8, timestamp: ... },\n//   { operation: \"10 - 4\", result: 6, timestamp: ... }\n// ]\n\n// Private functions are not accessible:\n// Calculator.addToHistory(); // \u274c Error\n// Calculator.validateNumber(); // \u274c Error\n"})}),"\n",(0,i.jsx)(e.h3,{id:"-function-currying",children:"\ud83d\udd04 Function Currying"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function curry(fn) {\n  return function curried(...args) {\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function(...nextArgs) {\n        return curried.apply(this, args.concat(nextArgs));\n      };\n    }\n  };\n}\n\n// Example usage\nfunction multiply(a, b, c) {\n  return a * b * c;\n}\n\nconst curriedMultiply = curry(multiply);\n\nconsole.log(curriedMultiply(2)(3)(4));     // 24\nconsole.log(curriedMultiply(2, 3)(4));     // 24\nconsole.log(curriedMultiply(2)(3, 4));     // 24\n\n// Partial application\nconst double = curriedMultiply(2);\nconst quadruple = double(2);\n\nconsole.log(quadruple(5)); // 20 (2 * 2 * 5)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"-debouncing-and-throttling",children:"\u23f0 Debouncing and Throttling"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function debounce(func, delay) {\n  let timeoutId;\n  \n  return function(...args) {\n    clearTimeout(timeoutId);\n    \n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n\nfunction throttle(func, interval) {\n  let lastCallTime = 0;\n  \n  return function(...args) {\n    const now = Date.now();\n    \n    if (now - lastCallTime >= interval) {\n      lastCallTime = now;\n      func.apply(this, args);\n    }\n  };\n}\n\n// Usage examples\nconst debouncedSave = debounce(saveData, 1000);\nconst throttledScroll = throttle(handleScroll, 100);\n\n// In event handlers:\n// searchInput.addEventListener('input', debouncedSave);\n// window.addEventListener('scroll', throttledScroll);\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"\ufe0f-common-closure-pitfalls",children:"\u26a0\ufe0f Common Closure Pitfalls"}),"\n",(0,i.jsx)(e.h3,{id:"-the-classic-loop-problem",children:"\ud83e\udeb2 The Classic Loop Problem"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// \u274c PROBLEM: All buttons alert "3"\nfunction createButtons() {\n  const buttons = [];\n  \n  for (var i = 0; i < 3; i++) {\n    buttons.push(function() {\n      alert("Button " + i); // i is 3 for all functions!\n    });\n  }\n  \n  return buttons;\n}\n\nconst buttonHandlers = createButtons();\nbuttonHandlers[0](); // Alerts "Button 3" (not "Button 0"!)\nbuttonHandlers[1](); // Alerts "Button 3" (not "Button 1"!)\nbuttonHandlers[2](); // Alerts "Button 3" \u2713\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Why this happens"}),": All functions share the same ",(0,i.jsx)(e.code,{children:"i"})," variable, which becomes 3 after the loop finishes."]}),"\n",(0,i.jsx)(e.h3,{id:"-solutions",children:"\u2705 Solutions:"}),"\n",(0,i.jsx)(e.h4,{id:"solution-1-iife-immediately-invoked-function-expression",children:"Solution 1: IIFE (Immediately Invoked Function Expression)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function createButtons() {\n  const buttons = [];\n  \n  for (var i = 0; i < 3; i++) {\n    buttons.push((function(index) {\n      return function() {\n        alert("Button " + index);\n      };\n    })(i)); // Immediately invoke with current i value\n  }\n  \n  return buttons;\n}\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"solution-2-use-let-instead-of-var",children:["Solution 2: Use ",(0,i.jsx)(e.code,{children:"let"})," instead of ",(0,i.jsx)(e.code,{children:"var"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function createButtons() {\n  const buttons = [];\n  \n  for (let i = 0; i < 3; i++) { // let creates new binding each iteration\n    buttons.push(function() {\n      alert("Button " + i);\n    });\n  }\n  \n  return buttons;\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"solution-3-bind-method",children:"Solution 3: Bind method"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function createButtons() {\n  const buttons = [];\n  \n  for (var i = 0; i < 3; i++) {\n    buttons.push(function(index) {\n      alert("Button " + index);\n    }.bind(null, i));\n  }\n  \n  return buttons;\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"-memory-leaks",children:"\ud83d\udcbe Memory Leaks"}),"\n",(0,i.jsx)(e.p,{children:"Be careful with closures that hold references to large objects:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// \u274c POTENTIAL MEMORY LEAK\nfunction attachListener(element) {\n  const largeData = new Array(1000000).fill('data');\n  \n  element.addEventListener('click', function() {\n    // Even though we don't use largeData here,\n    // the closure keeps it in memory!\n    console.log('Clicked');\n  });\n}\n\n// \u2705 BETTER: Don't capture unnecessary variables\nfunction attachListener(element) {\n  element.addEventListener('click', function() {\n    console.log('Clicked');\n  });\n}\n\n// \u2705 OR: Explicitly null out references when done\nfunction attachListener(element) {\n  let largeData = new Array(1000000).fill('data');\n  \n  // ... use largeData ...\n  \n  element.addEventListener('click', function() {\n    largeData = null; // Release the reference\n    console.log('Clicked');\n  });\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-practice-exercises",children:"\ud83e\uddea Practice Exercises"}),"\n",(0,i.jsx)(e.h3,{id:"exercise-1-counter-with-reset",children:"Exercise 1: Counter with Reset"}),"\n",(0,i.jsx)(e.p,{children:"Create a counter function that can increment, decrement, and reset:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function createAdvancedCounter(initialValue = 0) {\n  // Your code here\n  \n  return {\n    increment: /* function */,\n    decrement: /* function */,\n    reset: /* function */,\n    getValue: /* function */\n  };\n}\n\nconst counter = createAdvancedCounter(10);\nconsole.log(counter.getValue()); // 10\ncounter.increment();\nconsole.log(counter.getValue()); // 11\ncounter.reset();\nconsole.log(counter.getValue()); // 10\n"})}),"\n",(0,i.jsx)(e.h3,{id:"exercise-2-private-variable-logger",children:"Exercise 2: Private Variable Logger"}),"\n",(0,i.jsx)(e.p,{children:"Create a function that maintains a private log of all values it's called with:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function createLogger() {\n  // Your code here\n  \n  return {\n    log: /* function that logs and stores messages */,\n    getHistory: /* function that returns all logged messages */,\n    clear: /* function that clears the history */\n  };\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"exercise-3-function-timer",children:"Exercise 3: Function Timer"}),"\n",(0,i.jsx)(e.p,{children:"Create a function that measures how long other functions take to execute:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'function createTimer() {\n  // Your code here - should return a function that:\n  // 1. Takes another function as argument\n  // 2. Measures execution time\n  // 3. Returns the result and time taken\n}\n\nconst timer = createTimer();\nconst result = timer(() => {\n  // Some expensive operation\n  for(let i = 0; i < 1000000; i++) {}\n  return "done";\n});\nconsole.log(result); // { result: "done", timeMs: 5.2 }\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-key-takeaways",children:"\ud83c\udfaf Key Takeaways"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud83d\udd12 Privacy"}),": Closures provide true data privacy in JavaScript"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud83d\udcbe State Management"}),": Perfect for maintaining state without global variables"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u26a1 Performance"}),": Enable optimization patterns like memoization"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud83c\udfed Factory Pattern"}),": Great for creating specialized functions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u26a0\ufe0f Memory Awareness"}),": Be mindful of what variables your closures capture"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud83d\udd04 Event Handling"}),": Excellent for maintaining state in event handlers"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"-mental-checklist-for-closures",children:"\ud83e\udde0 Mental Checklist for Closures:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"What variables does my inner function need?"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Am I accidentally capturing large objects?"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Is this the right pattern for my use case?"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Could I solve this with classes instead?"})}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\ud83c\udf93 Next Chapter"}),": Now that you've mastered closures, let's explore ",(0,i.jsx)(e.a,{href:"./09.%20Function-IIFE.md",children:"IIFE (Immediately Invoked Function Expressions)"})," to see how they work together with closures to create powerful patterns!"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"  (function (index) {\n    setTimeout(() => {\n      console.log(array[index]);\n    }, 3000);\n  })(i);\n}\n"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.h4,{id:"case-2-callback",children:"Case 2 (callback)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'function delay(){\n      var value =10;\n      setTimeout(function(){\n          console.log("this is callback function"+value)\n      },3000)\n}\ndelay();\n'})})]})}function d(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var r=t(6540);const i={},l=r.createContext(i);function a(n){const e=r.useContext(l);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(l.Provider,{value:e},n.children)}}}]);