"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6217],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},9466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"javascript/js-best-practices","title":"\ud83d\ude80 Modern JavaScript Best Practices & Performance Guide","description":"A comprehensive guide to writing clean, efficient, and maintainable JavaScript code in 2025","source":"@site/docs/javascript/js-best-practices.md","sourceDirName":"javascript","slug":"/javascript/js-best-practices","permalink":"/docs/javascript/js-best-practices","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Unit of JavaScript Compiler","permalink":"/docs/javascript/javascript-engine-basic-unit"},"next":{"title":"\ud83d\udd11 Chapter 3: Keywords and Identifiers in JavaScript","permalink":"/docs/javascript/keyword"}}');var r=t(4848),a=t(8453);const i={},o="\ud83d\ude80 Modern JavaScript Best Practices & Performance Guide",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"\ud83c\udfaf Code Quality &amp; Standards",id:"-code-quality--standards",level:2},{value:"Use Strict Mode",id:"use-strict-mode",level:3},{value:"Consistent Naming Conventions",id:"consistent-naming-conventions",level:3},{value:"\ud83d\udcdd Variable &amp; Function Best Practices",id:"-variable--function-best-practices",level:2},{value:"Prefer const and let over var",id:"prefer-const-and-let-over-var",level:3},{value:"Object and Array Destructuring",id:"object-and-array-destructuring",level:3},{value:"Modern Function Patterns",id:"modern-function-patterns",level:3},{value:"\u26a0\ufe0f Error Handling &amp; Type Safety",id:"\ufe0f-error-handling--type-safety",level:2},{value:"Comprehensive Error Handling",id:"comprehensive-error-handling",level:3},{value:"Input Validation &amp; Type Checking",id:"input-validation--type-checking",level:3},{value:"\u26a1 Performance Optimization",id:"-performance-optimization",level:2},{value:"Efficient DOM Manipulation",id:"efficient-dom-manipulation",level:3},{value:"Debouncing and Throttling",id:"debouncing-and-throttling",level:3},{value:"Memoization for Expensive Operations",id:"memoization-for-expensive-operations",level:3},{value:"\ud83d\udd04 Modern Async Patterns",id:"-modern-async-patterns",level:2},{value:"Advanced Promise Patterns",id:"advanced-promise-patterns",level:3},{value:"Modern Async Iteration",id:"modern-async-iteration",level:3},{value:"\ud83e\uddea Testing &amp; Debugging",id:"-testing--debugging",level:2},{value:"Unit Testing Best Practices",id:"unit-testing-best-practices",level:3},{value:"Debugging Utilities",id:"debugging-utilities",level:3},{value:"\ud83d\udd12 Security Best Practices",id:"-security-best-practices",level:2},{value:"Input Sanitization &amp; XSS Prevention",id:"input-sanitization--xss-prevention",level:3},{value:"\ud83e\udde0 Memory Management",id:"-memory-management",level:2},{value:"Preventing Memory Leaks",id:"preventing-memory-leaks",level:3},{value:"\ud83c\udfaf Legacy Code Examples &amp; Fixes",id:"-legacy-code-examples--fixes",level:2},{value:"Common Issues &amp; Solutions",id:"common-issues--solutions",level:3},{value:"\ud83d\udcda Additional Resources",id:"-additional-resources",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-modern-javascript-best-practices--performance-guide",children:"\ud83d\ude80 Modern JavaScript Best Practices & Performance Guide"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A comprehensive guide to writing clean, efficient, and maintainable JavaScript code in 2025"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#code-quality--standards",children:"Code Quality & Standards"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#variable--function-best-practices",children:"Variable & Function Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#error-handling--type-safety",children:"Error Handling & Type Safety"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modern-async-patterns",children:"Modern Async Patterns"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#testing--debugging",children:"Testing & Debugging"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-best-practices",children:"Security Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#memory-management",children:"Memory Management"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-code-quality--standards",children:"\ud83c\udfaf Code Quality & Standards"}),"\n",(0,r.jsx)(n.h3,{id:"use-strict-mode",children:"Use Strict Mode"}),"\n",(0,r.jsx)(n.p,{children:"Always use strict mode to catch common mistakes and improve performance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use strict';\n\n// \u2705 Good - catches undeclared variables\nconst userName = 'John';\n\n// \u274c Bad - would create global variable without strict mode\n// userName = 'John';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"consistent-naming-conventions",children:"Consistent Naming Conventions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Use descriptive, consistent names\nconst MAX_RETRY_ATTEMPTS = 3;\nconst userAccountBalance = 1500.75;\nconst isUserAuthenticated = true;\n\nfunction calculateTotalPrice(items, taxRate) {\n  return items.reduce((total, item) => total + item.price, 0) * (1 + taxRate);\n}\n\nclass UserAccount {\n  constructor(email, name) {\n    this.email = email;\n    this.name = name;\n  }\n  \n  async validateCredentials() {\n    // Implementation\n  }\n}\n\n// \u274c Bad - Unclear, inconsistent names\nconst MAX = 3;\nconst bal = 1500.75;\nconst auth = true;\n\nfunction calc(x, y) {\n  return x.reduce((a, b) => a + b.p, 0) * (1 + y);\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-variable--function-best-practices",children:"\ud83d\udcdd Variable & Function Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"prefer-const-and-let-over-var",children:"Prefer const and let over var"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Use const for values that won't be reassigned\nconst API_URL = 'https://api.example.com';\nconst users = ['Alice', 'Bob', 'Charlie'];\n\n// \u2705 Good - Use let for variables that will be reassigned\nlet currentUserIndex = 0;\nlet isLoading = false;\n\n// \u274c Bad - var has function scope and hoisting issues\nvar count = 0; // Use let instead\nvar name = 'John'; // Use const instead\n"})}),"\n",(0,r.jsx)(n.h3,{id:"object-and-array-destructuring",children:"Object and Array Destructuring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Clean destructuring\nconst user = { name: 'Alice', age: 30, email: 'alice@example.com' };\nconst { name, age, email } = user;\n\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, second, ...rest] = numbers;\n\n// \u2705 Good - Default values and renaming\nconst { name: userName = 'Anonymous', age: userAge = 0 } = user || {};\n\n// \u2705 Good - Function parameter destructuring\nfunction createUser({ name, email, age = 18 }) {\n  return { name, email, age, id: Date.now() };\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modern-function-patterns",children:"Modern Function Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Arrow functions for short operations\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(n => n * 2);\nconst evens = numbers.filter(n => n % 2 === 0);\n\n// \u2705 Good - Pure functions\nconst calculateDiscountedPrice = (price, discountPercent) => {\n  return price * (1 - discountPercent / 100);\n};\n\n// \u2705 Good - Higher-order functions\nconst createValidator = (rules) => (data) => {\n  return rules.every(rule => rule(data));\n};\n\nconst emailValidator = createValidator([\n  data => data.includes('@'),\n  data => data.length > 5,\n  data => data.includes('.')\n]);\n\n// \u2705 Good - Function composition\nconst pipe = (...fns) => (value) => fns.reduce((acc, fn) => fn(acc), value);\n\nconst processUserInput = pipe(\n  input => input.trim(),\n  input => input.toLowerCase(),\n  input => input.replace(/\\s+/g, '-')\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-error-handling--type-safety",children:"\u26a0\ufe0f Error Handling & Type Safety"}),"\n",(0,r.jsx)(n.h3,{id:"comprehensive-error-handling",children:"Comprehensive Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Result pattern for error handling\nclass Result {\n  constructor(value, error = null) {\n    this.value = value;\n    this.error = error;\n  }\n  \n  static success(value) {\n    return new Result(value);\n  }\n  \n  static failure(error) {\n    return new Result(null, error);\n  }\n  \n  isSuccess() {\n    return this.error === null;\n  }\n  \n  isFailure() {\n    return this.error !== null;\n  }\n  \n  map(fn) {\n    return this.isSuccess() ? Result.success(fn(this.value)) : this;\n  }\n  \n  flatMap(fn) {\n    return this.isSuccess() ? fn(this.value) : this;\n  }\n}\n\n// \u2705 Good - Safe API calls\nasync function fetchUserSafely(userId) {\n  try {\n    const response = await fetch(`/api/users/${userId}`);\n    \n    if (!response.ok) {\n      return Result.failure(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const user = await response.json();\n    return Result.success(user);\n  } catch (error) {\n    return Result.failure(`Network error: ${error.message}`);\n  }\n}\n\n// Usage\nconst userResult = await fetchUserSafely(123);\nif (userResult.isSuccess()) {\n  console.log('User:', userResult.value);\n} else {\n  console.error('Error:', userResult.error);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"input-validation--type-checking",children:"Input Validation & Type Checking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Runtime type validation\nconst validateUser = (user) => {\n  const errors = [];\n  \n  if (typeof user !== 'object' || user === null) {\n    errors.push('User must be an object');\n    return { isValid: false, errors };\n  }\n  \n  if (typeof user.name !== 'string' || user.name.trim() === '') {\n    errors.push('Name must be a non-empty string');\n  }\n  \n  if (typeof user.email !== 'string' || !user.email.includes('@')) {\n    errors.push('Email must be a valid email address');\n  }\n  \n  if (typeof user.age !== 'number' || user.age < 0 || user.age > 150) {\n    errors.push('Age must be a number between 0 and 150');\n  }\n  \n  return { isValid: errors.length === 0, errors };\n};\n\n// \u2705 Good - Schema validation with defaults\nconst createUserSchema = (input) => {\n  const defaults = {\n    name: '',\n    email: '',\n    age: 18,\n    isActive: true\n  };\n  \n  return {\n    ...defaults,\n    ...input,\n    name: String(input.name || '').trim(),\n    email: String(input.email || '').toLowerCase().trim(),\n    age: Number(input.age) || 18\n  };\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-performance-optimization",children:"\u26a1 Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"efficient-dom-manipulation",children:"Efficient DOM Manipulation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Batch DOM operations\nfunction updateUserList(users) {\n  const container = document.getElementById('user-list');\n  const fragment = document.createDocumentFragment();\n  \n  users.forEach(user => {\n    const userElement = document.createElement('div');\n    userElement.className = 'user-item';\n    userElement.textContent = `${user.name} (${user.email})`;\n    fragment.appendChild(userElement);\n  });\n  \n  container.appendChild(fragment);\n}\n\n// \u274c Bad - Multiple DOM manipulations\nfunction updateUserListSlow(users) {\n  const container = document.getElementById('user-list');\n  users.forEach(user => {\n    const userElement = document.createElement('div');\n    userElement.className = 'user-item';\n    userElement.textContent = `${user.name} (${user.email})`;\n    container.appendChild(userElement); // Causes reflow each time\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"debouncing-and-throttling",children:"Debouncing and Throttling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Debounce for search inputs\nconst debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(null, args), delay);\n  };\n};\n\nconst searchInput = document.getElementById('search');\nconst debouncedSearch = debounce(async (query) => {\n  if (query.length > 2) {\n    const results = await searchUsers(query);\n    displaySearchResults(results);\n  }\n}, 300);\n\nsearchInput.addEventListener('input', (e) => debouncedSearch(e.target.value));\n\n// \u2705 Good - Throttle for scroll events\nconst throttle = (func, limit) => {\n  let inThrottle;\n  return (...args) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\nconst throttledScrollHandler = throttle(() => {\n  console.log('Scroll event handled');\n}, 100);\n\nwindow.addEventListener('scroll', throttledScrollHandler);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"memoization-for-expensive-operations",children:"Memoization for Expensive Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Memoize expensive calculations\nconst memoize = (fn) => {\n  const cache = new Map();\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  };\n};\n\nconst expensiveCalculation = memoize((n) => {\n  console.log(`Computing factorial of ${n}`);\n  return n <= 1 ? 1 : n * expensiveCalculation(n - 1);\n});\n\n// \u2705 Good - LRU Cache for limited memory\nclass LRUCache {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n  }\n  \n  get(key) {\n    if (this.cache.has(key)) {\n      const value = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, value);\n      return value;\n    }\n    return null;\n  }\n  \n  set(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value);\n    }\n    this.cache.set(key, value);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-modern-async-patterns",children:"\ud83d\udd04 Modern Async Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"advanced-promise-patterns",children:"Advanced Promise Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Promise utilities\nconst timeout = (ms) => new Promise((_, reject) => \n  setTimeout(() => reject(new Error('Timeout')), ms)\n);\n\nconst withTimeout = (promise, ms) => \n  Promise.race([promise, timeout(ms)]);\n\nconst retry = async (fn, maxAttempts = 3, delay = 1000) => {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\n    }\n  }\n};\n\n// \u2705 Good - Parallel processing with error handling\nasync function fetchMultipleUsers(userIds) {\n  const results = await Promise.allSettled(\n    userIds.map(id => fetchUserSafely(id))\n  );\n  \n  const successful = results\n    .filter(result => result.status === 'fulfilled')\n    .map(result => result.value);\n    \n  const failed = results\n    .filter(result => result.status === 'rejected')\n    .map(result => result.reason);\n    \n  return { successful, failed };\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modern-async-iteration",children:"Modern Async Iteration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Async generators for streaming data\nasync function* fetchUsersPaginated(pageSize = 10) {\n  let page = 1;\n  let hasMore = true;\n  \n  while (hasMore) {\n    const response = await fetch(`/api/users?page=${page}&size=${pageSize}`);\n    const data = await response.json();\n    \n    yield data.users;\n    \n    hasMore = data.hasMore;\n    page++;\n  }\n}\n\n// Usage\nfor await (const userBatch of fetchUsersPaginated()) {\n  console.log(`Processing ${userBatch.length} users`);\n  // Process batch\n}\n\n// \u2705 Good - Async array operations\nconst asyncMap = async (array, asyncFn) => {\n  return Promise.all(array.map(asyncFn));\n};\n\nconst asyncFilter = async (array, asyncPredicate) => {\n  const results = await Promise.all(array.map(asyncPredicate));\n  return array.filter((_, index) => results[index]);\n};\n\nconst asyncReduce = async (array, asyncFn, initialValue) => {\n  let accumulator = initialValue;\n  for (const item of array) {\n    accumulator = await asyncFn(accumulator, item);\n  }\n  return accumulator;\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-testing--debugging",children:"\ud83e\uddea Testing & Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"unit-testing-best-practices",children:"Unit Testing Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Testable function design\nconst calculateOrderTotal = (items, taxRate = 0, discountPercent = 0) => {\n  if (!Array.isArray(items)) {\n    throw new Error('Items must be an array');\n  }\n  \n  const subtotal = items.reduce((sum, item) => {\n    if (typeof item.price !== 'number' || item.price < 0) {\n      throw new Error('Invalid item price');\n    }\n    return sum + item.price;\n  }, 0);\n  \n  const discountAmount = subtotal * (discountPercent / 100);\n  const discountedSubtotal = subtotal - discountAmount;\n  const tax = discountedSubtotal * taxRate;\n  \n  return {\n    subtotal,\n    discountAmount,\n    taxAmount: tax,\n    total: discountedSubtotal + tax\n  };\n};\n\n// \u2705 Good - Test examples\nconst testCalculateOrderTotal = () => {\n  const items = [\n    { price: 10.00 },\n    { price: 20.00 },\n    { price: 15.00 }\n  ];\n  \n  // Test basic calculation\n  const result1 = calculateOrderTotal(items, 0.1, 10);\n  console.assert(result1.subtotal === 45, 'Subtotal calculation failed');\n  console.assert(result1.discountAmount === 4.5, 'Discount calculation failed');\n  console.assert(result1.total === 44.55, 'Total calculation failed');\n  \n  // Test edge cases\n  try {\n    calculateOrderTotal(null);\n    console.assert(false, 'Should throw error for null items');\n  } catch (error) {\n    console.assert(error.message === 'Items must be an array', 'Wrong error message');\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"debugging-utilities",children:"Debugging Utilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Enhanced logging\nconst logger = {\n  debug: (message, data) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`\ud83d\udc1b DEBUG: ${message}`, data);\n    }\n  },\n  \n  info: (message, data) => {\n    console.log(`\u2139\ufe0f  INFO: ${message}`, data);\n  },\n  \n  warn: (message, data) => {\n    console.warn(`\u26a0\ufe0f  WARN: ${message}`, data);\n  },\n  \n  error: (message, error) => {\n    console.error(`\u274c ERROR: ${message}`, {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// \u2705 Good - Performance monitoring\nconst performanceMonitor = {\n  time: (label) => {\n    console.time(label);\n  },\n  \n  timeEnd: (label) => {\n    console.timeEnd(label);\n  },\n  \n  measure: (fn, label) => {\n    const start = performance.now();\n    const result = fn();\n    const end = performance.now();\n    console.log(`${label}: ${end - start}ms`);\n    return result;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-security-best-practices",children:"\ud83d\udd12 Security Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"input-sanitization--xss-prevention",children:"Input Sanitization & XSS Prevention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// \u2705 Good - HTML escaping\nconst escapeHtml = (unsafe) => {\n  return unsafe\n    .replace(/&/g, "&amp;")\n    .replace(/</g, "&lt;")\n    .replace(/>/g, "&gt;")\n    .replace(/"/g, "&quot;")\n    .replace(/\'/g, "&#039;");\n};\n\n// \u2705 Good - Safe DOM insertion\nconst safeSetContent = (element, content) => {\n  element.textContent = content; // Automatically escapes\n};\n\nconst safeSetHTML = (element, html) => {\n  element.innerHTML = escapeHtml(html);\n};\n\n// \u2705 Good - CSRF protection\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\')?.content;\n\nconst secureAjax = async (url, options = {}) => {\n  const headers = {\n    \'Content-Type\': \'application/json\',\n    \'X-CSRF-Token\': csrfToken,\n    ...options.headers\n  };\n  \n  return fetch(url, { ...options, headers });\n};\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-memory-management",children:"\ud83e\udde0 Memory Management"}),"\n",(0,r.jsx)(n.h3,{id:"preventing-memory-leaks",children:"Preventing Memory Leaks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Proper event listener cleanup\nclass EventManager {\n  constructor() {\n    this.listeners = new Map();\n  }\n  \n  addEventListener(element, event, handler) {\n    if (!this.listeners.has(element)) {\n      this.listeners.set(element, new Map());\n    }\n    \n    this.listeners.get(element).set(event, handler);\n    element.addEventListener(event, handler);\n  }\n  \n  removeEventListener(element, event) {\n    if (this.listeners.has(element)) {\n      const elementListeners = this.listeners.get(element);\n      if (elementListeners.has(event)) {\n        const handler = elementListeners.get(event);\n        element.removeEventListener(event, handler);\n        elementListeners.delete(event);\n      }\n    }\n  }\n  \n  cleanup() {\n    this.listeners.forEach((elementListeners, element) => {\n      elementListeners.forEach((handler, event) => {\n        element.removeEventListener(event, handler);\n      });\n    });\n    this.listeners.clear();\n  }\n}\n\n// \u2705 Good - WeakMap for private data\nconst privateData = new WeakMap();\n\nclass User {\n  constructor(name, email) {\n    privateData.set(this, {\n      name,\n      email,\n      createdAt: new Date()\n    });\n  }\n  \n  getName() {\n    return privateData.get(this).name;\n  }\n  \n  getEmail() {\n    return privateData.get(this).email;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-legacy-code-examples--fixes",children:"\ud83c\udfaf Legacy Code Examples & Fixes"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues--solutions",children:"Common Issues & Solutions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad - Global variables pollution\nvar userName = 'John';\nvar userAge = 30;\n\n// \u2705 Good - Module pattern\nconst UserModule = (() => {\n  const userName = 'John';\n  const userAge = 30;\n  \n  return {\n    getUserInfo: () => ({ userName, userAge }),\n    updateUserName: (newName) => userName = newName\n  };\n})();\n\n// \u274c Bad - Comparison issues\nconst name1 = \"sparsh\";\nconst name2 = \"sparsh\";\nconsole.log(name1 == name2);  // Works for primitives\nconsole.log(name1 === name2); // Better practice\n\nconst user1 = { name: \"sparsh\", age: 28 };\nconst user2 = { name: \"sparsh\", age: 28 };\nconsole.log(user1 == user2);  // false - different objects\nconsole.log(user1 === user2); // false - different objects\n\n// \u2705 Good - Object comparison utilities\nconst deepEqual = (obj1, obj2) => {\n  if (obj1 === obj2) return true;\n  \n  if (obj1 == null || obj2 == null) return false;\n  \n  if (typeof obj1 !== typeof obj2) return false;\n  \n  if (typeof obj1 !== 'object') return obj1 === obj2;\n  \n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  \n  if (keys1.length !== keys2.length) return false;\n  \n  return keys1.every(key => deepEqual(obj1[key], obj2[key]));\n};\n\nconsole.log(deepEqual(user1, user2)); // true\n\n// \u274c Bad - No-script handling\n// <noscript>Please enable JavaScript!!!</noscript>\n\n// \u2705 Good - Progressive enhancement\nconst enhanceWithJavaScript = () => {\n  document.body.classList.add('js-enabled');\n  \n  // Initialize JavaScript-dependent features\n  initializeInteractiveElements();\n  enableAdvancedFeatures();\n};\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', enhanceWithJavaScript);\n} else {\n  enhanceWithJavaScript();\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-additional-resources",children:"\ud83d\udcda Additional Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ESLint Configuration"}),": Set up linting rules for consistent code quality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prettier"}),": Automatic code formatting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript"}),": Consider migrating to TypeScript for better type safety"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing Frameworks"}),": Jest, Vitest, or Playwright for comprehensive testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Tools"}),": Chrome DevTools, Lighthouse, webpack-bundle-analyzer"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Remember"}),": Good JavaScript code is not just about syntax\u2014it's about writing maintainable, performant, and secure applications that stand the test of time."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);