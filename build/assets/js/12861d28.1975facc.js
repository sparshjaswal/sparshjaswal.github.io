"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[5685],{238:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dsa-key-pattern/Fast-and-Slow-Pointer","title":"Fast and Slow Pointer","description":"Description","source":"@site/docs/dsa-key-pattern/01-Fast-and-Slow-Pointer.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Fast-and-Slow-Pointer","permalink":"/docs/dsa-key-pattern/Fast-and-Slow-Pointer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Structures and Algorithms Pattern Guide","permalink":"/docs/dsa-key-pattern/"},"next":{"title":"Overlapping Intervals","permalink":"/docs/dsa-key-pattern/Overlapping-Intervals"}}');var s=i(4848),l=i(8453);const r={},o="Fast and Slow Pointer",d={},c=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2}];function a(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fast-and-slow-pointer",children:"Fast and Slow Pointer"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"This technique uses two pointers moving at different speeds to solve problems involving cycles, such as finding the middle of a list, detecting loops, or checking for palindromes."}),"\n",(0,s.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(n)"}),"\n",(0,s.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsx)(n.p,{children:"O(1)"}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Two Pointer Technique"}),": Use two pointers that move at different speeds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cycle Detection"}),": Fast pointer moves 2 steps, slow pointer moves 1 step"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Middle Finding"}),": When fast pointer reaches end, slow pointer is at middle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Palindrome Checking"}),": Use fast/slow to find middle, then reverse and compare"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linked List Cycle II"}),"\n",(0,s.jsx)(n.li,{children:"Remove nth Node from the End of List"}),"\n",(0,s.jsx)(n.li,{children:"Find the Duplicate Number"}),"\n",(0,s.jsx)(n.li,{children:"Palindrome Linked List"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Problems involving cycles in linked lists or arrays"}),"\n",(0,s.jsx)(n.li,{children:"Finding middle elements without knowing the length"}),"\n",(0,s.jsx)(n.li,{children:"Detecting palindromes in linked lists"}),"\n",(0,s.jsx)(n.li,{children:"Problems where you need to traverse at different speeds"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Find the middle of a linked list"'}),"\n",(0,s.jsx)(n.li,{children:'"Detect if there\'s a cycle"'}),"\n",(0,s.jsx)(n.li,{children:'"Find the start of a cycle"'}),"\n",(0,s.jsx)(n.li,{children:'"Check if a linked list is a palindrome"'}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);