"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2268],{5448:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"design-pattern/creational/factory-method","title":"Factory Method Pattern \ud83c\udfed","description":"Definition: The Factory Method pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.","source":"@site/docs/design-pattern/creational/factory-method.md","sourceDirName":"design-pattern/creational","slug":"/design-pattern/creational/factory-method","permalink":"/docs/design-pattern/creational/factory-method","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Builder Pattern \ud83c\udfd7\ufe0f","permalink":"/docs/design-pattern/creational/builder"},"next":{"title":"Prototype Pattern \ud83e\uddec","permalink":"/docs/design-pattern/creational/prototype"}}');var o=e(4848),s=e(8453);const a={},c="Factory Method Pattern \ud83c\udfed",i={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Code Example",id:"-code-example",level:2},{value:"Basic Implementation",id:"basic-implementation",level:3},{value:"\ud83c\udf1f Real-World Examples",id:"-real-world-examples",level:2},{value:"1. UI Component Factory",id:"1-ui-component-factory",level:3},{value:"2. Database Connection Factory",id:"2-database-connection-factory",level:3},{value:"3. Document Parser Factory",id:"3-document-parser-factory",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Variations",id:"-variations",level:2},{value:"1. <strong>Parameterized Factory Method</strong>",id:"1-parameterized-factory-method",level:3},{value:"2. <strong>Registry-based Factory</strong>",id:"2-registry-based-factory",level:3},{value:"3. <strong>Async Factory Method</strong>",id:"3-async-factory-method",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(n){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"factory-method-pattern-",children:"Factory Method Pattern \ud83c\udfed"})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Definition"}),": The Factory Method pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(r.p,{children:"Create objects without specifying the exact class of object that will be created. Provide an interface for creating families of related or dependent objects."}),"\n",(0,o.jsx)(r.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsxs)(r.p,{children:["Imagine you're developing a logistics management application. Initially, your app only handles transportation by trucks, so most of your code lives inside the ",(0,o.jsx)(r.code,{children:"Truck"})," class."]}),"\n",(0,o.jsxs)(r.p,{children:["After a while, your app becomes popular among sea transportation companies. They want to incorporate ships into the app. Great news, right? But what about the code? Most of your code is coupled to the ",(0,o.jsx)(r.code,{children:"Truck"})," class. Adding ",(0,o.jsx)(r.code,{children:"Ships"})," would require making changes to the entire codebase."]}),"\n",(0,o.jsx)(r.p,{children:"Moreover, if later you decide to add another type of transport to the app, you'll probably need to make all these changes again."}),"\n",(0,o.jsx)(r.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsxs)(r.p,{children:["The Factory Method pattern suggests replacing direct object construction calls (using the ",(0,o.jsx)(r.code,{children:"new"}),' operator) with calls to a special factory method. The objects returned by a factory method are often referred to as "products."']}),"\n",(0,o.jsx)(r.p,{children:"At first glance, this change may look pointless: we just moved the constructor call from one part of the program to another. However, consider this: now you can override the factory method in a subclass and change the class of products being created by the method."}),"\n",(0,o.jsx)(r.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Creator (abstract)\r\n\u251c\u2500\u2500 factoryMethod(): Product (abstract)\r\n\u251c\u2500\u2500 someOperation()\r\n\u2514\u2500\u2500 anOperation()\r\n\r\nConcreteCreatorA extends Creator\r\n\u2514\u2500\u2500 factoryMethod(): ConcreteProductA\r\n\r\nConcreteCreatorB extends Creator  \r\n\u2514\u2500\u2500 factoryMethod(): ConcreteProductB\r\n\r\nProduct (interface)\r\n\u2514\u2500\u2500 operation()\r\n\r\nConcreteProductA implements Product\r\n\u2514\u2500\u2500 operation()\r\n\r\nConcreteProductB implements Product\r\n\u2514\u2500\u2500 operation()\n"})}),"\n",(0,o.jsx)(r.h2,{id:"-code-example",children:"\ud83d\udcbb Code Example"}),"\n",(0,o.jsx)(r.h3,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Product interface\r\nclass Transport {\r\n  deliver() {\r\n    throw new Error("deliver() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Products\r\nclass Truck extends Transport {\r\n  deliver() {\r\n    return "\ud83d\ude9a Delivery by land in a truck";\r\n  }\r\n}\r\n\r\nclass Ship extends Transport {\r\n  deliver() {\r\n    return "\ud83d\udea2 Delivery by sea in a ship";\r\n  }\r\n}\r\n\r\nclass Plane extends Transport {\r\n  deliver() {\r\n    return "\u2708\ufe0f Delivery by air in a plane";\r\n  }\r\n}\r\n\r\n// Creator (abstract)\r\nclass Logistics {\r\n  // Factory method - to be implemented by subclasses\r\n  createTransport() {\r\n    throw new Error("createTransport() method must be implemented");\r\n  }\r\n  \r\n  // Business logic that uses the factory method\r\n  planDelivery() {\r\n    const transport = this.createTransport();\r\n    const result = transport.deliver();\r\n    console.log(`Planning delivery: ${result}`);\r\n    return result;\r\n  }\r\n}\r\n\r\n// Concrete Creators\r\nclass RoadLogistics extends Logistics {\r\n  createTransport() {\r\n    return new Truck();\r\n  }\r\n}\r\n\r\nclass SeaLogistics extends Logistics {\r\n  createTransport() {\r\n    return new Ship();\r\n  }\r\n}\r\n\r\nclass AirLogistics extends Logistics {\r\n  createTransport() {\r\n    return new Plane();\r\n  }\r\n}\r\n\r\n// Usage\r\nfunction demonstrateFactoryMethod() {\r\n  console.log("=== Factory Method Pattern Demo ===\\n");\r\n  \r\n  const logistics = [\r\n    new RoadLogistics(),\r\n    new SeaLogistics(), \r\n    new AirLogistics()\r\n  ];\r\n  \r\n  logistics.forEach(logistic => {\r\n    logistic.planDelivery();\r\n  });\r\n}\r\n\r\ndemonstrateFactoryMethod();\n'})}),"\n",(0,o.jsx)(r.h2,{id:"-real-world-examples",children:"\ud83c\udf1f Real-World Examples"}),"\n",(0,o.jsx)(r.h3,{id:"1-ui-component-factory",children:"1. UI Component Factory"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Product interface\r\nclass Button {\r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n  \r\n  onClick() {\r\n    throw new Error("onClick() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Products\r\nclass WindowsButton extends Button {\r\n  render() {\r\n    console.log("\ud83d\uddbc\ufe0f Rendering Windows-style button");\r\n    return "<button class=\'windows-btn\'>Click me</button>";\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\ud83d\udcbb Windows button clicked - opening native dialog");\r\n  }\r\n}\r\n\r\nclass MacButton extends Button {\r\n  render() {\r\n    console.log("\ud83c\udf4e Rendering Mac-style button");\r\n    return "<button class=\'mac-btn\'>Click me</button>";\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\ud83d\uddb1\ufe0f Mac button clicked - showing Mac-style popup");\r\n  }\r\n}\r\n\r\nclass LinuxButton extends Button {\r\n  render() {\r\n    console.log("\ud83d\udc27 Rendering Linux-style button");\r\n    return "<button class=\'linux-btn\'>Click me</button>";\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\u2328\ufe0f Linux button clicked - launching terminal command");\r\n  }\r\n}\r\n\r\n// Creator classes\r\nclass Dialog {\r\n  createButton() {\r\n    throw new Error("createButton() method must be implemented");\r\n  }\r\n  \r\n  render() {\r\n    const button = this.createButton();\r\n    console.log("\ud83c\udfa8 Rendering dialog:");\r\n    const html = `\r\n      <div class="dialog">\r\n        <h2>Confirmation</h2>\r\n        <p>Do you want to proceed?</p>\r\n        ${button.render()}\r\n      </div>\r\n    `;\r\n    console.log(html);\r\n    return button;\r\n  }\r\n}\r\n\r\nclass WindowsDialog extends Dialog {\r\n  createButton() {\r\n    return new WindowsButton();\r\n  }\r\n}\r\n\r\nclass MacDialog extends Dialog {\r\n  createButton() {\r\n    return new MacButton();\r\n  }\r\n}\r\n\r\nclass LinuxDialog extends Dialog {\r\n  createButton() {\r\n    return new LinuxButton();\r\n  }\r\n}\r\n\r\n// Client code\r\nclass Application {\r\n  constructor() {\r\n    this.dialog = null;\r\n  }\r\n  \r\n  initialize() {\r\n    const os = this.detectOS();\r\n    \r\n    if (os === "Windows") {\r\n      this.dialog = new WindowsDialog();\r\n    } else if (os === "Mac") {\r\n      this.dialog = new MacDialog();\r\n    } else {\r\n      this.dialog = new LinuxDialog();\r\n    }\r\n  }\r\n  \r\n  detectOS() {\r\n    // Simulate OS detection\r\n    const osTypes = ["Windows", "Mac", "Linux"];\r\n    return osTypes[Math.floor(Math.random() * osTypes.length)];\r\n  }\r\n  \r\n  run() {\r\n    this.initialize();\r\n    const button = this.dialog.render();\r\n    \r\n    // Simulate user interaction\r\n    setTimeout(() => {\r\n      console.log("\\n\ud83d\udc46 User clicked the button:");\r\n      button.onClick();\r\n    }, 1000);\r\n  }\r\n}\r\n\r\n// Usage\r\nconst app = new Application();\r\napp.run();\n'})}),"\n",(0,o.jsx)(r.h3,{id:"2-database-connection-factory",children:"2. Database Connection Factory"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:'// Product interface\r\nclass DatabaseConnection {\r\n  connect() {\r\n    throw new Error("connect() method must be implemented");\r\n  }\r\n  \r\n  query(sql) {\r\n    throw new Error("query() method must be implemented");\r\n  }\r\n  \r\n  close() {\r\n    throw new Error("close() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Products\r\nclass MySQLConnection extends DatabaseConnection {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.connected = false;\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83d\udc2c Connecting to MySQL: ${this.config.host}:${this.config.port}`);\r\n    this.connected = true;\r\n    return "MySQL connection established";\r\n  }\r\n  \r\n  query(sql) {\r\n    if (!this.connected) throw new Error("Not connected to MySQL");\r\n    console.log(`\ud83d\udcca Executing MySQL query: ${sql}`);\r\n    return `MySQL result for: ${sql}`;\r\n  }\r\n  \r\n  close() {\r\n    this.connected = false;\r\n    console.log("\ud83d\udc2c MySQL connection closed");\r\n  }\r\n}\r\n\r\nclass PostgreSQLConnection extends DatabaseConnection {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.connected = false;\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83d\udc18 Connecting to PostgreSQL: ${this.config.host}:${this.config.port}`);\r\n    this.connected = true;\r\n    return "PostgreSQL connection established";\r\n  }\r\n  \r\n  query(sql) {\r\n    if (!this.connected) throw new Error("Not connected to PostgreSQL");\r\n    console.log(`\ud83d\udcca Executing PostgreSQL query: ${sql}`);\r\n    return `PostgreSQL result for: ${sql}`;\r\n  }\r\n  \r\n  close() {\r\n    this.connected = false;\r\n    console.log("\ud83d\udc18 PostgreSQL connection closed");\r\n  }\r\n}\r\n\r\nclass MongoDBConnection extends DatabaseConnection {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.connected = false;\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83c\udf43 Connecting to MongoDB: ${this.config.host}:${this.config.port}`);\r\n    this.connected = true;\r\n    return "MongoDB connection established";\r\n  }\r\n  \r\n  query(query) {\r\n    if (!this.connected) throw new Error("Not connected to MongoDB");\r\n    console.log(`\ud83d\udcca Executing MongoDB query: ${JSON.stringify(query)}`);\r\n    return `MongoDB result for: ${JSON.stringify(query)}`;\r\n  }\r\n  \r\n  close() {\r\n    this.connected = false;\r\n    console.log("\ud83c\udf43 MongoDB connection closed");\r\n  }\r\n}\r\n\r\n// Creator classes\r\nclass DatabaseConnectionFactory {\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n  \r\n  createConnection() {\r\n    throw new Error("createConnection() method must be implemented");\r\n  }\r\n  \r\n  // Template method that uses factory method\r\n  establishConnection() {\r\n    const connection = this.createConnection();\r\n    try {\r\n      const result = connection.connect();\r\n      console.log(`\u2705 ${result}`);\r\n      return connection;\r\n    } catch (error) {\r\n      console.error(`\u274c Connection failed: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nclass MySQLConnectionFactory extends DatabaseConnectionFactory {\r\n  createConnection() {\r\n    return new MySQLConnection({\r\n      ...this.config,\r\n      port: this.config.port || 3306\r\n    });\r\n  }\r\n}\r\n\r\nclass PostgreSQLConnectionFactory extends DatabaseConnectionFactory {\r\n  createConnection() {\r\n    return new PostgreSQLConnection({\r\n      ...this.config,\r\n      port: this.config.port || 5432\r\n    });\r\n  }\r\n}\r\n\r\nclass MongoDBConnectionFactory extends DatabaseConnectionFactory {\r\n  createConnection() {\r\n    return new MongoDBConnection({\r\n      ...this.config,\r\n      port: this.config.port || 27017\r\n    });\r\n  }\r\n}\r\n\r\n// Database Manager (Client)\r\nclass DatabaseManager {\r\n  constructor(dbType, config) {\r\n    this.factory = this.createFactory(dbType, config);\r\n    this.connection = null;\r\n  }\r\n  \r\n  createFactory(dbType, config) {\r\n    switch (dbType.toLowerCase()) {\r\n      case \'mysql\':\r\n        return new MySQLConnectionFactory(config);\r\n      case \'postgresql\':\r\n        return new PostgreSQLConnectionFactory(config);\r\n      case \'mongodb\':\r\n        return new MongoDBConnectionFactory(config);\r\n      default:\r\n        throw new Error(`Unsupported database type: ${dbType}`);\r\n    }\r\n  }\r\n  \r\n  connect() {\r\n    this.connection = this.factory.establishConnection();\r\n    return this.connection;\r\n  }\r\n  \r\n  executeQuery(query) {\r\n    if (!this.connection) {\r\n      throw new Error("No database connection");\r\n    }\r\n    return this.connection.query(query);\r\n  }\r\n  \r\n  disconnect() {\r\n    if (this.connection) {\r\n      this.connection.close();\r\n      this.connection = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconst config = {\r\n  host: \'localhost\',\r\n  username: \'admin\',\r\n  password: \'password\',\r\n  database: \'myapp\'\r\n};\r\n\r\nconst databases = [\'mysql\', \'postgresql\', \'mongodb\'];\r\n\r\ndatabases.forEach(dbType => {\r\n  console.log(`\\n=== Testing ${dbType.toUpperCase()} ===`);\r\n  \r\n  const dbManager = new DatabaseManager(dbType, config);\r\n  \r\n  try {\r\n    dbManager.connect();\r\n    \r\n    // Execute different types of queries based on database type\r\n    if (dbType === \'mongodb\') {\r\n      dbManager.executeQuery({ find: \'users\', filter: { active: true } });\r\n    } else {\r\n      dbManager.executeQuery(\'SELECT * FROM users WHERE active = true\');\r\n    }\r\n    \r\n    dbManager.disconnect();\r\n  } catch (error) {\r\n    console.error(`Error with ${dbType}:`, error.message);\r\n  }\r\n});\n'})}),"\n",(0,o.jsx)(r.h3,{id:"3-document-parser-factory",children:"3. Document Parser Factory"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"// Product interface\r\nclass DocumentParser {\r\n  parse(content) {\r\n    throw new Error(\"parse() method must be implemented\");\r\n  }\r\n  \r\n  getMetadata() {\r\n    throw new Error(\"getMetadata() method must be implemented\");\r\n  }\r\n}\r\n\r\n// Concrete Products\r\nclass PDFParser extends DocumentParser {\r\n  constructor() {\r\n    super();\r\n    this.metadata = {};\r\n  }\r\n  \r\n  parse(content) {\r\n    console.log(\"\ud83d\udcc4 Parsing PDF document...\");\r\n    // Simulate PDF parsing\r\n    this.metadata = {\r\n      type: 'PDF',\r\n      pages: Math.floor(Math.random() * 100) + 1,\r\n      author: 'Unknown Author',\r\n      createdDate: new Date().toISOString()\r\n    };\r\n    \r\n    const text = content.replace(/%PDF-[\\d.]+/g, '').trim();\r\n    console.log(`\u2705 PDF parsed: ${this.metadata.pages} pages`);\r\n    return text;\r\n  }\r\n  \r\n  getMetadata() {\r\n    return this.metadata;\r\n  }\r\n}\r\n\r\nclass WordParser extends DocumentParser {\r\n  constructor() {\r\n    super();\r\n    this.metadata = {};\r\n  }\r\n  \r\n  parse(content) {\r\n    console.log(\"\ud83d\udcdd Parsing Word document...\");\r\n    // Simulate Word parsing\r\n    this.metadata = {\r\n      type: 'DOCX',\r\n      wordCount: content.split(/\\s+/).length,\r\n      lastModified: new Date().toISOString(),\r\n      hasImages: Math.random() > 0.5\r\n    };\r\n    \r\n    const text = content.replace(/[^\\w\\s]/gi, '').trim();\r\n    console.log(`\u2705 Word document parsed: ${this.metadata.wordCount} words`);\r\n    return text;\r\n  }\r\n  \r\n  getMetadata() {\r\n    return this.metadata;\r\n  }\r\n}\r\n\r\nclass ExcelParser extends DocumentParser {\r\n  constructor() {\r\n    super();\r\n    this.metadata = {};\r\n  }\r\n  \r\n  parse(content) {\r\n    console.log(\"\ud83d\udcca Parsing Excel document...\");\r\n    // Simulate Excel parsing\r\n    const rows = content.split('\\n').length;\r\n    const columns = content.split(',').length / rows;\r\n    \r\n    this.metadata = {\r\n      type: 'XLSX',\r\n      sheets: Math.floor(Math.random() * 5) + 1,\r\n      rows: rows,\r\n      columns: Math.floor(columns),\r\n      hasFormulas: Math.random() > 0.3\r\n    };\r\n    \r\n    console.log(`\u2705 Excel parsed: ${this.metadata.sheets} sheets, ${rows} rows`);\r\n    return content; // Return structured data\r\n  }\r\n  \r\n  getMetadata() {\r\n    return this.metadata;\r\n  }\r\n}\r\n\r\n// Creator classes\r\nclass DocumentParserFactory {\r\n  createParser() {\r\n    throw new Error(\"createParser() method must be implemented\");\r\n  }\r\n  \r\n  // Template method\r\n  parseDocument(filePath, content) {\r\n    console.log(`\\n\ud83d\udcc2 Processing: ${filePath}`);\r\n    const parser = this.createParser();\r\n    \r\n    try {\r\n      const parsedContent = parser.parse(content);\r\n      const metadata = parser.getMetadata();\r\n      \r\n      return {\r\n        success: true,\r\n        content: parsedContent,\r\n        metadata: metadata,\r\n        filePath: filePath\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        filePath: filePath\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nclass PDFParserFactory extends DocumentParserFactory {\r\n  createParser() {\r\n    return new PDFParser();\r\n  }\r\n}\r\n\r\nclass WordParserFactory extends DocumentParserFactory {\r\n  createParser() {\r\n    return new WordParser();\r\n  }\r\n}\r\n\r\nclass ExcelParserFactory extends DocumentParserFactory {\r\n  createParser() {\r\n    return new ExcelParser();\r\n  }\r\n}\r\n\r\n// Document processor (Client)\r\nclass DocumentProcessor {\r\n  constructor() {\r\n    this.factories = new Map([\r\n      ['.pdf', new PDFParserFactory()],\r\n      ['.docx', new WordParserFactory()],\r\n      ['.doc', new WordParserFactory()],\r\n      ['.xlsx', new ExcelParserFactory()],\r\n      ['.xls', new ExcelParserFactory()]\r\n    ]);\r\n  }\r\n  \r\n  processDocument(filePath, content) {\r\n    const extension = this.getFileExtension(filePath);\r\n    const factory = this.factories.get(extension);\r\n    \r\n    if (!factory) {\r\n      throw new Error(`Unsupported file type: ${extension}`);\r\n    }\r\n    \r\n    return factory.parseDocument(filePath, content);\r\n  }\r\n  \r\n  getFileExtension(filePath) {\r\n    return filePath.slice(filePath.lastIndexOf('.')).toLowerCase();\r\n  }\r\n  \r\n  addParserFactory(extension, factory) {\r\n    this.factories.set(extension, factory);\r\n  }\r\n}\r\n\r\n// Usage\r\nconst processor = new DocumentProcessor();\r\n\r\nconst testDocuments = [\r\n  {\r\n    path: 'report.pdf',\r\n    content: '%PDF-1.4 This is a sample PDF content with multiple paragraphs and data.'\r\n  },\r\n  {\r\n    path: 'proposal.docx',\r\n    content: 'This is a Word document with formatted text, headings, and various content elements.'\r\n  },\r\n  {\r\n    path: 'data.xlsx',\r\n    content: 'Name,Age,City\\nJohn,25,New York\\nJane,30,Los Angeles\\nBob,35,Chicago'\r\n  }\r\n];\r\n\r\ntestDocuments.forEach(doc => {\r\n  try {\r\n    const result = processor.processDocument(doc.path, doc.content);\r\n    \r\n    if (result.success) {\r\n      console.log(`\ud83d\udccb Metadata:`, JSON.stringify(result.metadata, null, 2));\r\n    } else {\r\n      console.error(`\u274c Processing failed: ${result.error}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`\u274c Error processing ${doc.path}:`, error.message);\r\n  }\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Loose Coupling"}),": Eliminates the need to bind application-specific classes into the code"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Open/Closed Principle"}),": You can add new types of products without breaking existing client code"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Single Responsibility"}),": Product creation is moved to one place, making code easier to support"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Flexibility"}),": Subclasses can choose which class to instantiate at runtime"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Code Complexity"}),": Can make code more complicated since you need to introduce many new subclasses"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Parallel Class Hierarchies"}),": You need to create a Creator subclass for each Product subclass"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Abstraction Overhead"}),": Adds an additional level of abstraction"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Unknown Dependencies"}),": When you don't know beforehand the exact types and dependencies of objects your code should work with"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Framework Extension"}),": When you want to provide users of your library or framework with a way to extend its internal components"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Resource Management"}),": When you want to save system resources by reusing existing objects instead of rebuilding them"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Family of Products"}),": When you need to create families of related products"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-variations",children:"\ud83d\udd04 Variations"}),"\n",(0,o.jsxs)(r.h3,{id:"1-parameterized-factory-method",children:["1. ",(0,o.jsx)(r.strong,{children:"Parameterized Factory Method"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"class ParameterizedCreator {\r\n  createProduct(type) {\r\n    switch(type) {\r\n      case 'A': return new ProductA();\r\n      case 'B': return new ProductB();\r\n      default: throw new Error(`Unknown product type: ${type}`);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(r.h3,{id:"2-registry-based-factory",children:["2. ",(0,o.jsx)(r.strong,{children:"Registry-based Factory"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"class RegistryFactory {\r\n  constructor() {\r\n    this.productRegistry = new Map();\r\n  }\r\n  \r\n  registerProduct(type, productClass) {\r\n    this.productRegistry.set(type, productClass);\r\n  }\r\n  \r\n  createProduct(type) {\r\n    const ProductClass = this.productRegistry.get(type);\r\n    if (!ProductClass) {\r\n      throw new Error(`Product type ${type} not registered`);\r\n    }\r\n    return new ProductClass();\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(r.h3,{id:"3-async-factory-method",children:["3. ",(0,o.jsx)(r.strong,{children:"Async Factory Method"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"class AsyncCreator {\r\n  async createProduct() {\r\n    const config = await this.loadConfiguration();\r\n    return new Product(config);\r\n  }\r\n  \r\n  async loadConfiguration() {\r\n    // Load configuration from external source\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Abstract Factory"}),": Factory Method is often used to implement Abstract Factory"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Template Method"}),": Factory Methods are often called within Template Methods"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Prototype"}),": Can be an alternative to Factory Method"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Builder"}),": Can use Factory Method to create components"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://refactoring.guru/design-patterns/factory-method",children:"Factory Method Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://www.dofactory.com/javascript/design-patterns/factory-method",children:"JavaScript Factory Pattern"})}),"\n"]})]})}function h(n={}){const{wrapper:r}={...(0,s.R)(),...n.components};return r?(0,o.jsx)(r,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>a,x:()=>c});var t=e(6540);const o={},s=t.createContext(o);function a(n){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function c(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),t.createElement(s.Provider,{value:r},n.children)}}}]);