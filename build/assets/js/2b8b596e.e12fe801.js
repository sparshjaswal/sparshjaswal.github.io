"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1900],{8421:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"dsa-key-pattern/Overlapping-Intervals","title":"Overlapping Intervals","description":"Description","source":"@site/docs/dsa-key-pattern/02-Overlapping-Intervals.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Overlapping-Intervals","permalink":"/docs/dsa-key-pattern/Overlapping-Intervals","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Fast and Slow Pointer","permalink":"/docs/dsa-key-pattern/Fast-and-Slow-Pointer"},"next":{"title":"Prefix Sum","permalink":"/docs/dsa-key-pattern/Prefix-Sum"}}');var t=i(4848),l=i(8453);const s={},o="Overlapping Intervals",a={},d=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Common Approaches",id:"common-approaches",level:2}];function c(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"overlapping-intervals",children:"Overlapping Intervals"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Intervals are often manipulated through sorting and merging based on their start and end times."}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(n log n) - due to sorting"}),"\n",(0,t.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,t.jsx)(n.p,{children:"O(1) to O(n) depending on implementation"}),"\n",(0,t.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sorting"}),": Sort intervals by start time (or end time based on problem)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Merging"}),": Combine overlapping intervals into single intervals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Non-overlapping"}),": Count or find intervals that don't overlap"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interval Insertion"}),": Insert new interval while maintaining sorted order"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Basic Merge: Merge Intervals"}),"\n",(0,t.jsx)(n.li,{children:"Interval Insertion: Insert Interval"}),"\n",(0,t.jsx)(n.li,{children:"My Calendar II"}),"\n",(0,t.jsx)(n.li,{children:"Minimum Number of Arrows to Burst Balloons"}),"\n",(0,t.jsx)(n.li,{children:"Non-overlapping Intervals"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Problems involving time intervals, meeting rooms, or ranges"}),"\n",(0,t.jsx)(n.li,{children:"When you need to merge overlapping periods"}),"\n",(0,t.jsx)(n.li,{children:"Scheduling conflicts or optimization problems"}),"\n",(0,t.jsx)(n.li,{children:"Range queries or interval manipulations"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Merge overlapping intervals"'}),"\n",(0,t.jsx)(n.li,{children:'"Find minimum meeting rooms required"'}),"\n",(0,t.jsx)(n.li,{children:'"Schedule meetings without conflicts"'}),"\n",(0,t.jsx)(n.li,{children:'"Find gaps in intervals"'}),"\n",(0,t.jsx)(n.li,{children:'"Insert interval into sorted list"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-approaches",children:"Common Approaches"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sort + Merge"}),": Sort by start time, then merge overlapping intervals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sort + Count"}),": Sort and count non-overlapping intervals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interval Tree"}),": For complex interval queries (advanced)"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var r=i(6540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);