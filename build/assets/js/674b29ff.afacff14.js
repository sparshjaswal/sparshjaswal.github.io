"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[6135],{5650:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dsa-key-pattern/Top-K-Elements","title":"Top \'K\' Elements","description":"Description","source":"@site/docs/dsa-key-pattern/14-Top-K-Elements.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Top-K-Elements","permalink":"/docs/dsa-key-pattern/Top-K-Elements","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bitwise XOR","permalink":"/docs/dsa-key-pattern/Bitwise-XOR"},"next":{"title":"K-way Merge","permalink":"/docs/dsa-key-pattern/K-way-Merge"}}');var l=t(4848),s=t(8453);const r={},a="Top 'K' Elements",o={},c=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Approaches",id:"approaches",level:2},{value:"Min Heap for Top K Largest",id:"min-heap-for-top-k-largest",level:3},{value:"Max Heap for Top K Smallest",id:"max-heap-for-top-k-smallest",level:3},{value:"Frequency + Heap",id:"frequency--heap",level:3},{value:"Quickselect Alternative",id:"quickselect-alternative",level:3},{value:"Implementation Strategy",id:"implementation-strategy",level:2}];function p(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"top-k-elements",children:"Top 'K' Elements"})}),"\n",(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"This pattern uses heaps or quickselect to efficiently find the top 'K' largest/smallest elements from a dataset."}),"\n",(0,l.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,l.jsx)(n.p,{children:"O(n log k)"}),"\n",(0,l.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,l.jsx)(n.p,{children:"O(k)"}),"\n",(0,l.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Min/Max Heap"}),": Use appropriate heap to maintain top K elements"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Heap Size Management"}),": Keep heap size at most K"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Frequency Counting"}),": Often combined with frequency maps"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Quickselect"}),": Alternative O(n) average approach for finding Kth element"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Top K Frequent Elements"}),"\n",(0,l.jsx)(n.li,{children:"Kth Largest Element"}),"\n",(0,l.jsx)(n.li,{children:"Ugly Number II"}),"\n",(0,l.jsx)(n.li,{children:"K Closest Points to Origin"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Finding top K largest/smallest elements"}),"\n",(0,l.jsx)(n.li,{children:"Kth order statistics problems"}),"\n",(0,l.jsx)(n.li,{children:"Frequency-based problems with K constraint"}),"\n",(0,l.jsx)(n.li,{children:"Problems requiring partial sorting"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:'"Find top K largest/smallest"'}),"\n",(0,l.jsx)(n.li,{children:'"Kth largest/smallest element"'}),"\n",(0,l.jsx)(n.li,{children:'"K most frequent elements"'}),"\n",(0,l.jsx)(n.li,{children:'"K closest points"'}),"\n",(0,l.jsx)(n.li,{children:'"Top K anything"'}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"approaches",children:"Approaches"}),"\n",(0,l.jsx)(n.h3,{id:"min-heap-for-top-k-largest",children:"Min Heap for Top K Largest"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use min heap of size K"}),"\n",(0,l.jsx)(n.li,{children:"If element > heap.top(), replace top"}),"\n",(0,l.jsx)(n.li,{children:"Result: K largest elements in heap"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"max-heap-for-top-k-smallest",children:"Max Heap for Top K Smallest"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use max heap of size K"}),"\n",(0,l.jsx)(n.li,{children:"If element < heap.top(), replace top"}),"\n",(0,l.jsx)(n.li,{children:"Result: K smallest elements in heap"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"frequency--heap",children:"Frequency + Heap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Count frequencies using hash map"}),"\n",(0,l.jsx)(n.li,{children:"Use heap to find top K frequent elements"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"quickselect-alternative",children:"Quickselect Alternative"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Partition-based approach"}),"\n",(0,l.jsx)(n.li,{children:"O(n) average time complexity"}),"\n",(0,l.jsx)(n.li,{children:"Good for finding single Kth element"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"implementation-strategy",children:"Implementation Strategy"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Choose Heap Type"}),": Min heap for largest, max heap for smallest"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Maintain Size"}),": Keep heap size \u2264 K"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Process Elements"}),": Add/remove elements to maintain top K"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Extract Result"}),": Final heap contains answer"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const l={},s=i.createContext(l);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);