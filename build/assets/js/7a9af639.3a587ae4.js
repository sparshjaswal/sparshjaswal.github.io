"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[5981],{4844:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"javascript/hoisting","title":"JavaScript Hoisting","description":"What is Hoisting?","source":"@site/docs/javascript/hoisting.md","sourceDirName":"javascript","slug":"/javascript/hoisting","permalink":"/docs/javascript/hoisting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcda Chapter 1: The Complete History of JavaScript","permalink":"/docs/javascript/history"},"next":{"title":"How Browsers Load Webpages - Complete Guide","permalink":"/docs/javascript/how-browsers-load-webpages"}}');var o=i(4848),s=i(8453);const l={},t="JavaScript Hoisting",r={},c=[{value:"What is Hoisting?",id:"what-is-hoisting",level:2},{value:"Variable Hoisting",id:"variable-hoisting",level:2},{value:"var Hoisting",id:"var-hoisting",level:3},{value:"let and const Hoisting (Temporal Dead Zone)",id:"let-and-const-hoisting-temporal-dead-zone",level:3},{value:"Function Hoisting",id:"function-hoisting",level:2},{value:"Function Declarations",id:"function-declarations",level:3},{value:"Function Expressions",id:"function-expressions",level:3},{value:"Arrow Functions",id:"arrow-functions",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Example 1: Variable Hoisting",id:"example-1-variable-hoisting",level:3},{value:"Example 2: Function vs Variable",id:"example-2-function-vs-variable",level:3},{value:"Example 3: Scope and Hoisting",id:"example-3-scope-and-hoisting",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Gotchas",id:"common-gotchas",level:2},{value:"Loop with var",id:"loop-with-var",level:3},{value:"Multiple Declarations",id:"multiple-declarations",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"javascript-hoisting",children:"JavaScript Hoisting"})}),"\n",(0,o.jsx)(e.h2,{id:"what-is-hoisting",children:"What is Hoisting?"}),"\n",(0,o.jsx)(e.p,{children:"Hoisting is JavaScript's default behavior of moving declarations to the top of their scope during the compilation phase. Only declarations are hoisted, not initializations."}),"\n",(0,o.jsx)(e.h2,{id:"variable-hoisting",children:"Variable Hoisting"}),"\n",(0,o.jsx)(e.h3,{id:"var-hoisting",children:"var Hoisting"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"console.log(x); // undefined (not error)\nvar x = 5;\nconsole.log(x); // 5\n\n// What actually happens:\nvar x; // Declaration hoisted\nconsole.log(x); // undefined\nx = 5; // Assignment stays in place\nconsole.log(x); // 5\n"})}),"\n",(0,o.jsx)(e.h3,{id:"let-and-const-hoisting-temporal-dead-zone",children:"let and const Hoisting (Temporal Dead Zone)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// console.log(y); // ReferenceError: Cannot access 'y' before initialization\nlet y = 10;\n\n// console.log(z); // ReferenceError: Cannot access 'z' before initialization\nconst z = 20;\n"})}),"\n",(0,o.jsx)(e.h2,{id:"function-hoisting",children:"Function Hoisting"}),"\n",(0,o.jsx)(e.h3,{id:"function-declarations",children:"Function Declarations"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// This works - function is fully hoisted\nsayHello(); // "Hello!"\n\nfunction sayHello() {\n    console.log("Hello!");\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"function-expressions",children:"Function Expressions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// This doesn\'t work - only variable is hoisted\n// sayGoodbye(); // TypeError: sayGoodbye is not a function\n\nvar sayGoodbye = function() {\n    console.log("Goodbye!");\n};\n\nsayGoodbye(); // "Goodbye!"\n'})}),"\n",(0,o.jsx)(e.h3,{id:"arrow-functions",children:"Arrow Functions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// This doesn\'t work - behaves like function expressions\n// greet(); // TypeError: greet is not a function\n\nvar greet = () => {\n    console.log("Hi!");\n};\n\ngreet(); // "Hi!"\n'})}),"\n",(0,o.jsx)(e.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,o.jsx)(e.h3,{id:"example-1-variable-hoisting",children:"Example 1: Variable Hoisting"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"function example() {\n    console.log(a); // undefined (not error)\n    var a = 1;\n    console.log(a); // 1\n}\n\n// Equivalent to:\nfunction example() {\n    var a; // Hoisted declaration\n    console.log(a); // undefined\n    a = 1; // Assignment in original position\n    console.log(a); // 1\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"example-2-function-vs-variable",children:"Example 2: Function vs Variable"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"console.log(foo); // function foo() { return 'function'; }\n\nvar foo = 'variable';\n\nfunction foo() {\n    return 'function';\n}\n\nconsole.log(foo); // 'variable'\n\n// What happens:\n// 1. Function declaration is hoisted completely\n// 2. Variable declaration is hoisted (but not assignment)\n// 3. Variable assignment overwrites function\n"})}),"\n",(0,o.jsx)(e.h3,{id:"example-3-scope-and-hoisting",children:"Example 3: Scope and Hoisting"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'var name = "Global";\n\nfunction test() {\n    console.log(name); // undefined (not "Global")\n    var name = "Local";\n    console.log(name); // "Local"\n}\n\ntest();\n\n// Explanation: Local \'name\' declaration is hoisted,\n// shadowing the global \'name\' variable\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Always declare variables at the top of their scope"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"function goodPractice() {\n    var a, b, c; // Declare at top\n    a = 1;\n    b = 2;\n    c = 3;\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use let and const instead of var"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Avoid this\nconsole.log(x); // undefined\nvar x = 5;\n\n// Prefer this\nlet y = 5; // Clear and predictable\nconst z = 10; // Clear and predictable\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Declare functions before using them"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Good practice\nfunction myFunction() {\n    return "Hello";\n}\n\nmyFunction();\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"common-gotchas",children:"Common Gotchas"}),"\n",(0,o.jsx)(e.h3,{id:"loop-with-var",children:"Loop with var"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Problem\nfor (var i = 0; i < 3; i++) {\n    setTimeout(() => console.log(i), 1000); // Prints 3, 3, 3\n}\n\n// Solution with let\nfor (let i = 0; i < 3; i++) {\n    setTimeout(() => console.log(i), 1000); // Prints 0, 1, 2\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"multiple-declarations",children:"Multiple Declarations"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"var a = 1;\nfunction example() {\n    console.log(a); // undefined (not 1)\n    var a = 2;\n}\n\n// The local 'var a' declaration is hoisted,\n// creating a local scope that shadows the global 'a'\n"})}),"\n",(0,o.jsx)(e.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Only declarations are hoisted, not assignments"}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"var"})," is hoisted and initialized with ",(0,o.jsx)(e.code,{children:"undefined"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"let"})," and ",(0,o.jsx)(e.code,{children:"const"})," are hoisted but not initialized (TDZ)"]}),"\n",(0,o.jsx)(e.li,{children:"Function declarations are completely hoisted"}),"\n",(0,o.jsx)(e.li,{children:"Function expressions are not hoisted"}),"\n",(0,o.jsx)(e.li,{children:"Always declare before use for better code clarity"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>t});var a=i(6540);const o={},s=a.createContext(o);function l(n){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);