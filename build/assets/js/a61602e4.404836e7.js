"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4934],{5357:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design-pattern/behavioral/iterator","title":"Iterator Pattern \ud83d\udd04","description":"Definition: The Iterator pattern provides a way to access elements of a collection sequentially without exposing its underlying representation.","source":"@site/docs/design-pattern/behavioral/iterator.md","sourceDirName":"design-pattern/behavioral","slug":"/design-pattern/behavioral/iterator","permalink":"/docs/design-pattern/behavioral/iterator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Command Pattern \ud83c\udfae","permalink":"/docs/design-pattern/behavioral/command"},"next":{"title":"Mediator Pattern \ud83c\udfad","permalink":"/docs/design-pattern/behavioral/mediator"}}');var o=e(4848),s=e(8453);const i={},l="Iterator Pattern \ud83d\udd04",a={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Book Collection Iterator",id:"book-collection-iterator",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Playlist Iterator with Different Modes",id:"playlist-iterator-with-different-modes",level:3},{value:"\ud83d\udd27 Simple Tree Iterator Example",id:"-simple-tree-iterator-example",level:2},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Iterator Types",id:"-iterator-types",level:2},{value:"1. <strong>External Iterator</strong> (shown in examples)",id:"1-external-iterator-shown-in-examples",level:3},{value:"2. <strong>Internal Iterator</strong>",id:"2-internal-iterator",level:3},{value:"3. <strong>Bidirectional Iterator</strong>",id:"3-bidirectional-iterator",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function h(r){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"iterator-pattern-",children:"Iterator Pattern \ud83d\udd04"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": The Iterator pattern provides a way to access elements of a collection sequentially without exposing its underlying representation."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(n.p,{children:"Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation. The iterator encapsulates the traversal logic."}),"\n",(0,o.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(n.p,{children:"You need to traverse a collection of objects without:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Exposing Internal Structure"}),": Client shouldn't know how collection stores elements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multiple Traversals"}),": Need to support different ways of traversing the same collection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complex Navigation"}),": Collection might have complex internal structure (trees, graphs)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uniform Interface"}),": Different collections should provide same traversal interface"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Direct access to collection internals creates tight coupling and limits flexibility."}),"\n",(0,o.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsxs)(n.p,{children:["The Iterator pattern suggests extracting traversal behavior into separate iterator objects. Each iterator implements a standard interface for traversing collections, providing methods like ",(0,o.jsx)(n.code,{children:"next()"}),", ",(0,o.jsx)(n.code,{children:"hasNext()"}),", etc."]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Iterator (interface)\r\n\u251c\u2500\u2500 +next(): Element\r\n\u251c\u2500\u2500 +hasNext(): boolean\r\n\u2514\u2500\u2500 +current(): Element\r\n\r\nConcreteIterator implements Iterator\r\n\u251c\u2500\u2500 -collection: Collection\r\n\u251c\u2500\u2500 -position: number\r\n\u251c\u2500\u2500 +next(): Element\r\n\u251c\u2500\u2500 +hasNext(): boolean\r\n\u2514\u2500\u2500 +current(): Element\r\n\r\nCollection (interface)\r\n\u2514\u2500\u2500 +createIterator(): Iterator\r\n\r\nConcreteCollection implements Collection\r\n\u251c\u2500\u2500 -items: Array\r\n\u251c\u2500\u2500 +createIterator(): ConcreteIterator\r\n\u2514\u2500\u2500 +getItems(): Array\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,o.jsx)(n.h3,{id:"book-collection-iterator",children:"Book Collection Iterator"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Iterator Interface\r\nclass Iterator {\r\n  next() {\r\n    throw new Error("next() method must be implemented");\r\n  }\r\n  \r\n  hasNext() {\r\n    throw new Error("hasNext() method must be implemented");\r\n  }\r\n  \r\n  current() {\r\n    throw new Error("current() method must be implemented");\r\n  }\r\n  \r\n  reset() {\r\n    throw new Error("reset() method must be implemented");\r\n  }\r\n}\r\n\r\n// Book class\r\nclass Book {\r\n  constructor(title, author, year, genre) {\r\n    this.title = title;\r\n    this.author = author;\r\n    this.year = year;\r\n    this.genre = genre;\r\n  }\r\n  \r\n  toString() {\r\n    return `"${this.title}" by ${this.author} (${this.year}) - ${this.genre}`;\r\n  }\r\n}\r\n\r\n// Concrete Iterator - Forward Iterator\r\nclass BookIterator extends Iterator {\r\n  constructor(books) {\r\n    super();\r\n    this.books = books;\r\n    this.position = 0;\r\n  }\r\n  \r\n  next() {\r\n    if (this.hasNext()) {\r\n      const book = this.books[this.position];\r\n      this.position++;\r\n      return book;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.position < this.books.length;\r\n  }\r\n  \r\n  current() {\r\n    return this.position > 0 ? this.books[this.position - 1] : null;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = 0;\r\n    console.log("\ud83d\udcd6 Iterator reset to beginning");\r\n  }\r\n}\r\n\r\n// Concrete Iterator - Reverse Iterator\r\nclass ReverseBookIterator extends Iterator {\r\n  constructor(books) {\r\n    super();\r\n    this.books = books;\r\n    this.position = books.length - 1;\r\n  }\r\n  \r\n  next() {\r\n    if (this.hasNext()) {\r\n      const book = this.books[this.position];\r\n      this.position--;\r\n      return book;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.position >= 0;\r\n  }\r\n  \r\n  current() {\r\n    return this.position < this.books.length - 1 ? this.books[this.position + 1] : null;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = this.books.length - 1;\r\n    console.log("\ud83d\udcd6 Reverse iterator reset to end");\r\n  }\r\n}\r\n\r\n// Collection Interface\r\nclass Collection {\r\n  createIterator() {\r\n    throw new Error("createIterator() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Collection - Book Library\r\nclass BookLibrary extends Collection {\r\n  constructor() {\r\n    super();\r\n    this.books = [];\r\n  }\r\n  \r\n  addBook(book) {\r\n    this.books.push(book);\r\n    console.log(`\ud83d\udcda Added book: ${book.title}`);\r\n  }\r\n  \r\n  removeBook(title) {\r\n    const index = this.books.findIndex(book => book.title === title);\r\n    if (index !== -1) {\r\n      const removedBook = this.books.splice(index, 1)[0];\r\n      console.log(`\ud83d\uddd1\ufe0f Removed book: ${removedBook.title}`);\r\n      return true;\r\n    }\r\n    console.log(`\u274c Book not found: ${title}`);\r\n    return false;\r\n  }\r\n  \r\n  createIterator() {\r\n    console.log("\ud83d\udd04 Creating forward iterator");\r\n    return new BookIterator(this.books);\r\n  }\r\n  \r\n  createReverseIterator() {\r\n    console.log("\ud83d\udd04 Creating reverse iterator");  \r\n    return new ReverseBookIterator(this.books);\r\n  }\r\n  \r\n  getBookCount() {\r\n    return this.books.length;\r\n  }\r\n  \r\n  displayInfo() {\r\n    console.log(`\ud83d\udcda Library contains ${this.books.length} books`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== Book Library Iterator Demo ===\\n");\r\n\r\nconsole.log("Setting up book library:");\r\nconsole.log("-".repeat(25));\r\n\r\nconst library = new BookLibrary();\r\n\r\n// Add books\r\nconst books = [\r\n  new Book("The Great Gatsby", "F. Scott Fitzgerald", 1925, "Classic Fiction"),\r\n  new Book("To Kill a Mockingbird", "Harper Lee", 1960, "Classic Fiction"),\r\n  new Book("1984", "George Orwell", 1949, "Dystopian Fiction"),\r\n  new Book("Pride and Prejudice", "Jane Austen", 1813, "Romance"),\r\n  new Book("The Catcher in the Rye", "J.D. Salinger", 1951, "Coming-of-age")\r\n];\r\n\r\nbooks.forEach(book => library.addBook(book));\r\n\r\nlibrary.displayInfo();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("Iterating through books (forward):");\r\nconsole.log("-".repeat(35));\r\n\r\nconst iterator = library.createIterator();\r\nlet bookNumber = 1;\r\n\r\nwhile (iterator.hasNext()) {\r\n  const book = iterator.next();\r\n  console.log(`${bookNumber}. ${book.toString()}`);\r\n  bookNumber++;\r\n}\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("Iterating through books (reverse):");\r\nconsole.log("-".repeat(35));\r\n\r\nconst reverseIterator = library.createReverseIterator();\r\nbookNumber = 1;\r\n\r\nwhile (reverseIterator.hasNext()) {\r\n  const book = reverseIterator.next();\r\n  console.log(`${bookNumber}. ${book.toString()}`);\r\n  bookNumber++;\r\n}\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("Demonstrating iterator reset:");\r\nconsole.log("-".repeat(30));\r\n\r\niterator.reset();\r\nconsole.log("First two books after reset:");\r\n\r\nfor (let i = 0; i < 2 && iterator.hasNext(); i++) {\r\n  const book = iterator.next();\r\n  console.log(`  ${i + 1}. ${book.title}`);\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,o.jsx)(n.h3,{id:"playlist-iterator-with-different-modes",children:"Playlist Iterator with Different Modes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Song class\r\nclass Song {\r\n  constructor(title, artist, duration, genre) {\r\n    this.title = title;\r\n    this.artist = artist;\r\n    this.duration = duration; // in seconds\r\n    this.genre = genre;\r\n    this.playCount = 0;\r\n  }\r\n  \r\n  play() {\r\n    this.playCount++;\r\n    console.log(`\ud83c\udfb5 Playing: "${this.title}" by ${this.artist} (${this.formatDuration()}) [Play #${this.playCount}]`);\r\n  }\r\n  \r\n  formatDuration() {\r\n    const minutes = Math.floor(this.duration / 60);\r\n    const seconds = this.duration % 60;\r\n    return `${minutes}:${seconds.toString().padStart(2, \'0\')}`;\r\n  }\r\n  \r\n  toString() {\r\n    return `"${this.title}" by ${this.artist} (${this.formatDuration()}) - ${this.genre}`;\r\n  }\r\n}\r\n\r\n// Abstract Iterator for playlist\r\nclass PlaylistIterator {\r\n  constructor(songs) {\r\n    this.songs = songs;\r\n    this.position = 0;\r\n  }\r\n  \r\n  next() {\r\n    throw new Error("next() method must be implemented");\r\n  }\r\n  \r\n  hasNext() {\r\n    throw new Error("hasNext() method must be implemented");\r\n  }\r\n  \r\n  current() {\r\n    return this.position > 0 ? this.songs[this.position - 1] : null;\r\n  }\r\n  \r\n  reset() {\r\n    throw new Error("reset() method must be implemented");\r\n  }\r\n  \r\n  getPosition() {\r\n    return this.position;\r\n  }\r\n}\r\n\r\n// Sequential Iterator\r\nclass SequentialIterator extends PlaylistIterator {\r\n  next() {\r\n    if (this.hasNext()) {\r\n      const song = this.songs[this.position];\r\n      this.position++;\r\n      return song;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.position < this.songs.length;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = 0;\r\n    console.log("\ud83d\udd04 Sequential iterator reset");\r\n  }\r\n}\r\n\r\n// Shuffle Iterator\r\nclass ShuffleIterator extends PlaylistIterator {\r\n  constructor(songs) {\r\n    super(songs);\r\n    this.shuffledIndices = this.createShuffledIndices();\r\n    this.position = 0;\r\n  }\r\n  \r\n  createShuffledIndices() {\r\n    const indices = Array.from({length: this.songs.length}, (_, i) => i);\r\n    \r\n    // Fisher-Yates shuffle algorithm\r\n    for (let i = indices.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [indices[i], indices[j]] = [indices[j], indices[i]];\r\n    }\r\n    \r\n    console.log("\ud83d\udd00 Playlist shuffled");\r\n    return indices;\r\n  }\r\n  \r\n  next() {\r\n    if (this.hasNext()) {\r\n      const songIndex = this.shuffledIndices[this.position];\r\n      const song = this.songs[songIndex];\r\n      this.position++;\r\n      return song;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.position < this.shuffledIndices.length;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = 0;\r\n    this.shuffledIndices = this.createShuffledIndices();\r\n    console.log("\ud83d\udd04 Shuffle iterator reset with new shuffle");\r\n  }\r\n}\r\n\r\n// Repeat Iterator (repeats the playlist indefinitely)\r\nclass RepeatIterator extends PlaylistIterator {\r\n  constructor(songs, maxRepeats = 3) {\r\n    super(songs);\r\n    this.maxRepeats = maxRepeats;\r\n    this.currentRepeat = 0;\r\n  }\r\n  \r\n  next() {\r\n    if (this.hasNext()) {\r\n      const song = this.songs[this.position % this.songs.length];\r\n      this.position++;\r\n      \r\n      // Check if we completed a full cycle\r\n      if (this.position % this.songs.length === 0) {\r\n        this.currentRepeat++;\r\n        console.log(`\ud83d\udd01 Completed repeat ${this.currentRepeat}/${this.maxRepeats}`);\r\n      }\r\n      \r\n      return song;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.currentRepeat < this.maxRepeats;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = 0;\r\n    this.currentRepeat = 0;\r\n    console.log("\ud83d\udd04 Repeat iterator reset");\r\n  }\r\n  \r\n  getCurrentRepeat() {\r\n    return this.currentRepeat;\r\n  }\r\n}\r\n\r\n// Genre Filter Iterator\r\nclass GenreFilterIterator extends PlaylistIterator {\r\n  constructor(songs, genre) {\r\n    super(songs);\r\n    this.genre = genre;\r\n    this.filteredSongs = songs.filter(song => \r\n      song.genre.toLowerCase() === genre.toLowerCase()\r\n    );\r\n    this.position = 0;\r\n    \r\n    console.log(`\ud83c\udfaf Genre filter applied: ${genre} (${this.filteredSongs.length} songs)`);\r\n  }\r\n  \r\n  next() {\r\n    if (this.hasNext()) {\r\n      const song = this.filteredSongs[this.position];\r\n      this.position++;\r\n      return song;\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.position < this.filteredSongs.length;\r\n  }\r\n  \r\n  reset() {\r\n    this.position = 0;\r\n    console.log(`\ud83d\udd04 Genre filter iterator reset (${this.genre})`);\r\n  }\r\n}\r\n\r\n// Playlist Collection\r\nclass Playlist {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.songs = [];\r\n    this.created = new Date();\r\n  }\r\n  \r\n  addSong(song) {\r\n    this.songs.push(song);\r\n    console.log(`\u2795 Added to "${this.name}": ${song.title}`);\r\n  }\r\n  \r\n  removeSong(title) {\r\n    const index = this.songs.findIndex(song => song.title === title);\r\n    if (index !== -1) {\r\n      const removedSong = this.songs.splice(index, 1)[0];\r\n      console.log(`\u2796 Removed from "${this.name}": ${removedSong.title}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  // Factory methods for different iterator types\r\n  createSequentialIterator() {\r\n    return new SequentialIterator(this.songs);\r\n  }\r\n  \r\n  createShuffleIterator() {\r\n    return new ShuffleIterator(this.songs);\r\n  }\r\n  \r\n  createRepeatIterator(maxRepeats = 3) {\r\n    return new RepeatIterator(this.songs, maxRepeats);\r\n  }\r\n  \r\n  createGenreIterator(genre) {\r\n    return new GenreFilterIterator(this.songs, genre);\r\n  }\r\n  \r\n  getStats() {\r\n    const totalDuration = this.songs.reduce((sum, song) => sum + song.duration, 0);\r\n    const genres = [...new Set(this.songs.map(song => song.genre))];\r\n    \r\n    console.log(`\ud83d\udcca Playlist "${this.name}" Stats:`);\r\n    console.log(`   Songs: ${this.songs.length}`);\r\n    console.log(`   Total Duration: ${Math.floor(totalDuration / 60)} minutes`);\r\n    console.log(`   Genres: ${genres.join(\', \')}`);\r\n    console.log(`   Created: ${this.created.toLocaleDateString()}`);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Music Playlist Iterator Demo ===\\n");\r\n\r\nconsole.log("Creating playlist:");\r\nconsole.log("-".repeat(18));\r\n\r\nconst myPlaylist = new Playlist("My Favorites");\r\n\r\n// Add songs\r\nconst songs = [\r\n  new Song("Bohemian Rhapsody", "Queen", 355, "Rock"),\r\n  new Song("Stairway to Heaven", "Led Zeppelin", 482, "Rock"),\r\n  new Song("Hotel California", "Eagles", 391, "Rock"),\r\n  new Song("Billie Jean", "Michael Jackson", 294, "Pop"),\r\n  new Song("Like a Rolling Stone", "Bob Dylan", 369, "Folk Rock"),\r\n  new Song("Imagine", "John Lennon", 183, "Pop"),\r\n  new Song("Sweet Child O\' Mine", "Guns N\' Roses", 356, "Rock"),\r\n  new Song("Thriller", "Michael Jackson", 357, "Pop")\r\n];\r\n\r\nsongs.forEach(song => myPlaylist.addSong(song));\r\n\r\nmyPlaylist.getStats();\r\n\r\nconsole.log("\\n" + "=".repeat(50) + "\\n");\r\n\r\nconsole.log("1. Sequential playback:");\r\nconsole.log("-".repeat(23));\r\n\r\nconst sequential = myPlaylist.createSequentialIterator();\r\nlet count = 0;\r\nwhile (sequential.hasNext() && count < 3) {\r\n  const song = sequential.next();\r\n  song.play();\r\n  count++;\r\n}\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("2. Shuffle mode:");\r\nconsole.log("-".repeat(15));\r\n\r\nconst shuffle = myPlaylist.createShuffleIterator();\r\ncount = 0;\r\nwhile (shuffle.hasNext() && count < 3) {\r\n  const song = shuffle.next();\r\n  song.play();\r\n  count++;\r\n}\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("3. Genre filter (Rock only):");\r\nconsole.log("-".repeat(28));\r\n\r\nconst rockIterator = myPlaylist.createGenreIterator("Rock");\r\nwhile (rockIterator.hasNext()) {\r\n  const song = rockIterator.next();\r\n  song.play();\r\n}\r\n\r\nconsole.log("\\n" + "-".repeat(40) + "\\n");\r\n\r\nconsole.log("4. Repeat mode (2 repeats):");\r\nconsole.log("-".repeat(27));\r\n\r\nconst repeat = myPlaylist.createRepeatIterator(2);\r\ncount = 0;\r\n// Show first few songs and then fast forward to show repeat behavior\r\nwhile (repeat.hasNext() && count < 5) {\r\n  const song = repeat.next();\r\n  if (count < 3 || repeat.getCurrentRepeat() > 0) {\r\n    song.play();\r\n  } else {\r\n    console.log("   ... (skipping to show repeat behavior)");\r\n  }\r\n  count++;\r\n}\r\n\r\n// Fast forward to show repeat\r\nwhile (repeat.hasNext()) {\r\n  const song = repeat.next();\r\n  if (repeat.getCurrentRepeat() > 0) {\r\n    song.play();\r\n    break;\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-simple-tree-iterator-example",children:"\ud83d\udd27 Simple Tree Iterator Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Tree Node\r\nclass TreeNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.children = [];\r\n  }\r\n  \r\n  addChild(node) {\r\n    this.children.push(node);\r\n  }\r\n  \r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\n// Tree Iterator (Depth-First)\r\nclass TreeIterator {\r\n  constructor(root) {\r\n    this.stack = root ? [root] : [];\r\n  }\r\n  \r\n  next() {\r\n    if (!this.hasNext()) {\r\n      return null;\r\n    }\r\n    \r\n    const node = this.stack.pop();\r\n    \r\n    // Add children to stack in reverse order for correct traversal order\r\n    for (let i = node.children.length - 1; i >= 0; i--) {\r\n      this.stack.push(node.children[i]);\r\n    }\r\n    \r\n    return node;\r\n  }\r\n  \r\n  hasNext() {\r\n    return this.stack.length > 0;\r\n  }\r\n}\r\n\r\n// Tree Collection\r\nclass Tree {\r\n  constructor(rootValue) {\r\n    this.root = new TreeNode(rootValue);\r\n  }\r\n  \r\n  getRoot() {\r\n    return this.root;\r\n  }\r\n  \r\n  createIterator() {\r\n    return new TreeIterator(this.root);\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("\\n=== Tree Iterator Demo ===\\n");\r\n\r\nconst tree = new Tree("Root");\r\nconst child1 = new TreeNode("Child 1");\r\nconst child2 = new TreeNode("Child 2");\r\nconst child3 = new TreeNode("Child 3");\r\n\r\ntree.root.addChild(child1);\r\ntree.root.addChild(child2);\r\ntree.root.addChild(child3);\r\n\r\nchild1.addChild(new TreeNode("Child 1.1"));\r\nchild1.addChild(new TreeNode("Child 1.2"));\r\nchild2.addChild(new TreeNode("Child 2.1"));\r\n\r\nconsole.log("Tree traversal (Depth-First):");\r\nconsole.log("-".repeat(30));\r\n\r\nconst treeIterator = tree.createIterator();\r\nlet nodeNumber = 1;\r\n\r\nwhile (treeIterator.hasNext()) {\r\n  const node = treeIterator.next();\r\n  console.log(`${nodeNumber}. ${node.value}`);\r\n  nodeNumber++;\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uniform Interface"}),": Same interface for different collections"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Encapsulation"}),": Hides collection's internal structure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multiple Iterators"}),": Can have multiple iterators on same collection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Different Traversal Methods"}),": Support various traversal algorithms"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single Responsibility"}),": Separates traversal logic from collection logic"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Overhead"}),": Additional classes and complexity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": May be slower than direct access"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Memory Usage"}),": Iterator objects consume memory"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Concurrent Modification"}),": Issues if collection is modified during iteration"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Collection Traversal"}),": Need to traverse collections without exposing structure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multiple Traversal Methods"}),": Different ways to iterate same collection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uniform Interface"}),": Want same interface for different collection types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complex Collections"}),": Collections with complex internal structure (trees, graphs)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lazy Evaluation"}),": Want to generate elements on demand"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-iterator-types",children:"\ud83d\udd04 Iterator Types"}),"\n",(0,o.jsxs)(n.h3,{id:"1-external-iterator-shown-in-examples",children:["1. ",(0,o.jsx)(n.strong,{children:"External Iterator"})," (shown in examples)"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Client controls iteration"}),"\n",(0,o.jsxs)(n.li,{children:["Calls ",(0,o.jsx)(n.code,{children:"next()"}),", ",(0,o.jsx)(n.code,{children:"hasNext()"})," explicitly"]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"2-internal-iterator",children:["2. ",(0,o.jsx)(n.strong,{children:"Internal Iterator"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Collection controls iteration"}),"\n",(0,o.jsx)(n.li,{children:"Client provides callback function"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class InternalIteratorCollection {\r\n  constructor(items) {\r\n    this.items = items;\r\n  }\r\n  \r\n  forEach(callback) {\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      callback(this.items[i], i);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"3-bidirectional-iterator",children:["3. ",(0,o.jsx)(n.strong,{children:"Bidirectional Iterator"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class BidirectionalIterator {\r\n  // ... other methods ...\r\n  \r\n  previous() {\r\n    if (this.hasPrevious()) {\r\n      this.position--;\r\n      return this.collection[this.position];\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  hasPrevious() {\r\n    return this.position > 0;\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Composite"}),": Often used together for tree traversal"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Factory Method"}),": Can be used to create different iterator types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Command"}),": Iterator operations can be implemented as commands"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visitor"}),": Can be combined for complex operations on collections"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/iterator",children:"Iterator Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators",children:"JavaScript Iterators and Generators"})}),"\n"]})]})}function d(r={}){const{wrapper:n}={...(0,s.R)(),...r.components};return n?(0,o.jsx)(n,{...r,children:(0,o.jsx)(h,{...r})}):h(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>i,x:()=>l});var t=e(6540);const o={},s=t.createContext(o);function i(r){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function l(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:i(r.components),t.createElement(s.Provider,{value:n},r.children)}}}]);