"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[2051],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},8484:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dsa-key-pattern/Cyclic-Sort","title":"Cyclic Sort (Index-Based)","description":"Description","source":"@site/docs/dsa-key-pattern/06-Cyclic-Sort.md","sourceDirName":"dsa-key-pattern","slug":"/dsa-key-pattern/Cyclic-Sort","permalink":"/docs/dsa-key-pattern/Cyclic-Sort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Two Pointers","permalink":"/docs/dsa-key-pattern/Two-Pointers"},"next":{"title":"Reversal of Linked List (In-place)","permalink":"/docs/dsa-key-pattern/Reversal-of-Linked-List"}}');var r=i(4848),t=i(8453);const l={},c="Cyclic Sort (Index-Based)",o={},d=[{value:"Description",id:"description",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Key Problems",id:"key-problems",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Pattern Recognition",id:"pattern-recognition",level:2},{value:"Algorithm Steps",id:"algorithm-steps",level:2},{value:"Key Insight",id:"key-insight",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cyclic-sort-index-based",children:"Cyclic Sort (Index-Based)"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Cyclic sort is an efficient approach to solve problems where numbers are consecutively ordered and must be placed in the correct index."}),"\n",(0,r.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,r.jsx)(n.p,{children:"O(n)"}),"\n",(0,r.jsx)(n.h2,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,r.jsx)(n.p,{children:"O(1)"}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Index Mapping"}),": Each number should be at index = number - 1 (for 1 to n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In-place Swapping"}),": Place each number at its correct position"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing Elements"}),": After sorting, missing numbers are at incorrect positions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Range [1, n]"}),": Most problems involve numbers in range 1 to n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-problems",children:"Key Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Missing Number"}),"\n",(0,r.jsx)(n.li,{children:"Find Missing Numbers"}),"\n",(0,r.jsx)(n.li,{children:"Set Mismatch"}),"\n",(0,r.jsx)(n.li,{children:"First Missing Positive"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Array contains numbers in range [1, n] or [0, n-1]"}),"\n",(0,r.jsx)(n.li,{children:"Need to find missing, duplicate, or misplaced numbers"}),"\n",(0,r.jsx)(n.li,{children:"Want O(1) space complexity for such problems"}),"\n",(0,r.jsx)(n.li,{children:"Numbers should ideally be consecutive or nearly consecutive"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Array contains n numbers in range [1, n]"'}),"\n",(0,r.jsx)(n.li,{children:'"Find missing/duplicate numbers"'}),"\n",(0,r.jsx)(n.li,{children:'"First missing positive integer"'}),"\n",(0,r.jsx)(n.li,{children:'"Array where each number should be at specific index"'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Iterate through array"}),"\n",(0,r.jsx)(n.li,{children:"For each element, if it's not at correct position, swap it"}),"\n",(0,r.jsx)(n.li,{children:"Continue until element at current position is correct"}),"\n",(0,r.jsx)(n.li,{children:"After sorting, scan to find missing/duplicate elements"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-insight",children:"Key Insight"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Number ",(0,r.jsx)(n.code,{children:"x"})," should be at index ",(0,r.jsx)(n.code,{children:"x-1"})," (for 1-indexed problems)"]}),"\n",(0,r.jsxs)(n.li,{children:["Number ",(0,r.jsx)(n.code,{children:"x"})," should be at index ",(0,r.jsx)(n.code,{children:"x"})," (for 0-indexed problems)"]}),"\n",(0,r.jsx)(n.li,{children:"After one pass, all numbers will be at correct positions"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);