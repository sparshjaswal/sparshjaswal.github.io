"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1340],{5708:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"design-pattern/creational/builder","title":"Builder Pattern \ud83c\udfd7\ufe0f","description":"Definition: The Builder pattern separates the construction of complex objects from their representation, allowing the same construction process to create different representations.","source":"@site/docs/design-pattern/creational/builder.md","sourceDirName":"design-pattern/creational","slug":"/design-pattern/creational/builder","permalink":"/docs/design-pattern/creational/builder","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Abstract Factory Pattern \ud83c\udfed\ud83d\udd27","permalink":"/docs/design-pattern/creational/abstract-factory"},"next":{"title":"Factory Method Pattern \ud83c\udfed","permalink":"/docs/design-pattern/creational/factory-method"}}');var s=e(4848),o=e(8453);const i={},l="Builder Pattern \ud83c\udfd7\ufe0f",a={},u=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Code Example",id:"-code-example",level:2},{value:"Basic Implementation",id:"basic-implementation",level:3},{value:"\ud83c\udf1f Real-World Examples",id:"-real-world-examples",level:2},{value:"1. SQL Query Builder",id:"1-sql-query-builder",level:3},{value:"2. HTTP Request Builder",id:"2-http-request-builder",level:3},{value:"3. Configuration Builder",id:"3-configuration-builder",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Variations",id:"-variations",level:2},{value:"1. <strong>Fluent Interface Builder</strong>",id:"1-fluent-interface-builder",level:3},{value:"2. <strong>Step Builder</strong>",id:"2-step-builder",level:3},{value:"3. <strong>Generic Builder</strong>",id:"3-generic-builder",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(r){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"builder-pattern-\ufe0f",children:"Builder Pattern \ud83c\udfd7\ufe0f"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definition"}),": The Builder pattern separates the construction of complex objects from their representation, allowing the same construction process to create different representations."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,s.jsx)(n.p,{children:"Construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code."}),"\n",(0,s.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,s.jsx)(n.p,{children:"Imagine creating a complex object like a House. A house might have walls, doors, windows, a roof, a garage, a swimming pool, a garden, etc. The simple approach would be to create a huge constructor with all possible parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// This becomes unwieldy quickly\r\nclass House {\r\n  constructor(walls, doors, windows, roof, garage, pool, garden, basement, attic) {\r\n    // Too many parameters!\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This approach has several problems:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Most parameters will be optional, leading to telescoping constructors"}),"\n",(0,s.jsx)(n.li,{children:"The constructor becomes hard to read and maintain"}),"\n",(0,s.jsx)(n.li,{children:"Creating different variations becomes cumbersome"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,s.jsx)(n.p,{children:"The Builder pattern suggests extracting the object construction code out of its own class and move it to separate objects called builders."}),"\n",(0,s.jsx)(n.p,{children:"The pattern organizes object construction into a set of steps. To create an object, you execute a series of these steps on a builder object. The important part is that you don't need to call all steps - you can call only those steps that are necessary for producing a particular configuration of an object."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Director\r\n\u251c\u2500\u2500 construct(builder)\r\n\u2514\u2500\u2500 setBuilder(builder)\r\n\r\nBuilder (interface)\r\n\u251c\u2500\u2500 reset()\r\n\u251c\u2500\u2500 buildPartA()\r\n\u251c\u2500\u2500 buildPartB()\r\n\u251c\u2500\u2500 buildPartC()\r\n\u2514\u2500\u2500 getResult()\r\n\r\nConcreteBuilder implements Builder\r\n\u251c\u2500\u2500 product: Product\r\n\u251c\u2500\u2500 reset(): void\r\n\u251c\u2500\u2500 buildPartA(): void\r\n\u251c\u2500\u2500 buildPartB(): void\r\n\u251c\u2500\u2500 buildPartC(): void\r\n\u2514\u2500\u2500 getResult(): Product\r\n\r\nProduct\r\n\u2514\u2500\u2500 parts[]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-code-example",children:"\ud83d\udcbb Code Example"}),"\n",(0,s.jsx)(n.h3,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Product class\r\nclass House {\r\n  constructor() {\r\n    this.parts = [];\r\n  }\r\n  \r\n  addPart(part) {\r\n    this.parts.push(part);\r\n  }\r\n  \r\n  describe() {\r\n    console.log(`\ud83c\udfe0 House with: ${this.parts.join(\', \')}`);\r\n    return this.parts;\r\n  }\r\n}\r\n\r\n// Abstract Builder\r\nclass HouseBuilder {\r\n  constructor() {\r\n    this.reset();\r\n  }\r\n  \r\n  reset() {\r\n    this.house = new House();\r\n    return this;\r\n  }\r\n  \r\n  // Abstract methods\r\n  buildFoundation() { throw new Error("buildFoundation() must be implemented"); }\r\n  buildWalls() { throw new Error("buildWalls() must be implemented"); }\r\n  buildRoof() { throw new Error("buildRoof() must be implemented"); }\r\n  buildDoors() { throw new Error("buildDoors() must be implemented"); }\r\n  buildWindows() { throw new Error("buildWindows() must be implemented"); }\r\n  \r\n  getResult() {\r\n    const result = this.house;\r\n    this.reset(); // Reset for next construction\r\n    return result;\r\n  }\r\n}\r\n\r\n// Concrete Builder - Modern House\r\nclass ModernHouseBuilder extends HouseBuilder {\r\n  buildFoundation() {\r\n    console.log("\ud83c\udfd7\ufe0f Building concrete slab foundation");\r\n    this.house.addPart("Concrete slab foundation");\r\n    return this;\r\n  }\r\n  \r\n  buildWalls() {\r\n    console.log("\ud83e\uddf1 Building glass and steel walls");\r\n    this.house.addPart("Glass and steel walls");\r\n    return this;\r\n  }\r\n  \r\n  buildRoof() {\r\n    console.log("\ud83c\udfe0 Building flat roof with solar panels");\r\n    this.house.addPart("Flat roof with solar panels");\r\n    return this;\r\n  }\r\n  \r\n  buildDoors() {\r\n    console.log("\ud83d\udeaa Installing smart glass doors");\r\n    this.house.addPart("Smart glass doors");\r\n    return this;\r\n  }\r\n  \r\n  buildWindows() {\r\n    console.log("\ud83e\ude9f Installing floor-to-ceiling windows");\r\n    this.house.addPart("Floor-to-ceiling windows");\r\n    return this;\r\n  }\r\n  \r\n  addSmartHome() {\r\n    console.log("\ud83e\udd16 Installing smart home system");\r\n    this.house.addPart("Smart home automation system");\r\n    return this;\r\n  }\r\n  \r\n  addPool() {\r\n    console.log("\ud83c\udfca Adding infinity pool");\r\n    this.house.addPart("Infinity pool");\r\n    return this;\r\n  }\r\n}\r\n\r\n// Concrete Builder - Traditional House\r\nclass TraditionalHouseBuilder extends HouseBuilder {\r\n  buildFoundation() {\r\n    console.log("\ud83c\udfd7\ufe0f Building stone foundation");\r\n    this.house.addPart("Stone foundation");\r\n    return this;\r\n  }\r\n  \r\n  buildWalls() {\r\n    console.log("\ud83e\uddf1 Building brick walls");\r\n    this.house.addPart("Brick walls");\r\n    return this;\r\n  }\r\n  \r\n  buildRoof() {\r\n    console.log("\ud83c\udfe0 Building pitched roof with tiles");\r\n    this.house.addPart("Pitched tile roof");\r\n    return this;\r\n  }\r\n  \r\n  buildDoors() {\r\n    console.log("\ud83d\udeaa Installing wooden doors");\r\n    this.house.addPart("Wooden doors");\r\n    return this;\r\n  }\r\n  \r\n  buildWindows() {\r\n    console.log("\ud83e\ude9f Installing traditional windows");\r\n    this.house.addPart("Traditional windows");\r\n    return this;\r\n  }\r\n  \r\n  addFireplace() {\r\n    console.log("\ud83d\udd25 Adding stone fireplace");\r\n    this.house.addPart("Stone fireplace");\r\n    return this;\r\n  }\r\n  \r\n  addGarden() {\r\n    console.log("\ud83c\udf39 Adding cottage garden");\r\n    this.house.addPart("Cottage garden");\r\n    return this;\r\n  }\r\n}\r\n\r\n// Director class\r\nclass HouseDirector {\r\n  constructor() {\r\n    this.builder = null;\r\n  }\r\n  \r\n  setBuilder(builder) {\r\n    this.builder = builder;\r\n  }\r\n  \r\n  // Different construction algorithms\r\n  constructBasicHouse() {\r\n    if (!this.builder) throw new Error("Builder not set");\r\n    \r\n    console.log("\ud83c\udfd7\ufe0f Constructing basic house...");\r\n    return this.builder\r\n      .buildFoundation()\r\n      .buildWalls()\r\n      .buildRoof()\r\n      .buildDoors()\r\n      .buildWindows();\r\n  }\r\n  \r\n  constructLuxuryHouse() {\r\n    if (!this.builder) throw new Error("Builder not set");\r\n    \r\n    console.log("\ud83c\udfd7\ufe0f Constructing luxury house...");\r\n    this.constructBasicHouse();\r\n    \r\n    // Add luxury features based on builder type\r\n    if (this.builder instanceof ModernHouseBuilder) {\r\n      this.builder.addSmartHome().addPool();\r\n    } else if (this.builder instanceof TraditionalHouseBuilder) {\r\n      this.builder.addFireplace().addGarden();\r\n    }\r\n    \r\n    return this.builder;\r\n  }\r\n}\r\n\r\n// Usage\r\nfunction demonstrateBuilder() {\r\n  console.log("=== Builder Pattern Demo ===\\n");\r\n  \r\n  const director = new HouseDirector();\r\n  \r\n  // Build modern houses\r\n  console.log("Building Modern Houses:");\r\n  console.log("-".repeat(30));\r\n  \r\n  const modernBuilder = new ModernHouseBuilder();\r\n  director.setBuilder(modernBuilder);\r\n  \r\n  // Basic modern house\r\n  director.constructBasicHouse();\r\n  const basicModernHouse = modernBuilder.getResult();\r\n  basicModernHouse.describe();\r\n  \r\n  console.log();\r\n  \r\n  // Luxury modern house\r\n  director.constructLuxuryHouse();\r\n  const luxuryModernHouse = modernBuilder.getResult();\r\n  luxuryModernHouse.describe();\r\n  \r\n  console.log("\\n" + "=".repeat(50) + "\\n");\r\n  \r\n  // Build traditional houses\r\n  console.log("Building Traditional Houses:");\r\n  console.log("-".repeat(30));\r\n  \r\n  const traditionalBuilder = new TraditionalHouseBuilder();\r\n  director.setBuilder(traditionalBuilder);\r\n  \r\n  // Basic traditional house\r\n  director.constructBasicHouse();\r\n  const basicTraditionalHouse = traditionalBuilder.getResult();\r\n  basicTraditionalHouse.describe();\r\n  \r\n  console.log();\r\n  \r\n  // Luxury traditional house\r\n  director.constructLuxuryHouse();\r\n  const luxuryTraditionalHouse = traditionalBuilder.getResult();\r\n  luxuryTraditionalHouse.describe();\r\n}\r\n\r\ndemonstrateBuilder();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-real-world-examples",children:"\ud83c\udf1f Real-World Examples"}),"\n",(0,s.jsx)(n.h3,{id:"1-sql-query-builder",children:"1. SQL Query Builder"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Product - SQL Query\r\nclass SQLQuery {\r\n  constructor() {\r\n    this.selectFields = [];\r\n    this.fromTable = '';\r\n    this.joinClauses = [];\r\n    this.whereConditions = [];\r\n    this.groupByFields = [];\r\n    this.havingConditions = [];\r\n    this.orderByFields = [];\r\n    this.limitCount = null;\r\n    this.offsetCount = null;\r\n  }\r\n  \r\n  toString() {\r\n    let query = '';\r\n    \r\n    // SELECT clause\r\n    if (this.selectFields.length > 0) {\r\n      query += `SELECT ${this.selectFields.join(', ')}`;\r\n    }\r\n    \r\n    // FROM clause\r\n    if (this.fromTable) {\r\n      query += ` FROM ${this.fromTable}`;\r\n    }\r\n    \r\n    // JOIN clauses\r\n    if (this.joinClauses.length > 0) {\r\n      query += ` ${this.joinClauses.join(' ')}`;\r\n    }\r\n    \r\n    // WHERE clause\r\n    if (this.whereConditions.length > 0) {\r\n      query += ` WHERE ${this.whereConditions.join(' AND ')}`;\r\n    }\r\n    \r\n    // GROUP BY clause\r\n    if (this.groupByFields.length > 0) {\r\n      query += ` GROUP BY ${this.groupByFields.join(', ')}`;\r\n    }\r\n    \r\n    // HAVING clause\r\n    if (this.havingConditions.length > 0) {\r\n      query += ` HAVING ${this.havingConditions.join(' AND ')}`;\r\n    }\r\n    \r\n    // ORDER BY clause\r\n    if (this.orderByFields.length > 0) {\r\n      query += ` ORDER BY ${this.orderByFields.join(', ')}`;\r\n    }\r\n    \r\n    // LIMIT clause\r\n    if (this.limitCount !== null) {\r\n      query += ` LIMIT ${this.limitCount}`;\r\n    }\r\n    \r\n    // OFFSET clause\r\n    if (this.offsetCount !== null) {\r\n      query += ` OFFSET ${this.offsetCount}`;\r\n    }\r\n    \r\n    return query + ';';\r\n  }\r\n}\r\n\r\n// Builder\r\nclass QueryBuilder {\r\n  constructor() {\r\n    this.reset();\r\n  }\r\n  \r\n  reset() {\r\n    this.query = new SQLQuery();\r\n    return this;\r\n  }\r\n  \r\n  select(...fields) {\r\n    if (fields.length === 0) {\r\n      this.query.selectFields.push('*');\r\n    } else {\r\n      this.query.selectFields.push(...fields);\r\n    }\r\n    console.log(`\ud83d\udcca SELECT: ${fields.join(', ') || '*'}`);\r\n    return this;\r\n  }\r\n  \r\n  from(table) {\r\n    this.query.fromTable = table;\r\n    console.log(`\ud83d\udccb FROM: ${table}`);\r\n    return this;\r\n  }\r\n  \r\n  join(table, condition, type = 'INNER') {\r\n    const joinClause = `${type} JOIN ${table} ON ${condition}`;\r\n    this.query.joinClauses.push(joinClause);\r\n    console.log(`\ud83d\udd17 JOIN: ${joinClause}`);\r\n    return this;\r\n  }\r\n  \r\n  leftJoin(table, condition) {\r\n    return this.join(table, condition, 'LEFT');\r\n  }\r\n  \r\n  rightJoin(table, condition) {\r\n    return this.join(table, condition, 'RIGHT');\r\n  }\r\n  \r\n  where(condition) {\r\n    this.query.whereConditions.push(condition);\r\n    console.log(`\ud83d\udd0d WHERE: ${condition}`);\r\n    return this;\r\n  }\r\n  \r\n  groupBy(...fields) {\r\n    this.query.groupByFields.push(...fields);\r\n    console.log(`\ud83d\udcca GROUP BY: ${fields.join(', ')}`);\r\n    return this;\r\n  }\r\n  \r\n  having(condition) {\r\n    this.query.havingConditions.push(condition);\r\n    console.log(`\ud83d\udd0d HAVING: ${condition}`);\r\n    return this;\r\n  }\r\n  \r\n  orderBy(field, direction = 'ASC') {\r\n    const orderClause = `${field} ${direction}`;\r\n    this.query.orderByFields.push(orderClause);\r\n    console.log(`\ud83d\udcc8 ORDER BY: ${orderClause}`);\r\n    return this;\r\n  }\r\n  \r\n  limit(count) {\r\n    this.query.limitCount = count;\r\n    console.log(`\ud83d\udd22 LIMIT: ${count}`);\r\n    return this;\r\n  }\r\n  \r\n  offset(count) {\r\n    this.query.offsetCount = count;\r\n    console.log(`\u23ed\ufe0f OFFSET: ${count}`);\r\n    return this;\r\n  }\r\n  \r\n  build() {\r\n    const result = this.query;\r\n    this.reset();\r\n    return result;\r\n  }\r\n}\r\n\r\n// Usage examples\r\nconsole.log(\"=== SQL Query Builder Demo ===\\n\");\r\n\r\nconst queryBuilder = new QueryBuilder();\r\n\r\n// Simple query\r\nconsole.log(\"Building Simple Query:\");\r\nconsole.log(\"-\".repeat(25));\r\nconst simpleQuery = queryBuilder\r\n  .select('name', 'email')\r\n  .from('users')\r\n  .where('active = 1')\r\n  .orderBy('name')\r\n  .build();\r\n\r\nconsole.log(\"\ud83d\udcdd Generated Query:\");\r\nconsole.log(simpleQuery.toString());\r\n\r\nconsole.log(\"\\n\" + \"=\".repeat(40) + \"\\n\");\r\n\r\n// Complex query with joins\r\nconsole.log(\"Building Complex Query:\");\r\nconsole.log(\"-\".repeat(25));\r\nconst complexQuery = queryBuilder\r\n  .select('u.name', 'u.email', 'p.title', 'COUNT(c.id) as comment_count')\r\n  .from('users u')\r\n  .leftJoin('posts p', 'p.user_id = u.id')\r\n  .leftJoin('comments c', 'c.post_id = p.id')\r\n  .where('u.active = 1')\r\n  .where('p.published = 1')\r\n  .groupBy('u.id', 'p.id')\r\n  .having('comment_count > 5')\r\n  .orderBy('comment_count', 'DESC')\r\n  .limit(10)\r\n  .build();\r\n\r\nconsole.log(\"\ud83d\udcdd Generated Query:\");\r\nconsole.log(complexQuery.toString());\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-http-request-builder",children:"2. HTTP Request Builder"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Product - HTTP Request\r\nclass HTTPRequest {\r\n  constructor() {\r\n    this.method = 'GET';\r\n    this.url = '';\r\n    this.headers = {};\r\n    this.queryParams = {};\r\n    this.body = null;\r\n    this.timeout = 5000;\r\n    this.retries = 0;\r\n    this.authToken = null;\r\n  }\r\n  \r\n  getConfig() {\r\n    const config = {\r\n      method: this.method,\r\n      url: this.buildUrl(),\r\n      headers: this.headers,\r\n      timeout: this.timeout\r\n    };\r\n    \r\n    if (this.body) {\r\n      config.data = this.body;\r\n    }\r\n    \r\n    return config;\r\n  }\r\n  \r\n  buildUrl() {\r\n    let url = this.url;\r\n    const paramString = Object.keys(this.queryParams)\r\n      .map(key => `${key}=${encodeURIComponent(this.queryParams[key])}`)\r\n      .join('&');\r\n    \r\n    if (paramString) {\r\n      url += (url.includes('?') ? '&' : '?') + paramString;\r\n    }\r\n    \r\n    return url;\r\n  }\r\n  \r\n  async execute() {\r\n    console.log(`\ud83c\udf10 Executing ${this.method} request to: ${this.buildUrl()}`);\r\n    console.log(`\ud83d\udccb Headers:`, JSON.stringify(this.headers, null, 2));\r\n    \r\n    if (this.body) {\r\n      console.log(`\ud83d\udce6 Body:`, JSON.stringify(this.body, null, 2));\r\n    }\r\n    \r\n    // Simulate HTTP request\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          status: 200,\r\n          data: { message: 'Request successful', url: this.buildUrl() },\r\n          headers: { 'content-type': 'application/json' }\r\n        });\r\n      }, 100);\r\n    });\r\n  }\r\n}\r\n\r\n// Builder\r\nclass HTTPRequestBuilder {\r\n  constructor() {\r\n    this.reset();\r\n  }\r\n  \r\n  reset() {\r\n    this.request = new HTTPRequest();\r\n    return this;\r\n  }\r\n  \r\n  // HTTP methods\r\n  get(url) {\r\n    this.request.method = 'GET';\r\n    this.request.url = url;\r\n    console.log(`\ud83d\udd0d GET: ${url}`);\r\n    return this;\r\n  }\r\n  \r\n  post(url) {\r\n    this.request.method = 'POST';\r\n    this.request.url = url;\r\n    console.log(`\ud83d\udce4 POST: ${url}`);\r\n    return this;\r\n  }\r\n  \r\n  put(url) {\r\n    this.request.method = 'PUT';\r\n    this.request.url = url;\r\n    console.log(`\ud83d\udcdd PUT: ${url}`);\r\n    return this;\r\n  }\r\n  \r\n  delete(url) {\r\n    this.request.method = 'DELETE';\r\n    this.request.url = url;\r\n    console.log(`\ud83d\uddd1\ufe0f DELETE: ${url}`);\r\n    return this;\r\n  }\r\n  \r\n  // Headers\r\n  header(name, value) {\r\n    this.request.headers[name] = value;\r\n    console.log(`\ud83d\udccb Header: ${name} = ${value}`);\r\n    return this;\r\n  }\r\n  \r\n  headers(headerObj) {\r\n    Object.assign(this.request.headers, headerObj);\r\n    console.log(`\ud83d\udccb Headers:`, headerObj);\r\n    return this;\r\n  }\r\n  \r\n  contentType(type) {\r\n    return this.header('Content-Type', type);\r\n  }\r\n  \r\n  accept(type) {\r\n    return this.header('Accept', type);\r\n  }\r\n  \r\n  // Authentication\r\n  bearerAuth(token) {\r\n    this.request.authToken = token;\r\n    return this.header('Authorization', `Bearer ${token}`);\r\n  }\r\n  \r\n  basicAuth(username, password) {\r\n    const credentials = btoa(`${username}:${password}`);\r\n    return this.header('Authorization', `Basic ${credentials}`);\r\n  }\r\n  \r\n  // Query parameters\r\n  query(name, value) {\r\n    this.request.queryParams[name] = value;\r\n    console.log(`\ud83d\udd0d Query param: ${name} = ${value}`);\r\n    return this;\r\n  }\r\n  \r\n  queryParams(params) {\r\n    Object.assign(this.request.queryParams, params);\r\n    console.log(`\ud83d\udd0d Query params:`, params);\r\n    return this;\r\n  }\r\n  \r\n  // Body\r\n  body(data) {\r\n    this.request.body = data;\r\n    console.log(`\ud83d\udce6 Body set:`, typeof data === 'object' ? '[Object]' : data);\r\n    return this;\r\n  }\r\n  \r\n  json(data) {\r\n    this.contentType('application/json');\r\n    return this.body(JSON.stringify(data));\r\n  }\r\n  \r\n  form(data) {\r\n    this.contentType('application/x-www-form-urlencoded');\r\n    const formData = Object.keys(data)\r\n      .map(key => `${key}=${encodeURIComponent(data[key])}`)\r\n      .join('&');\r\n    return this.body(formData);\r\n  }\r\n  \r\n  // Configuration\r\n  timeout(ms) {\r\n    this.request.timeout = ms;\r\n    console.log(`\u23f1\ufe0f Timeout: ${ms}ms`);\r\n    return this;\r\n  }\r\n  \r\n  retries(count) {\r\n    this.request.retries = count;\r\n    console.log(`\ud83d\udd04 Retries: ${count}`);\r\n    return this;\r\n  }\r\n  \r\n  // Build and execute\r\n  build() {\r\n    const result = this.request;\r\n    this.reset();\r\n    return result;\r\n  }\r\n  \r\n  async execute() {\r\n    const request = this.build();\r\n    return await request.execute();\r\n  }\r\n}\r\n\r\n// Usage examples\r\nasync function demonstrateHTTPBuilder() {\r\n  console.log(\"=== HTTP Request Builder Demo ===\\n\");\r\n  \r\n  const builder = new HTTPRequestBuilder();\r\n  \r\n  // Simple GET request\r\n  console.log(\"Building Simple GET Request:\");\r\n  console.log(\"-\".repeat(30));\r\n  \r\n  const getResponse = await builder\r\n    .get('https://api.example.com/users')\r\n    .header('User-Agent', 'MyApp/1.0')\r\n    .query('page', 1)\r\n    .query('limit', 10)\r\n    .timeout(3000)\r\n    .execute();\r\n  \r\n  console.log(\"\u2705 Response:\", getResponse);\r\n  \r\n  console.log(\"\\n\" + \"=\".repeat(50) + \"\\n\");\r\n  \r\n  // Complex POST request\r\n  console.log(\"Building Complex POST Request:\");\r\n  console.log(\"-\".repeat(30));\r\n  \r\n  const postResponse = await builder\r\n    .post('https://api.example.com/users')\r\n    .bearerAuth('eyJhbGciOiJIUzI1NiIs...')\r\n    .accept('application/json')\r\n    .json({\r\n      name: 'John Doe',\r\n      email: 'john@example.com',\r\n      role: 'user'\r\n    })\r\n    .timeout(5000)\r\n    .retries(2)\r\n    .execute();\r\n  \r\n  console.log(\"\u2705 Response:\", postResponse);\r\n  \r\n  console.log(\"\\n\" + \"=\".repeat(50) + \"\\n\");\r\n  \r\n  // Form submission\r\n  console.log(\"Building Form POST Request:\");\r\n  console.log(\"-\".repeat(30));\r\n  \r\n  const formResponse = await builder\r\n    .post('https://api.example.com/contact')\r\n    .form({\r\n      name: 'Jane Smith',\r\n      email: 'jane@example.com',\r\n      message: 'Hello World!'\r\n    })\r\n    .execute();\r\n  \r\n  console.log(\"\u2705 Response:\", formResponse);\r\n}\r\n\r\n// Run the demo\r\ndemonstrateHTTPBuilder();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-configuration-builder",children:"3. Configuration Builder"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Product - Application Configuration\r\nclass AppConfig {\r\n  constructor() {\r\n    this.database = {};\r\n    this.server = {};\r\n    this.logging = {};\r\n    this.security = {};\r\n    this.cache = {};\r\n    this.email = {};\r\n    this.features = {};\r\n  }\r\n  \r\n  validate() {\r\n    const errors = [];\r\n    \r\n    // Validate required database settings\r\n    if (!this.database.host) errors.push(\"Database host is required\");\r\n    if (!this.database.name) errors.push(\"Database name is required\");\r\n    \r\n    // Validate server settings\r\n    if (!this.server.port) errors.push(\"Server port is required\");\r\n    \r\n    if (errors.length > 0) {\r\n      throw new Error(`Configuration validation failed:\\n- ${errors.join('\\n- ')}`);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  toJSON() {\r\n    return {\r\n      database: this.database,\r\n      server: this.server,\r\n      logging: this.logging,\r\n      security: this.security,\r\n      cache: this.cache,\r\n      email: this.email,\r\n      features: this.features\r\n    };\r\n  }\r\n  \r\n  toString() {\r\n    return JSON.stringify(this.toJSON(), null, 2);\r\n  }\r\n}\r\n\r\n// Builder\r\nclass ConfigBuilder {\r\n  constructor() {\r\n    this.reset();\r\n  }\r\n  \r\n  reset() {\r\n    this.config = new AppConfig();\r\n    return this;\r\n  }\r\n  \r\n  // Database configuration\r\n  database(options) {\r\n    Object.assign(this.config.database, options);\r\n    console.log(\"\ud83d\uddc4\ufe0f Database config:\", options);\r\n    return this;\r\n  }\r\n  \r\n  mysql(options = {}) {\r\n    return this.database({\r\n      type: 'mysql',\r\n      port: 3306,\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  postgresql(options = {}) {\r\n    return this.database({\r\n      type: 'postgresql',\r\n      port: 5432,\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  mongodb(options = {}) {\r\n    return this.database({\r\n      type: 'mongodb',\r\n      port: 27017,\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  // Server configuration\r\n  server(options) {\r\n    Object.assign(this.config.server, options);\r\n    console.log(\"\ud83d\udda5\ufe0f Server config:\", options);\r\n    return this;\r\n  }\r\n  \r\n  port(port) {\r\n    this.config.server.port = port;\r\n    console.log(`\ud83d\udd0c Server port: ${port}`);\r\n    return this;\r\n  }\r\n  \r\n  host(host) {\r\n    this.config.server.host = host;\r\n    console.log(`\ud83c\udf10 Server host: ${host}`);\r\n    return this;\r\n  }\r\n  \r\n  // Logging configuration\r\n  logging(options) {\r\n    Object.assign(this.config.logging, options);\r\n    console.log(\"\ud83d\udcdd Logging config:\", options);\r\n    return this;\r\n  }\r\n  \r\n  logLevel(level) {\r\n    this.config.logging.level = level;\r\n    console.log(`\ud83d\udcca Log level: ${level}`);\r\n    return this;\r\n  }\r\n  \r\n  logFile(filename) {\r\n    this.config.logging.file = filename;\r\n    console.log(`\ud83d\udcc4 Log file: ${filename}`);\r\n    return this;\r\n  }\r\n  \r\n  // Security configuration\r\n  security(options) {\r\n    Object.assign(this.config.security, options);\r\n    console.log(\"\ud83d\udd12 Security config:\", options);\r\n    return this;\r\n  }\r\n  \r\n  jwtSecret(secret) {\r\n    this.config.security.jwtSecret = secret;\r\n    console.log(\"\ud83d\udd11 JWT secret configured\");\r\n    return this;\r\n  }\r\n  \r\n  cors(options = {}) {\r\n    this.config.security.cors = {\r\n      enabled: true,\r\n      origin: '*',\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n      ...options\r\n    };\r\n    console.log(\"\ud83c\udf10 CORS configured:\", this.config.security.cors);\r\n    return this;\r\n  }\r\n  \r\n  // Cache configuration\r\n  cache(options) {\r\n    Object.assign(this.config.cache, options);\r\n    console.log(\"\ud83d\udcbe Cache config:\", options);\r\n    return this;\r\n  }\r\n  \r\n  redis(options = {}) {\r\n    return this.cache({\r\n      type: 'redis',\r\n      host: 'localhost',\r\n      port: 6379,\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  memcached(options = {}) {\r\n    return this.cache({\r\n      type: 'memcached',\r\n      host: 'localhost',\r\n      port: 11211,\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  // Email configuration\r\n  email(options) {\r\n    Object.assign(this.config.email, options);\r\n    console.log(\"\ud83d\udce7 Email config set\");\r\n    return this;\r\n  }\r\n  \r\n  smtp(options) {\r\n    return this.email({\r\n      type: 'smtp',\r\n      ...options\r\n    });\r\n  }\r\n  \r\n  // Feature flags\r\n  features(options) {\r\n    Object.assign(this.config.features, options);\r\n    console.log(\"\ud83c\udf9b\ufe0f Features configured:\", options);\r\n    return this;\r\n  }\r\n  \r\n  enableFeature(feature, enabled = true) {\r\n    this.config.features[feature] = enabled;\r\n    console.log(`\ud83c\udf9b\ufe0f Feature ${feature}: ${enabled ? 'enabled' : 'disabled'}`);\r\n    return this;\r\n  }\r\n  \r\n  // Environment-specific configurations\r\n  development() {\r\n    return this\r\n      .logLevel('debug')\r\n      .cors({ origin: 'http://localhost:3000' })\r\n      .enableFeature('debug', true)\r\n      .enableFeature('hotReload', true);\r\n  }\r\n  \r\n  production() {\r\n    return this\r\n      .logLevel('error')\r\n      .cors({ origin: 'https://myapp.com' })\r\n      .enableFeature('debug', false)\r\n      .enableFeature('monitoring', true)\r\n      .enableFeature('compression', true);\r\n  }\r\n  \r\n  testing() {\r\n    return this\r\n      .logLevel('warn')\r\n      .database({ name: 'test_db' })\r\n      .enableFeature('debug', true)\r\n      .enableFeature('testMode', true);\r\n  }\r\n  \r\n  build() {\r\n    const result = this.config;\r\n    result.validate(); // Validate before returning\r\n    this.reset();\r\n    return result;\r\n  }\r\n}\r\n\r\n// Usage examples\r\nfunction demonstrateConfigBuilder() {\r\n  console.log(\"=== Configuration Builder Demo ===\\n\");\r\n  \r\n  const builder = new ConfigBuilder();\r\n  \r\n  // Development configuration\r\n  console.log(\"Building Development Configuration:\");\r\n  console.log(\"-\".repeat(35));\r\n  \r\n  const devConfig = builder\r\n    .postgresql({\r\n      host: 'localhost',\r\n      name: 'myapp_dev',\r\n      username: 'dev_user',\r\n      password: 'dev_pass'\r\n    })\r\n    .port(3000)\r\n    .host('localhost')\r\n    .development()\r\n    .redis({ host: 'localhost' })\r\n    .smtp({\r\n      host: 'localhost',\r\n      port: 1025,\r\n      secure: false\r\n    })\r\n    .jwtSecret('dev-secret-key')\r\n    .build();\r\n  \r\n  console.log(\"\u2705 Development Config:\");\r\n  console.log(devConfig.toString());\r\n  \r\n  console.log(\"\\n\" + \"=\".repeat(60) + \"\\n\");\r\n  \r\n  // Production configuration\r\n  console.log(\"Building Production Configuration:\");\r\n  console.log(\"-\".repeat(35));\r\n  \r\n  const prodConfig = builder\r\n    .mysql({\r\n      host: 'prod-db.example.com',\r\n      name: 'myapp_prod',\r\n      username: 'prod_user',\r\n      password: process.env.DB_PASSWORD || 'secure-password',\r\n      ssl: true\r\n    })\r\n    .port(8080)\r\n    .host('0.0.0.0')\r\n    .production()\r\n    .redis({\r\n      host: 'redis.example.com',\r\n      password: process.env.REDIS_PASSWORD || 'redis-password'\r\n    })\r\n    .smtp({\r\n      host: 'smtp.gmail.com',\r\n      port: 587,\r\n      secure: true,\r\n      auth: {\r\n        user: process.env.EMAIL_USER,\r\n        pass: process.env.EMAIL_PASSWORD\r\n      }\r\n    })\r\n    .jwtSecret(process.env.JWT_SECRET || 'super-secure-secret')\r\n    .build();\r\n  \r\n  console.log(\"\u2705 Production Config:\");\r\n  console.log(prodConfig.toString());\r\n  \r\n  console.log(\"\\n\" + \"=\".repeat(60) + \"\\n\");\r\n  \r\n  // Testing configuration\r\n  console.log(\"Building Test Configuration:\");\r\n  console.log(\"-\".repeat(30));\r\n  \r\n  const testConfig = builder\r\n    .mongodb({\r\n      host: 'localhost',\r\n      name: 'myapp_test'\r\n    })\r\n    .port(3001)\r\n    .testing()\r\n    .logFile('test.log')\r\n    .enableFeature('mockData', true)\r\n    .build();\r\n  \r\n  console.log(\"\u2705 Test Config:\");\r\n  console.log(testConfig.toString());\r\n}\r\n\r\n// Run the demo\r\ndemonstrateConfigBuilder();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step-by-Step Construction"}),": Allows you to construct objects step by step"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Different Representations"}),": Can create different representations of the same object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Readability"}),": Builder methods provide a more readable way to construct objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameter Validation"}),": Can validate parameters at each step"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Immutability"}),": Can create immutable objects by building them completely before returning"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Easy to add new construction steps without changing existing code"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Complexity"}),": Increases code complexity due to multiple new classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Overhead"}),": Creates additional objects during construction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Learning Curve"}),": More complex pattern to understand initially"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Overkill for Simple Objects"}),": Unnecessary for objects with few parameters"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Objects"}),": When creating objects with many optional parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step-by-Step Construction"}),": When object creation involves multiple steps"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Different Representations"}),": When you need to create different representations of the same object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Immutable Objects"}),": When building immutable objects with many fields"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration Objects"}),": For creating configuration objects with many optional settings"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-variations",children:"\ud83d\udd04 Variations"}),"\n",(0,s.jsxs)(n.h3,{id:"1-fluent-interface-builder",children:["1. ",(0,s.jsx)(n.strong,{children:"Fluent Interface Builder"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class FluentBuilder {\r\n  method1(value) {\r\n    this.value1 = value;\r\n    return this; // Return this for chaining\r\n  }\r\n  \r\n  method2(value) {\r\n    this.value2 = value;\r\n    return this;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-step-builder",children:["2. ",(0,s.jsx)(n.strong,{children:"Step Builder"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class StepBuilder {\r\n  constructor() {\r\n    return {\r\n      step1: (value) => ({\r\n        step2: (value) => ({\r\n          build: () => new Product(value1, value2)\r\n        })\r\n      })\r\n    };\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-generic-builder",children:["3. ",(0,s.jsx)(n.strong,{children:"Generic Builder"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class GenericBuilder {\r\n  constructor(ProductClass) {\r\n    this.ProductClass = ProductClass;\r\n    this.properties = {};\r\n  }\r\n  \r\n  set(property, value) {\r\n    this.properties[property] = value;\r\n    return this;\r\n  }\r\n  \r\n  build() {\r\n    return new this.ProductClass(this.properties);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Abstract Factory"}),": Builders often use factories to create components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Composite"}),": Builder can be used to build Composite structures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Singleton"}),": Builder can be implemented as a Singleton"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strategy"}),": Different builders can represent different strategies for object construction"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/builder",children:"Builder Pattern - Refactoring.Guru"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/builder",children:"JavaScript Builder Pattern"})}),"\n"]})]})}function c(r={}){const{wrapper:n}={...(0,o.R)(),...r.components};return n?(0,s.jsx)(n,{...r,children:(0,s.jsx)(d,{...r})}):d(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>i,x:()=>l});var t=e(6540);const s={},o=t.createContext(s);function i(r){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function l(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:i(r.components),t.createElement(o.Provider,{value:n},r.children)}}}]);