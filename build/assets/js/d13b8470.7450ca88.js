"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[1396],{8266:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"javascript/flow-of-control","title":"Flow Control in JavaScript","description":"Flow control in JavaScript allows programmers to control the execution of code based on specific conditions. The main control structures are if...else, switch, and conditional operators.","source":"@site/docs/javascript/flow-of-control.md","sourceDirName":"javascript","slug":"/javascript/flow-of-control","permalink":"/docs/javascript/flow-of-control","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Event Handling","permalink":"/docs/javascript/event-handling"},"next":{"title":"function-callback","permalink":"/docs/javascript/function-callback"}}');var i=l(4848),o=l(8453);const a={},t="Flow Control in JavaScript",c={},r=[{value:"If...Else Statement",id:"ifelse-statement",level:2},{value:"Falsy Values in JavaScript",id:"falsy-values-in-javascript",level:2},{value:"Examples of Falsy Value Comparisons",id:"examples-of-falsy-value-comparisons",level:3},{value:"Short-Circuiting",id:"short-circuiting",level:2},{value:"Logical AND (&amp;&amp;)",id:"logical-and-",level:3},{value:"Logical OR (||)",id:"logical-or-",level:3},{value:"Equality Operators (== vs ===)",id:"equality-operators--vs-",level:2},{value:"Abstract Equality (==)",id:"abstract-equality-",level:3},{value:"Strict Equality (===)",id:"strict-equality-",level:3},{value:"Switch Statement",id:"switch-statement",level:2},{value:"Special Comparison Cases",id:"special-comparison-cases",level:2},{value:"Object.is()",id:"objectis",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"flow-control-in-javascript",children:"Flow Control in JavaScript"})}),"\n",(0,i.jsxs)(n.p,{children:["Flow control in JavaScript allows programmers to control the execution of code based on specific conditions. The main control structures are ",(0,i.jsx)(n.code,{children:"if...else"}),", ",(0,i.jsx)(n.code,{children:"switch"}),", and conditional operators."]}),"\n",(0,i.jsx)(n.h2,{id:"ifelse-statement",children:"If...Else Statement"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"if"})," statement specifies a block of code to be executed when a condition is true, while ",(0,i.jsx)(n.code,{children:"else"})," specifies what happens when the condition is false."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"if (condition) {\n    // block of code to be executed if the condition is true\n} else { \n    // block of code to be executed if the condition is false\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["While ",(0,i.jsx)(n.code,{children:"if...else"})," works well for 2-4 conditions, code can become complex and less readable when dealing with more conditions."]}),"\n",(0,i.jsx)(n.h2,{id:"falsy-values-in-javascript",children:"Falsy Values in JavaScript"}),"\n",(0,i.jsx)(n.p,{children:"The following values are considered falsy in JavaScript:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"undefined"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"null"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"false"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"''"})," (empty string)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"NaN"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"examples-of-falsy-value-comparisons",children:"Examples of Falsy Value Comparisons"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// All falsy values in a condition\nif(undefined && NaN && null && '' && 0 && false) {\n    console.log(\"true\");\n} else {    \n    console.log(\"false\"); // outputs: false\n}\n\n// Comparing false with different values\nconsole.log(false == undefined);  // false\nconsole.log(false == NaN);       // false\nconsole.log(false == null);      // false\nconsole.log(false == '');        // true\nconsole.log(false == 0);         // true\nconsole.log(false == false);     // true\n"})}),"\n",(0,i.jsx)(n.h2,{id:"short-circuiting",children:"Short-Circuiting"}),"\n",(0,i.jsx)(n.p,{children:"JavaScript uses short-circuit evaluation when processing logical operators:"}),"\n",(0,i.jsx)(n.h3,{id:"logical-and-",children:"Logical AND (&&)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If any operand is false, the remaining operands are not evaluated"}),"\n",(0,i.jsx)(n.li,{children:"Returns false immediately upon encountering a falsy value"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"logical-or-",children:"Logical OR (||)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If any operand is true, the remaining operands are not evaluated"}),"\n",(0,i.jsx)(n.li,{children:"Returns true immediately upon encountering a truthy value"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"equality-operators--vs-",children:"Equality Operators (== vs ===)"}),"\n",(0,i.jsx)(n.h3,{id:"abstract-equality-",children:"Abstract Equality (==)"}),"\n",(0,i.jsx)(n.p,{children:"The double equals operator tests for abstract equality with type coercion:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Numbers & Strings"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"String is converted to a number before comparison"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Boolean & Non-Boolean"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Non-boolean is converted to a boolean before comparison"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Object & Primitive"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Object is converted to primitive type before comparison"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"strict-equality-",children:"Strict Equality (===)"}),"\n",(0,i.jsx)(n.p,{children:"The triple equals operator tests for strict equality without type coercion, requiring both value and type to match."}),"\n",(0,i.jsx)(n.h2,{id:"switch-statement",children:"Switch Statement"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"switch"})," statement provides a way to execute different code blocks based on different conditions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"switch(expression) {\n    case unique_value:\n        statement;\n        break;\n    default:\n        default_statement;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"special-comparison-cases",children:"Special Comparison Cases"}),"\n",(0,i.jsx)(n.p,{children:"Here are some interesting comparison cases in JavaScript:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Null and Undefined\nconsole.log(null == undefined);    // true\nconsole.log(null === undefined);   // false\n\n// Zero Comparisons\nconsole.log(-0 == +0);            // true\nconsole.log(-0 == 0);             // true\nconsole.log(0 == +0);             // true\n\n// Infinity and NaN\nconsole.log(0/0);                 // NaN\nconsole.log(1/0);                 // Infinity\nconsole.log(-1/0);                // -Infinity\nconsole.log(-Infinity == +Infinity); // false\nconsole.log("this is string"/5);   // NaN\n\n// NaN Comparisons\nconsole.log(NaN === NaN);         // false\nconsole.log(NaN !== NaN);         // true\n\n// Falsy Value Comparisons\nconsole.log(false == "");         // true\nconsole.log(false == null);       // false\nconsole.log(false == undefined);  // false\nconsole.log(false == 0);          // true\nconsole.log(false == NaN);        // false\n'})}),"\n",(0,i.jsx)(n.h3,{id:"objectis",children:"Object.is()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Object.is()"})," provides a way to compare values that handles special cases differently from ",(0,i.jsx)(n.code,{children:"=="})," and ",(0,i.jsx)(n.code,{children:"==="}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Object.is(0, -0);     // false\nObject.is(-0, -0);    // true\nObject.is(NaN, 0/0);  // true\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>t});var s=l(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);