"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[501],{193:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"javascript/function-recursion","title":"Recursion in JavaScript","description":"Recursion is a programming pattern where a function calls itself to solve a problem by breaking it down into smaller, similar sub-problems. Each recursive function must have a base case (termination condition) and a recursive case.","source":"@site/docs/javascript/function-recursion.md","sourceDirName":"javascript","slug":"/javascript/function-recursion","permalink":"/docs/javascript/function-recursion","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Memoization","permalink":"/docs/javascript/function-memoization"},"next":{"title":"JavaScript Function Types","permalink":"/docs/javascript/function-types"}}');var s=r(4848),c=r(8453);const a={},l="Recursion in JavaScript",t={},o=[{value:"Basic Concept",id:"basic-concept",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Factorial Calculation",id:"1-factorial-calculation",level:3},{value:"2. Fibonacci Sequence",id:"2-fibonacci-sequence",level:3},{value:"3. Array Sum",id:"3-array-sum",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"When to Use Recursion",id:"when-to-use-recursion",level:2},{value:"Further Reading",id:"further-reading",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"recursion-in-javascript",children:"Recursion in JavaScript"})}),"\n",(0,s.jsx)(n.p,{children:"Recursion is a programming pattern where a function calls itself to solve a problem by breaking it down into smaller, similar sub-problems. Each recursive function must have a base case (termination condition) and a recursive case."}),"\n",(0,s.jsx)(n.h2,{id:"basic-concept",children:"Basic Concept"}),"\n",(0,s.jsx)(n.p,{children:"A recursive function has two main components:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Base Case"}),": The condition that stops the recursion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recursive Case"}),": The part where the function calls itself"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"1-factorial-calculation",children:"1. Factorial Calculation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function factorial(num) {\n    // Base case\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    // Recursive case\n    return num * factorial(num - 1);\n}\n\nconsole.log(factorial(5)); // Output: 120\n// Execution: 5 * 4 * 3 * 2 * 1 = 120\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-fibonacci-sequence",children:"2. Fibonacci Sequence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function fibonacci(n) {\n    // Base cases\n    if (n <= 1) {\n        return n;\n    }\n    // Recursive case\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(6)); // Output: 8\n// Sequence: 0, 1, 1, 2, 3, 5, 8\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-array-sum",children:"3. Array Sum"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function arraySum(arr) {\n    // Base case\n    if (arr.length === 0) {\n        return 0;\n    }\n    // Recursive case\n    return arr[0] + arraySum(arr.slice(1));\n}\n\nconsole.log(arraySum([1, 2, 3, 4])); // Output: 10\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Always Define a Base Case"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prevent infinite recursion"}),"\n",(0,s.jsx)(n.li,{children:"Handle edge cases properly"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Consider Stack Size"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JavaScript has a call stack limit"}),"\n",(0,s.jsx)(n.li,{children:"Very deep recursion can cause stack overflow"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Could cause stack overflow with large numbers\nfunction badRecursion(n) {\n    if (n === 0) return;\n    badRecursion(n - 1);\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Tail Recursion"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"More memory efficient"}),"\n",(0,s.jsx)(n.li,{children:"Keeps track of result in parameters"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function factorialTail(n, accumulator = 1) {\n    if (n === 0) return accumulator;\n    return factorialTail(n - 1, n * accumulator);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Tree Traversal"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function traverseTree(node) {\n    if (!node) return;\n    \n    console.log(node.value);\n    traverseTree(node.left);\n    traverseTree(node.right);\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Directory/File System Operations"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function traverseDirectory(path) {\n    const files = getFiles(path);\n    \n    files.forEach(file => {\n        if (file.isDirectory()) {\n            traverseDirectory(file.path);\n        } else {\n            processFile(file);\n        }\n    });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-recursion",children:"When to Use Recursion"}),"\n",(0,s.jsx)(n.p,{children:"\u2705 Good Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hierarchical data structures (trees, graphs)"}),"\n",(0,s.jsx)(n.li,{children:"Problems that can be broken into similar sub-problems"}),"\n",(0,s.jsx)(n.li,{children:"Mathematical calculations (factorial, fibonacci)"}),"\n",(0,s.jsx)(n.li,{children:"Directory traversal"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u274c Avoid When:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Dealing with deep recursion levels"}),"\n",(0,s.jsx)(n.li,{children:"Memory is a constraint"}),"\n",(0,s.jsx)(n.li,{children:"Iterative solution is more straightforward"}),"\n",(0,s.jsx)(n.li,{children:"Performance is critical (loops are generally faster)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Recursion",children:"MDN Web Docs - Recursion"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://javascript.info/recursion",children:"Understanding Recursion in JavaScript"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const s={},c=i.createContext(s);function a(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);