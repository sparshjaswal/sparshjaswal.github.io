"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[7604],{3173:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"design-pattern/creational/abstract-factory","title":"Abstract Factory Pattern \ud83c\udfed\ud83d\udd27","description":"Definition: The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.","source":"@site/docs/design-pattern/creational/abstract-factory.md","sourceDirName":"design-pattern/creational","slug":"/design-pattern/creational/abstract-factory","permalink":"/docs/design-pattern/creational/abstract-factory","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Visitor Pattern \ud83c\udfc3\u200d\u2642\ufe0f","permalink":"/docs/design-pattern/behavioral/visitor"},"next":{"title":"Builder Pattern \ud83c\udfd7\ufe0f","permalink":"/docs/design-pattern/creational/builder"}}');var o=e(4848),a=e(8453);const c={},s="Abstract Factory Pattern \ud83c\udfed\ud83d\udd27",i={},l=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Code Example",id:"-code-example",level:2},{value:"Basic Implementation",id:"basic-implementation",level:3},{value:"\ud83c\udf1f Real-World Examples",id:"-real-world-examples",level:2},{value:"1. Database Provider Factory",id:"1-database-provider-factory",level:3},{value:"2. Theme Factory for Web Applications",id:"2-theme-factory-for-web-applications",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Variations",id:"-variations",level:2},{value:"1. <strong>Parameterized Abstract Factory</strong>",id:"1-parameterized-abstract-factory",level:3},{value:"2. <strong>Registry-based Abstract Factory</strong>",id:"2-registry-based-abstract-factory",level:3},{value:"3. <strong>Singleton Abstract Factory</strong>",id:"3-singleton-abstract-factory",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(r){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"abstract-factory-pattern-",children:"Abstract Factory Pattern \ud83c\udfed\ud83d\udd27"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,o.jsx)(n.p,{children:"Create families of related objects without having to depend upon their concrete classes. Ensure that products from one family are used together and are compatible with each other."}),"\n",(0,o.jsx)(n.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,o.jsx)(n.p,{children:"Imagine you're developing a cross-platform UI library. Your application needs to create UI elements like buttons, checkboxes, and text inputs that should look and behave consistently within each platform (Windows, Mac, Linux) but differently across platforms."}),"\n",(0,o.jsx)(n.p,{children:"If you use Factory Method for each UI element, you'll end up with code like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const windowsButton = new WindowsButtonFactory().createButton();\r\nconst macCheckbox = new MacCheckboxFactory().createCheckbox(); // Inconsistent!\n"})}),"\n",(0,o.jsx)(n.p,{children:"This approach can lead to incompatible UI elements being mixed together, creating visual inconsistencies."}),"\n",(0,o.jsx)(n.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,o.jsx)(n.p,{children:"The Abstract Factory pattern suggests explicitly declaring interfaces for each distinct product of the product family. Then you can make all variants of products follow those interfaces."}),"\n",(0,o.jsx)(n.p,{children:"The next move is to declare the Abstract Factory - an interface with a list of creation methods for all products that are part of the product family. These methods must return abstract product types represented by the interfaces we extracted previously."}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"AbstractFactory (interface)\r\n\u251c\u2500\u2500 createProductA(): AbstractProductA\r\n\u251c\u2500\u2500 createProductB(): AbstractProductB\r\n\u2514\u2500\u2500 createProductC(): AbstractProductC\r\n\r\nConcreteFactory1 implements AbstractFactory\r\n\u251c\u2500\u2500 createProductA(): ProductA1\r\n\u251c\u2500\u2500 createProductB(): ProductB1\r\n\u2514\u2500\u2500 createProductC(): ProductC1\r\n\r\nConcreteFactory2 implements AbstractFactory\r\n\u251c\u2500\u2500 createProductA(): ProductA2\r\n\u251c\u2500\u2500 createProductB(): ProductB2\r\n\u2514\u2500\u2500 createProductC(): ProductC2\r\n\r\nAbstractProductA (interface)\r\n\u2514\u2500\u2500 operationA()\r\n\r\nProductA1 implements AbstractProductA\r\n\u2514\u2500\u2500 operationA()\r\n\r\nProductA2 implements AbstractProductA\r\n\u2514\u2500\u2500 operationA()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-code-example",children:"\ud83d\udcbb Code Example"}),"\n",(0,o.jsx)(n.h3,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Abstract Products\r\nclass Button {\r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n  \r\n  onClick() {\r\n    throw new Error("onClick() method must be implemented");\r\n  }\r\n}\r\n\r\nclass Checkbox {\r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n  \r\n  toggle() {\r\n    throw new Error("toggle() method must be implemented");\r\n  }\r\n}\r\n\r\nclass TextInput {\r\n  render() {\r\n    throw new Error("render() method must be implemented");\r\n  }\r\n  \r\n  setValue(value) {\r\n    throw new Error("setValue() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Products - Windows Family\r\nclass WindowsButton extends Button {\r\n  render() {\r\n    console.log("\ud83d\uddbc\ufe0f Rendering Windows button with native styling");\r\n    return `<button class="windows-btn" style="border: 2px solid #0078d4; background: #0078d4; color: white; padding: 8px 16px;">Windows Button</button>`;\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\ud83d\udcbb Windows button clicked - showing native dialog");\r\n    return "Windows dialog opened";\r\n  }\r\n}\r\n\r\nclass WindowsCheckbox extends Checkbox {\r\n  constructor() {\r\n    super();\r\n    this.checked = false;\r\n  }\r\n  \r\n  render() {\r\n    const checkedState = this.checked ? "\u2611\ufe0f" : "\u2610";\r\n    console.log(`\ud83d\uddbc\ufe0f Rendering Windows checkbox: ${checkedState}`);\r\n    return `<input type="checkbox" class="windows-checkbox" ${this.checked ? \'checked\' : \'\'}> Windows Checkbox`;\r\n  }\r\n  \r\n  toggle() {\r\n    this.checked = !this.checked;\r\n    console.log(`\ud83d\udcbb Windows checkbox toggled: ${this.checked ? "checked" : "unchecked"}`);\r\n    return this.checked;\r\n  }\r\n}\r\n\r\nclass WindowsTextInput extends TextInput {\r\n  constructor() {\r\n    super();\r\n    this.value = "";\r\n  }\r\n  \r\n  render() {\r\n    console.log("\ud83d\uddbc\ufe0f Rendering Windows text input with native styling");\r\n    return `<input type="text" class="windows-input" style="border: 1px solid #ccc; padding: 8px;" value="${this.value}">`;\r\n  }\r\n  \r\n  setValue(value) {\r\n    this.value = value;\r\n    console.log(`\ud83d\udcbb Windows input value set: "${value}"`);\r\n    return this.value;\r\n  }\r\n}\r\n\r\n// Concrete Products - Mac Family\r\nclass MacButton extends Button {\r\n  render() {\r\n    console.log("\ud83c\udf4e Rendering Mac button with native styling");\r\n    return `<button class="mac-btn" style="border: 1px solid #007aff; background: #007aff; color: white; border-radius: 6px; padding: 8px 16px;">Mac Button</button>`;\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\ud83d\uddb1\ufe0f Mac button clicked - showing Mac-style popup");\r\n    return "Mac popup displayed";\r\n  }\r\n}\r\n\r\nclass MacCheckbox extends Checkbox {\r\n  constructor() {\r\n    super();\r\n    this.checked = false;\r\n  }\r\n  \r\n  render() {\r\n    const checkedState = this.checked ? "\u2705" : "\ud83d\udd32";\r\n    console.log(`\ud83c\udf4e Rendering Mac checkbox: ${checkedState}`);\r\n    return `<input type="checkbox" class="mac-checkbox" style="border-radius: 4px;" ${this.checked ? \'checked\' : \'\'}> Mac Checkbox`;\r\n  }\r\n  \r\n  toggle() {\r\n    this.checked = !this.checked;\r\n    console.log(`\ud83d\uddb1\ufe0f Mac checkbox toggled: ${this.checked ? "checked" : "unchecked"}`);\r\n    return this.checked;\r\n  }\r\n}\r\n\r\nclass MacTextInput extends TextInput {\r\n  constructor() {\r\n    super();\r\n    this.value = "";\r\n  }\r\n  \r\n  render() {\r\n    console.log("\ud83c\udf4e Rendering Mac text input with native styling");\r\n    return `<input type="text" class="mac-input" style="border: 1px solid #d1d1d6; border-radius: 6px; padding: 8px;" value="${this.value}">`;\r\n  }\r\n  \r\n  setValue(value) {\r\n    this.value = value;\r\n    console.log(`\ud83d\uddb1\ufe0f Mac input value set: "${value}"`);\r\n    return this.value;\r\n  }\r\n}\r\n\r\n// Concrete Products - Linux Family\r\nclass LinuxButton extends Button {\r\n  render() {\r\n    console.log("\ud83d\udc27 Rendering Linux button with native styling");\r\n    return `<button class="linux-btn" style="border: 1px solid #666; background: #f0f0f0; color: black; padding: 8px 16px;">Linux Button</button>`;\r\n  }\r\n  \r\n  onClick() {\r\n    console.log("\u2328\ufe0f Linux button clicked - executing command");\r\n    return "Linux command executed";\r\n  }\r\n}\r\n\r\nclass LinuxCheckbox extends Checkbox {\r\n  constructor() {\r\n    super();\r\n    this.checked = false;\r\n  }\r\n  \r\n  render() {\r\n    const checkedState = this.checked ? "[x]" : "[ ]";\r\n    console.log(`\ud83d\udc27 Rendering Linux checkbox: ${checkedState}`);\r\n    return `<input type="checkbox" class="linux-checkbox" ${this.checked ? \'checked\' : \'\'}> Linux Checkbox`;\r\n  }\r\n  \r\n  toggle() {\r\n    this.checked = !this.checked;\r\n    console.log(`\u2328\ufe0f Linux checkbox toggled: ${this.checked ? "checked" : "unchecked"}`);\r\n    return this.checked;\r\n  }\r\n}\r\n\r\nclass LinuxTextInput extends TextInput {\r\n  constructor() {\r\n    super();\r\n    this.value = "";\r\n  }\r\n  \r\n  render() {\r\n    console.log("\ud83d\udc27 Rendering Linux text input with native styling");\r\n    return `<input type="text" class="linux-input" style="border: 1px solid #999; padding: 8px;" value="${this.value}">`;\r\n  }\r\n  \r\n  setValue(value) {\r\n    this.value = value;\r\n    console.log(`\u2328\ufe0f Linux input value set: "${value}"`);\r\n    return this.value;\r\n  }\r\n}\r\n\r\n// Abstract Factory\r\nclass UIFactory {\r\n  createButton() {\r\n    throw new Error("createButton() method must be implemented");\r\n  }\r\n  \r\n  createCheckbox() {\r\n    throw new Error("createCheckbox() method must be implemented");\r\n  }\r\n  \r\n  createTextInput() {\r\n    throw new Error("createTextInput() method must be implemented");\r\n  }\r\n}\r\n\r\n// Concrete Factories\r\nclass WindowsUIFactory extends UIFactory {\r\n  createButton() {\r\n    return new WindowsButton();\r\n  }\r\n  \r\n  createCheckbox() {\r\n    return new WindowsCheckbox();\r\n  }\r\n  \r\n  createTextInput() {\r\n    return new WindowsTextInput();\r\n  }\r\n}\r\n\r\nclass MacUIFactory extends UIFactory {\r\n  createButton() {\r\n    return new MacButton();\r\n  }\r\n  \r\n  createCheckbox() {\r\n    return new MacCheckbox();\r\n  }\r\n  \r\n  createTextInput() {\r\n    return new MacTextInput();\r\n  }\r\n}\r\n\r\nclass LinuxUIFactory extends UIFactory {\r\n  createButton() {\r\n    return new LinuxButton();\r\n  }\r\n  \r\n  createCheckbox() {\r\n    return new LinuxCheckbox();\r\n  }\r\n  \r\n  createTextInput() {\r\n    return new LinuxTextInput();\r\n  }\r\n}\r\n\r\n// Client Code\r\nclass Application {\r\n  constructor(factory) {\r\n    this.factory = factory;\r\n    this.components = {};\r\n  }\r\n  \r\n  createUI() {\r\n    console.log("\ud83c\udfa8 Creating UI components...\\n");\r\n    \r\n    this.components.button = this.factory.createButton();\r\n    this.components.checkbox = this.factory.createCheckbox();\r\n    this.components.textInput = this.factory.createTextInput();\r\n    \r\n    return this.components;\r\n  }\r\n  \r\n  renderUI() {\r\n    console.log("\ud83d\uddbc\ufe0f Rendering application UI:\\n");\r\n    \r\n    Object.entries(this.components).forEach(([name, component]) => {\r\n      console.log(`${name.charAt(0).toUpperCase() + name.slice(1)}:`);\r\n      component.render();\r\n      console.log("");\r\n    });\r\n  }\r\n  \r\n  simulateUserInteraction() {\r\n    console.log("\ud83d\udc46 Simulating user interactions:\\n");\r\n    \r\n    // Button interaction\r\n    this.components.button.onClick();\r\n    \r\n    // Checkbox interaction\r\n    this.components.checkbox.toggle();\r\n    this.components.checkbox.toggle();\r\n    \r\n    // Text input interaction\r\n    this.components.textInput.setValue("Hello World!");\r\n    \r\n    console.log("");\r\n  }\r\n}\r\n\r\n// Usage\r\nfunction demonstrateAbstractFactory() {\r\n  console.log("=== Abstract Factory Pattern Demo ===\\n");\r\n  \r\n  const platforms = [\r\n    { name: "Windows", factory: new WindowsUIFactory() },\r\n    { name: "Mac", factory: new MacUIFactory() },\r\n    { name: "Linux", factory: new LinuxUIFactory() }\r\n  ];\r\n  \r\n  platforms.forEach(({ name, factory }) => {\r\n    console.log(`${"=".repeat(20)} ${name} Platform ${"=".repeat(20)}`);\r\n    \r\n    const app = new Application(factory);\r\n    app.createUI();\r\n    app.renderUI();\r\n    app.simulateUserInteraction();\r\n    \r\n    console.log(`${"=".repeat(50 + name.length)}\\n`);\r\n  });\r\n}\r\n\r\ndemonstrateAbstractFactory();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-real-world-examples",children:"\ud83c\udf1f Real-World Examples"}),"\n",(0,o.jsx)(n.h3,{id:"1-database-provider-factory",children:"1. Database Provider Factory"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Abstract Products\r\nclass Connection {\r\n  connect() { throw new Error("Not implemented"); }\r\n  disconnect() { throw new Error("Not implemented"); }\r\n  isConnected() { throw new Error("Not implemented"); }\r\n}\r\n\r\nclass Command {\r\n  constructor(connection) {\r\n    this.connection = connection;\r\n  }\r\n  execute(query) { throw new Error("Not implemented"); }\r\n  executeAsync(query) { throw new Error("Not implemented"); }\r\n}\r\n\r\nclass Transaction {\r\n  constructor(connection) {\r\n    this.connection = connection;\r\n  }\r\n  begin() { throw new Error("Not implemented"); }\r\n  commit() { throw new Error("Not implemented"); }\r\n  rollback() { throw new Error("Not implemented"); }\r\n}\r\n\r\n// MySQL Family\r\nclass MySQLConnection extends Connection {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.connected = false;\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83d\udc2c Connecting to MySQL: ${this.config.host}:${this.config.port || 3306}`);\r\n    this.connected = true;\r\n    return Promise.resolve("MySQL connected");\r\n  }\r\n  \r\n  disconnect() {\r\n    this.connected = false;\r\n    console.log("\ud83d\udc2c MySQL connection closed");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  isConnected() {\r\n    return this.connected;\r\n  }\r\n}\r\n\r\nclass MySQLCommand extends Command {\r\n  execute(query) {\r\n    if (!this.connection.isConnected()) {\r\n      throw new Error("MySQL connection not established");\r\n    }\r\n    console.log(`\ud83d\udcca Executing MySQL query: ${query}`);\r\n    return `MySQL result: ${query}`;\r\n  }\r\n  \r\n  async executeAsync(query) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(this.execute(query));\r\n      }, 100);\r\n    });\r\n  }\r\n}\r\n\r\nclass MySQLTransaction extends Transaction {\r\n  constructor(connection) {\r\n    super(connection);\r\n    this.active = false;\r\n  }\r\n  \r\n  begin() {\r\n    if (!this.connection.isConnected()) {\r\n      throw new Error("MySQL connection not established");\r\n    }\r\n    this.active = true;\r\n    console.log("\ud83d\udd04 MySQL transaction started");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  commit() {\r\n    if (!this.active) throw new Error("No active MySQL transaction");\r\n    this.active = false;\r\n    console.log("\u2705 MySQL transaction committed");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  rollback() {\r\n    if (!this.active) throw new Error("No active MySQL transaction");\r\n    this.active = false;\r\n    console.log("\u21a9\ufe0f MySQL transaction rolled back");\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\n// PostgreSQL Family\r\nclass PostgreSQLConnection extends Connection {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n    this.connected = false;\r\n  }\r\n  \r\n  connect() {\r\n    console.log(`\ud83d\udc18 Connecting to PostgreSQL: ${this.config.host}:${this.config.port || 5432}`);\r\n    this.connected = true;\r\n    return Promise.resolve("PostgreSQL connected");\r\n  }\r\n  \r\n  disconnect() {\r\n    this.connected = false;\r\n    console.log("\ud83d\udc18 PostgreSQL connection closed");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  isConnected() {\r\n    return this.connected;\r\n  }\r\n}\r\n\r\nclass PostgreSQLCommand extends Command {\r\n  execute(query) {\r\n    if (!this.connection.isConnected()) {\r\n      throw new Error("PostgreSQL connection not established");\r\n    }\r\n    console.log(`\ud83d\udcca Executing PostgreSQL query: ${query}`);\r\n    return `PostgreSQL result: ${query}`;\r\n  }\r\n  \r\n  async executeAsync(query) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(this.execute(query));\r\n      }, 150);\r\n    });\r\n  }\r\n}\r\n\r\nclass PostgreSQLTransaction extends Transaction {\r\n  constructor(connection) {\r\n    super(connection);\r\n    this.active = false;\r\n  }\r\n  \r\n  begin() {\r\n    if (!this.connection.isConnected()) {\r\n      throw new Error("PostgreSQL connection not established");\r\n    }\r\n    this.active = true;\r\n    console.log("\ud83d\udd04 PostgreSQL transaction started");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  commit() {\r\n    if (!this.active) throw new Error("No active PostgreSQL transaction");\r\n    this.active = false;\r\n    console.log("\u2705 PostgreSQL transaction committed");\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  rollback() {\r\n    if (!this.active) throw new Error("No active PostgreSQL transaction");\r\n    this.active = false;\r\n    console.log("\u21a9\ufe0f PostgreSQL transaction rolled back");\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\n// Abstract Factory\r\nclass DatabaseFactory {\r\n  createConnection(config) { throw new Error("Not implemented"); }\r\n  createCommand(connection) { throw new Error("Not implemented"); }\r\n  createTransaction(connection) { throw new Error("Not implemented"); }\r\n}\r\n\r\n// Concrete Factories\r\nclass MySQLFactory extends DatabaseFactory {\r\n  createConnection(config) {\r\n    return new MySQLConnection(config);\r\n  }\r\n  \r\n  createCommand(connection) {\r\n    return new MySQLCommand(connection);\r\n  }\r\n  \r\n  createTransaction(connection) {\r\n    return new MySQLTransaction(connection);\r\n  }\r\n}\r\n\r\nclass PostgreSQLFactory extends DatabaseFactory {\r\n  createConnection(config) {\r\n    return new PostgreSQLConnection(config);\r\n  }\r\n  \r\n  createCommand(connection) {\r\n    return new PostgreSQLCommand(connection);\r\n  }\r\n  \r\n  createTransaction(connection) {\r\n    return new PostgreSQLTransaction(connection);\r\n  }\r\n}\r\n\r\n// Database Manager (Client)\r\nclass DatabaseManager {\r\n  constructor(factory, config) {\r\n    this.factory = factory;\r\n    this.config = config;\r\n    this.connection = null;\r\n    this.command = null;\r\n    this.transaction = null;\r\n  }\r\n  \r\n  async initialize() {\r\n    this.connection = this.factory.createConnection(this.config);\r\n    await this.connection.connect();\r\n    \r\n    this.command = this.factory.createCommand(this.connection);\r\n    this.transaction = this.factory.createTransaction(this.connection);\r\n    \r\n    console.log("\u2705 Database manager initialized");\r\n  }\r\n  \r\n  async executeQuery(query) {\r\n    if (!this.command) throw new Error("Database not initialized");\r\n    return await this.command.executeAsync(query);\r\n  }\r\n  \r\n  async executeTransaction(queries) {\r\n    if (!this.transaction) throw new Error("Database not initialized");\r\n    \r\n    try {\r\n      await this.transaction.begin();\r\n      \r\n      const results = [];\r\n      for (const query of queries) {\r\n        const result = await this.executeQuery(query);\r\n        results.push(result);\r\n      }\r\n      \r\n      await this.transaction.commit();\r\n      console.log("\ud83c\udf89 Transaction completed successfully");\r\n      return results;\r\n    } catch (error) {\r\n      await this.transaction.rollback();\r\n      console.error("\u274c Transaction failed:", error.message);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async cleanup() {\r\n    if (this.connection && this.connection.isConnected()) {\r\n      await this.connection.disconnect();\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nasync function demonstrateDatabaseFactory() {\r\n  const config = {\r\n    host: \'localhost\',\r\n    username: \'admin\',\r\n    password: \'password\',\r\n    database: \'testdb\'\r\n  };\r\n  \r\n  const factories = [\r\n    { name: \'MySQL\', factory: new MySQLFactory() },\r\n    { name: \'PostgreSQL\', factory: new PostgreSQLFactory() }\r\n  ];\r\n  \r\n  for (const { name, factory } of factories) {\r\n    console.log(`\\n${"=".repeat(15)} Testing ${name} ${"=".repeat(15)}`);\r\n    \r\n    const dbManager = new DatabaseManager(factory, config);\r\n    \r\n    try {\r\n      await dbManager.initialize();\r\n      \r\n      // Single query\r\n      const result = await dbManager.executeQuery("SELECT * FROM users");\r\n      console.log("\ud83d\udccb Query result:", result);\r\n      \r\n      // Transaction\r\n      const transactionQueries = [\r\n        "UPDATE users SET balance = balance - 100 WHERE id = 1",\r\n        "UPDATE users SET balance = balance + 100 WHERE id = 2",\r\n        "INSERT INTO transactions (from_id, to_id, amount) VALUES (1, 2, 100)"\r\n      ];\r\n      \r\n      await dbManager.executeTransaction(transactionQueries);\r\n      \r\n    } catch (error) {\r\n      console.error(`\u274c ${name} error:`, error.message);\r\n    } finally {\r\n      await dbManager.cleanup();\r\n    }\r\n  }\r\n}\r\n\r\n// Run the database demo\r\ndemonstrateDatabaseFactory();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-theme-factory-for-web-applications",children:"2. Theme Factory for Web Applications"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Abstract Products\r\nclass ColorScheme {\r\n  getPrimaryColor() { throw new Error(\"Not implemented\"); }\r\n  getSecondaryColor() { throw new Error(\"Not implemented\"); }\r\n  getBackgroundColor() { throw new Error(\"Not implemented\"); }\r\n  getTextColor() { throw new Error(\"Not implemented\"); }\r\n  getAccentColor() { throw new Error(\"Not implemented\"); }\r\n}\r\n\r\nclass Typography {\r\n  getHeadingFont() { throw new Error(\"Not implemented\"); }\r\n  getBodyFont() { throw new Error(\"Not implemented\"); }\r\n  getCodeFont() { throw new Error(\"Not implemented\"); }\r\n  getFontSizes() { throw new Error(\"Not implemented\"); }\r\n}\r\n\r\nclass Layout {\r\n  getSpacing() { throw new Error(\"Not implemented\"); }\r\n  getBorderRadius() { throw new Error(\"Not implemented\"); }\r\n  getShadows() { throw new Error(\"Not implemented\"); }\r\n  getBreakpoints() { throw new Error(\"Not implemented\"); }\r\n}\r\n\r\n// Light Theme Family\r\nclass LightColorScheme extends ColorScheme {\r\n  getPrimaryColor() { return '#007bff'; }\r\n  getSecondaryColor() { return '#6c757d'; }\r\n  getBackgroundColor() { return '#ffffff'; }\r\n  getTextColor() { return '#212529'; }\r\n  getAccentColor() { return '#28a745'; }\r\n}\r\n\r\nclass LightTypography extends Typography {\r\n  getHeadingFont() { return \"'Roboto', sans-serif\"; }\r\n  getBodyFont() { return \"'Open Sans', sans-serif\"; }\r\n  getCodeFont() { return \"'Fira Code', monospace\"; }\r\n  getFontSizes() {\r\n    return {\r\n      small: '14px',\r\n      normal: '16px',\r\n      large: '18px',\r\n      xlarge: '24px'\r\n    };\r\n  }\r\n}\r\n\r\nclass LightLayout extends Layout {\r\n  getSpacing() {\r\n    return {\r\n      small: '8px',\r\n      medium: '16px',\r\n      large: '24px',\r\n      xlarge: '32px'\r\n    };\r\n  }\r\n  \r\n  getBorderRadius() { return '4px'; }\r\n  \r\n  getShadows() {\r\n    return {\r\n      small: '0 2px 4px rgba(0,0,0,0.1)',\r\n      medium: '0 4px 8px rgba(0,0,0,0.1)',\r\n      large: '0 8px 16px rgba(0,0,0,0.1)'\r\n    };\r\n  }\r\n  \r\n  getBreakpoints() {\r\n    return {\r\n      mobile: '768px',\r\n      tablet: '1024px',\r\n      desktop: '1200px'\r\n    };\r\n  }\r\n}\r\n\r\n// Dark Theme Family\r\nclass DarkColorScheme extends ColorScheme {\r\n  getPrimaryColor() { return '#0d6efd'; }\r\n  getSecondaryColor() { return '#6c757d'; }\r\n  getBackgroundColor() { return '#121212'; }\r\n  getTextColor() { return '#e9ecef'; }\r\n  getAccentColor() { return '#20c997'; }\r\n}\r\n\r\nclass DarkTypography extends Typography {\r\n  getHeadingFont() { return \"'Roboto', sans-serif\"; }\r\n  getBodyFont() { return \"'Open Sans', sans-serif\"; }\r\n  getCodeFont() { return \"'Fira Code', monospace\"; }\r\n  getFontSizes() {\r\n    return {\r\n      small: '14px',\r\n      normal: '16px',\r\n      large: '18px',\r\n      xlarge: '24px'\r\n    };\r\n  }\r\n}\r\n\r\nclass DarkLayout extends Layout {\r\n  getSpacing() {\r\n    return {\r\n      small: '8px',\r\n      medium: '16px',\r\n      large: '24px',\r\n      xlarge: '32px'\r\n    };\r\n  }\r\n  \r\n  getBorderRadius() { return '6px'; }\r\n  \r\n  getShadows() {\r\n    return {\r\n      small: '0 2px 4px rgba(255,255,255,0.1)',\r\n      medium: '0 4px 8px rgba(255,255,255,0.1)',\r\n      large: '0 8px 16px rgba(255,255,255,0.1)'\r\n    };\r\n  }\r\n  \r\n  getBreakpoints() {\r\n    return {\r\n      mobile: '768px',\r\n      tablet: '1024px',\r\n      desktop: '1200px'\r\n    };\r\n  }\r\n}\r\n\r\n// High Contrast Theme Family\r\nclass HighContrastColorScheme extends ColorScheme {\r\n  getPrimaryColor() { return '#000000'; }\r\n  getSecondaryColor() { return '#666666'; }\r\n  getBackgroundColor() { return '#ffffff'; }\r\n  getTextColor() { return '#000000'; }\r\n  getAccentColor() { return '#ff0000'; }\r\n}\r\n\r\nclass HighContrastTypography extends Typography {\r\n  getHeadingFont() { return \"'Arial', sans-serif\"; }\r\n  getBodyFont() { return \"'Arial', sans-serif\"; }\r\n  getCodeFont() { return \"'Courier New', monospace\"; }\r\n  getFontSizes() {\r\n    return {\r\n      small: '16px',   // Larger for accessibility\r\n      normal: '18px',\r\n      large: '20px',\r\n      xlarge: '28px'\r\n    };\r\n  }\r\n}\r\n\r\nclass HighContrastLayout extends Layout {\r\n  getSpacing() {\r\n    return {\r\n      small: '12px',   // More spacing for accessibility\r\n      medium: '20px',\r\n      large: '28px',\r\n      xlarge: '36px'\r\n    };\r\n  }\r\n  \r\n  getBorderRadius() { return '0px'; }  // No rounded corners for high contrast\r\n  \r\n  getShadows() {\r\n    return {\r\n      small: '2px 2px 0px rgba(0,0,0,1)',\r\n      medium: '4px 4px 0px rgba(0,0,0,1)',\r\n      large: '6px 6px 0px rgba(0,0,0,1)'\r\n    };\r\n  }\r\n  \r\n  getBreakpoints() {\r\n    return {\r\n      mobile: '768px',\r\n      tablet: '1024px',\r\n      desktop: '1200px'\r\n    };\r\n  }\r\n}\r\n\r\n// Abstract Factory\r\nclass ThemeFactory {\r\n  createColorScheme() { throw new Error(\"Not implemented\"); }\r\n  createTypography() { throw new Error(\"Not implemented\"); }\r\n  createLayout() { throw new Error(\"Not implemented\"); }\r\n}\r\n\r\n// Concrete Factories\r\nclass LightThemeFactory extends ThemeFactory {\r\n  createColorScheme() { return new LightColorScheme(); }\r\n  createTypography() { return new LightTypography(); }\r\n  createLayout() { return new LightLayout(); }\r\n}\r\n\r\nclass DarkThemeFactory extends ThemeFactory {\r\n  createColorScheme() { return new DarkColorScheme(); }\r\n  createTypography() { return new DarkTypography(); }\r\n  createLayout() { return new DarkLayout(); }\r\n}\r\n\r\nclass HighContrastThemeFactory extends ThemeFactory {\r\n  createColorScheme() { return new HighContrastColorScheme(); }\r\n  createTypography() { return new HighContrastTypography(); }\r\n  createLayout() { return new HighContrastLayout(); }\r\n}\r\n\r\n// Theme Manager (Client)\r\nclass ThemeManager {\r\n  constructor() {\r\n    this.currentTheme = null;\r\n    this.colorScheme = null;\r\n    this.typography = null;\r\n    this.layout = null;\r\n  }\r\n  \r\n  setTheme(themeFactory) {\r\n    this.currentTheme = themeFactory;\r\n    this.colorScheme = themeFactory.createColorScheme();\r\n    this.typography = themeFactory.createTypography();\r\n    this.layout = themeFactory.createLayout();\r\n    \r\n    console.log(`\ud83c\udfa8 Theme applied: ${themeFactory.constructor.name.replace('ThemeFactory', '')}`);\r\n  }\r\n  \r\n  generateCSS() {\r\n    if (!this.currentTheme) {\r\n      throw new Error(\"No theme set\");\r\n    }\r\n    \r\n    const colors = this.colorScheme;\r\n    const typography = this.typography;\r\n    const layout = this.layout;\r\n    \r\n    const css = `\r\n/* Generated CSS from Theme Factory */\r\n:root {\r\n  /* Colors */\r\n  --primary-color: ${colors.getPrimaryColor()};\r\n  --secondary-color: ${colors.getSecondaryColor()};\r\n  --background-color: ${colors.getBackgroundColor()};\r\n  --text-color: ${colors.getTextColor()};\r\n  --accent-color: ${colors.getAccentColor()};\r\n  \r\n  /* Typography */\r\n  --heading-font: ${typography.getHeadingFont()};\r\n  --body-font: ${typography.getBodyFont()};\r\n  --code-font: ${typography.getCodeFont()};\r\n  --font-size-small: ${typography.getFontSizes().small};\r\n  --font-size-normal: ${typography.getFontSizes().normal};\r\n  --font-size-large: ${typography.getFontSizes().large};\r\n  --font-size-xlarge: ${typography.getFontSizes().xlarge};\r\n  \r\n  /* Layout */\r\n  --spacing-small: ${layout.getSpacing().small};\r\n  --spacing-medium: ${layout.getSpacing().medium};\r\n  --spacing-large: ${layout.getSpacing().large};\r\n  --spacing-xlarge: ${layout.getSpacing().xlarge};\r\n  --border-radius: ${layout.getBorderRadius()};\r\n  --shadow-small: ${layout.getShadows().small};\r\n  --shadow-medium: ${layout.getShadows().medium};\r\n  --shadow-large: ${layout.getShadows().large};\r\n}\r\n\r\nbody {\r\n  font-family: var(--body-font);\r\n  font-size: var(--font-size-normal);\r\n  color: var(--text-color);\r\n  background-color: var(--background-color);\r\n  margin: 0;\r\n  padding: var(--spacing-medium);\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  font-family: var(--heading-font);\r\n  color: var(--primary-color);\r\n}\r\n\r\n.button {\r\n  background-color: var(--primary-color);\r\n  color: var(--background-color);\r\n  border: none;\r\n  border-radius: var(--border-radius);\r\n  padding: var(--spacing-small) var(--spacing-medium);\r\n  font-family: var(--body-font);\r\n  box-shadow: var(--shadow-small);\r\n  cursor: pointer;\r\n}\r\n\r\n.card {\r\n  background-color: var(--background-color);\r\n  border-radius: var(--border-radius);\r\n  padding: var(--spacing-large);\r\n  box-shadow: var(--shadow-medium);\r\n  margin-bottom: var(--spacing-medium);\r\n}\r\n\r\ncode {\r\n  font-family: var(--code-font);\r\n  background-color: var(--secondary-color);\r\n  padding: 2px 4px;\r\n  border-radius: calc(var(--border-radius) / 2);\r\n}\r\n    `;\r\n    \r\n    return css.trim();\r\n  }\r\n  \r\n  getThemeInfo() {\r\n    if (!this.currentTheme) {\r\n      return \"No theme selected\";\r\n    }\r\n    \r\n    return {\r\n      colors: {\r\n        primary: this.colorScheme.getPrimaryColor(),\r\n        secondary: this.colorScheme.getSecondaryColor(),\r\n        background: this.colorScheme.getBackgroundColor(),\r\n        text: this.colorScheme.getTextColor(),\r\n        accent: this.colorScheme.getAccentColor()\r\n      },\r\n      fonts: {\r\n        heading: this.typography.getHeadingFont(),\r\n        body: this.typography.getBodyFont(),\r\n        code: this.typography.getCodeFont(),\r\n        sizes: this.typography.getFontSizes()\r\n      },\r\n      layout: {\r\n        spacing: this.layout.getSpacing(),\r\n        borderRadius: this.layout.getBorderRadius(),\r\n        shadows: this.layout.getShadows(),\r\n        breakpoints: this.layout.getBreakpoints()\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Usage\r\nconst themeManager = new ThemeManager();\r\n\r\nconst themes = [\r\n  { name: 'Light', factory: new LightThemeFactory() },\r\n  { name: 'Dark', factory: new DarkThemeFactory() },\r\n  { name: 'High Contrast', factory: new HighContrastThemeFactory() }\r\n];\r\n\r\nthemes.forEach(({ name, factory }) => {\r\n  console.log(`\\n${\"=\".repeat(15)} ${name} Theme ${\"=\".repeat(15)}`);\r\n  \r\n  themeManager.setTheme(factory);\r\n  \r\n  console.log(\"\ud83d\udccb Theme Info:\");\r\n  console.log(JSON.stringify(themeManager.getThemeInfo(), null, 2));\r\n  \r\n  console.log(\"\\n\ud83c\udfa8 Generated CSS:\");\r\n  console.log(themeManager.generateCSS());\r\n  \r\n  console.log(`\\n${\"=\".repeat(30 + name.length)}`);\r\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistency"}),": Guarantees compatibility between products created by the same factory"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Isolation"}),": Isolates concrete classes from client code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easy Swapping"}),": Makes exchanging product families easy"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product Consistency"}),": Enforces consistency among products"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Open/Closed Principle"}),": Easy to add new variants of products"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complexity"}),": Can be overkill if you only have one product family"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Rigid Structure"}),": Adding new products requires extending all factories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Code Volume"}),": Requires a lot of interfaces and classes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Learning Curve"}),": Can be difficult to understand initially"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product Families"}),": When your system needs to work with multiple families of related products"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistency Requirements"}),": When you need to ensure that products from the same family are used together"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Platform Independence"}),": When you want to configure your system with one of multiple families of products"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Future Extensibility"}),": When you anticipate adding new product families in the future"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-variations",children:"\ud83d\udd04 Variations"}),"\n",(0,o.jsxs)(n.h3,{id:"1-parameterized-abstract-factory",children:["1. ",(0,o.jsx)(n.strong,{children:"Parameterized Abstract Factory"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class ParameterizedFactory {\r\n  createProduct(type, family) {\r\n    const key = `${family}_${type}`;\r\n    const ProductClass = this.productRegistry[key];\r\n    return new ProductClass();\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"2-registry-based-abstract-factory",children:["2. ",(0,o.jsx)(n.strong,{children:"Registry-based Abstract Factory"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class RegistryAbstractFactory {\r\n  constructor() {\r\n    this.factories = new Map();\r\n  }\r\n  \r\n  registerFactory(family, factory) {\r\n    this.factories.set(family, factory);\r\n  }\r\n  \r\n  getFactory(family) {\r\n    return this.factories.get(family);\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"3-singleton-abstract-factory",children:["3. ",(0,o.jsx)(n.strong,{children:"Singleton Abstract Factory"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class SingletonAbstractFactory {\r\n  constructor() {\r\n    if (SingletonAbstractFactory.instance) {\r\n      return SingletonAbstractFactory.instance;\r\n    }\r\n    SingletonAbstractFactory.instance = this;\r\n    this.currentFactory = null;\r\n  }\r\n  \r\n  setFactory(factory) {\r\n    this.currentFactory = factory;\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Factory Method"}),": Abstract Factory is often implemented using Factory Methods"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Singleton"}),": Abstract Factory is often implemented as a Singleton"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Prototype"}),": Can use Prototype to create products instead of Factory Method"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Builder"}),": Can be used together to build complex product families"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/abstract-factory",children:"Abstract Factory Pattern - Refactoring.Guru"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.dofactory.com/javascript/design-patterns/abstract-factory",children:"JavaScript Abstract Factory Pattern"})}),"\n"]})]})}function h(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,o.jsx)(n,{...r,children:(0,o.jsx)(d,{...r})}):d(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>c,x:()=>s});var t=e(6540);const o={},a=t.createContext(o);function c(r){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function s(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:c(r.components),t.createElement(a.Provider,{value:n},r.children)}}}]);