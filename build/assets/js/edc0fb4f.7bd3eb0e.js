"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4619],{8185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"javascript/template-literals","title":"Template Literals [es6]","description":"The template is termed as a certain predefined format and literals are referred to as a value which you don\u2019t want to mutate while displaying or showing. Backtick Operator","source":"@site/docs/javascript/template-literals.md","sourceDirName":"javascript","slug":"/javascript/template-literals","permalink":"/docs/javascript/template-literals","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Symbol","permalink":"/docs/javascript/symbol"},"next":{"title":"\ud83e\uddea JavaScript Testing Mastery Guide","permalink":"/docs/javascript/testing-guide"}}');var a=n(4848),r=n(8453);const s={},i="Template Literals [es6]",l={},c=[];function p(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"template-literals-es6",children:"Template Literals [es6]"})}),"\n",(0,a.jsxs)(t.p,{children:["The template is termed as a certain predefined format and literals are referred to as a value which you don\u2019t want to mutate while displaying or showing. ",(0,a.jsx)(t.strong,{children:"Backtick Operator"}),"\nLet's suppose we want to print table of multiple of 5(print template)"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"for(var i=1;i<=10;i++)\n    console.log('5 X '+ i +' ='+5*i);\n// output\n5 X 1  = 5\n5 X 2  = 10\n5 X 3  = 15\n5 X 4  = 20\n5 X 5  = 25\n5 X 6  = 30\n5 X 7  = 35\n5 X 8  = 40\n5 X 9  = 45\n5 X 10 = 50\n\nWith new approach we can do something like \n\nfor(var i=1;i<=10;i++)\n console.log(`5 X ${i} = ${5*i}`);\n\n\nLet's suppose we want to print multiline output\n    console.log('GM!!! \\n How are you?');\n        OR new approach\n    console.log(`GM!!! How are you?`);\n\n\nLess Code below\nconst domain = 'sony.com';\nconst protocol = 'https';\nconst resource = 'products'\nconst url = `${protocol}://www.${domain}/${resource}`;\nconsole.log(url);\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);