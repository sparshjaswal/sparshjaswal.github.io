"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[3693],{3413:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"javascript/testing-guide","title":"\ud83e\uddea JavaScript Testing Mastery Guide","description":"Comprehensive testing strategies for robust JavaScript applications","source":"@site/docs/javascript/testing-guide.md","sourceDirName":"javascript","slug":"/javascript/testing-guide","permalink":"/docs/javascript/testing-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Template Literals [es6]","permalink":"/docs/javascript/template-literals"},"next":{"title":"Type Casting and Coercion","permalink":"/docs/javascript/type-casting-and-coercion"}}');var s=n(4848),a=n(8453);const i={},c="\ud83e\uddea JavaScript Testing Mastery Guide",o={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"\ud83c\udfaf Testing Fundamentals",id:"-testing-fundamentals",level:2},{value:"Test Structure &amp; Organization",id:"test-structure--organization",level:3},{value:"Custom Matchers &amp; Test Utilities",id:"custom-matchers--test-utilities",level:3},{value:"\ud83d\udd2c Unit Testing Best Practices",id:"-unit-testing-best-practices",level:2},{value:"Testing Pure Functions",id:"testing-pure-functions",level:3},{value:"Testing Classes with Dependencies",id:"testing-classes-with-dependencies",level:3},{value:"\ud83d\udd17 Integration Testing",id:"-integration-testing",level:2},{value:"API Integration Testing",id:"api-integration-testing",level:3},{value:"\ud83c\udfad Mock &amp; Spy Patterns",id:"-mock--spy-patterns",level:2},{value:"Advanced Mocking Strategies",id:"advanced-mocking-strategies",level:3},{value:"Mock Factories &amp; Test Doubles",id:"mock-factories--test-doubles",level:3},{value:"\u23f0 Async Testing",id:"-async-testing",level:2},{value:"Promise Testing Patterns",id:"promise-testing-patterns",level:3},{value:"Timer and Delay Testing",id:"timer-and-delay-testing",level:3},{value:"\ud83d\uddb1\ufe0f Testing DOM &amp; Events",id:"\ufe0f-testing-dom--events",level:2},{value:"DOM Testing with Testing Library",id:"dom-testing-with-testing-library",level:3},{value:"\ud83d\udcca Performance Testing",id:"-performance-testing",level:2},{value:"Performance Benchmarking",id:"performance-benchmarking",level:3},{value:"\ud83c\udfaf Test-Driven Development",id:"-test-driven-development",level:2},{value:"TDD Workflow Example",id:"tdd-workflow-example",level:3},{value:"\ud83d\udcda Testing Best Practices Summary",id:"-testing-best-practices-summary",level:2},{value:"\u2705 Do&#39;s",id:"-dos",level:3},{value:"\u274c Don&#39;ts",id:"-donts",level:3},{value:"\ud83c\udfc6 Advanced Tips",id:"-advanced-tips",level:3}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"-javascript-testing-mastery-guide",children:"\ud83e\uddea JavaScript Testing Mastery Guide"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Comprehensive testing strategies for robust JavaScript applications"})}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#testing-fundamentals",children:"Testing Fundamentals"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#unit-testing-best-practices",children:"Unit Testing Best Practices"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#integration-testing",children:"Integration Testing"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#mock--spy-patterns",children:"Mock & Spy Patterns"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#async-testing",children:"Async Testing"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#testing-dom--events",children:"Testing DOM & Events"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#performance-testing",children:"Performance Testing"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#test-driven-development",children:"Test-Driven Development"})}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-testing-fundamentals",children:"\ud83c\udfaf Testing Fundamentals"}),"\n",(0,s.jsx)(r.h3,{id:"test-structure--organization",children:"Test Structure & Organization"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Good - Descriptive test structure using AAA pattern\r\ndescribe('UserService', () => {\r\n  describe('createUser', () => {\r\n    it('should create a new user with valid data', () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30\r\n      };\r\n      const userService = new UserService();\r\n      \r\n      // Act\r\n      const result = userService.createUser(userData);\r\n      \r\n      // Assert\r\n      expect(result).toMatchObject({\r\n        id: expect.any(String),\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30,\r\n        createdAt: expect.any(Date)\r\n      });\r\n    });\r\n    \r\n    it('should throw error for invalid email format', () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'John Doe',\r\n        email: 'invalid-email',\r\n        age: 30\r\n      };\r\n      const userService = new UserService();\r\n      \r\n      // Act & Assert\r\n      expect(() => userService.createUser(userData))\r\n        .toThrow('Invalid email format');\r\n    });\r\n    \r\n    it('should assign default age when age is not provided', () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'Jane Doe',\r\n        email: 'jane@example.com'\r\n      };\r\n      const userService = new UserService();\r\n      \r\n      // Act\r\n      const result = userService.createUser(userData);\r\n      \r\n      // Assert\r\n      expect(result.age).toBe(18); // Default age\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"custom-matchers--test-utilities",children:"Custom Matchers & Test Utilities"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Custom matchers for better assertions\r\nconst customMatchers = {\r\n  toBeValidEmail(received) {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const pass = emailRegex.test(received);\r\n    \r\n    return {\r\n      message: () => \r\n        `Expected ${received} ${pass ? 'not ' : ''}to be a valid email`,\r\n      pass\r\n    };\r\n  },\r\n  \r\n  toBeWithinRange(received, min, max) {\r\n    const pass = received >= min && received <= max;\r\n    \r\n    return {\r\n      message: () =>\r\n        `Expected ${received} ${pass ? 'not ' : ''}to be within range ${min}-${max}`,\r\n      pass\r\n    };\r\n  },\r\n  \r\n  toHaveBeenCalledWithValidUser(received) {\r\n    if (received.mock.calls.length === 0) {\r\n      return {\r\n        message: () => 'Expected function to have been called',\r\n        pass: false\r\n      };\r\n    }\r\n    \r\n    const lastCall = received.mock.calls[received.mock.calls.length - 1];\r\n    const user = lastCall[0];\r\n    \r\n    const isValid = user && \r\n      typeof user.name === 'string' &&\r\n      typeof user.email === 'string' &&\r\n      user.email.includes('@');\r\n    \r\n    return {\r\n      message: () => \r\n        `Expected function to have been called with valid user object`,\r\n      pass: isValid\r\n    };\r\n  }\r\n};\r\n\r\n// Extend Jest matchers\r\nexpect.extend(customMatchers);\r\n\r\n// \u2705 Test utilities and fixtures\r\nclass TestDataBuilder {\r\n  constructor() {\r\n    this.data = {};\r\n  }\r\n  \r\n  static user() {\r\n    return new TestDataBuilder().withValidUser();\r\n  }\r\n  \r\n  withValidUser() {\r\n    this.data = {\r\n      name: 'Test User',\r\n      email: 'test@example.com',\r\n      age: 25,\r\n      isActive: true\r\n    };\r\n    return this;\r\n  }\r\n  \r\n  withName(name) {\r\n    this.data.name = name;\r\n    return this;\r\n  }\r\n  \r\n  withEmail(email) {\r\n    this.data.email = email;\r\n    return this;\r\n  }\r\n  \r\n  withAge(age) {\r\n    this.data.age = age;\r\n    return this;\r\n  }\r\n  \r\n  withInvalidEmail() {\r\n    this.data.email = 'invalid-email';\r\n    return this;\r\n  }\r\n  \r\n  build() {\r\n    return { ...this.data };\r\n  }\r\n}\r\n\r\n// Usage\r\nconst validUser = TestDataBuilder.user().build();\r\nconst invalidUser = TestDataBuilder.user().withInvalidEmail().build();\r\nconst youngUser = TestDataBuilder.user().withAge(16).build();\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-unit-testing-best-practices",children:"\ud83d\udd2c Unit Testing Best Practices"}),"\n",(0,s.jsx)(r.h3,{id:"testing-pure-functions",children:"Testing Pure Functions"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Pure function testing - Easy and reliable\r\ndescribe('Pure Functions', () => {\r\n  describe('calculateDiscount', () => {\r\n    const calculateDiscount = (price, discountPercent) => {\r\n      if (price < 0) throw new Error('Price cannot be negative');\r\n      if (discountPercent < 0 || discountPercent > 100) {\r\n        throw new Error('Discount percent must be between 0 and 100');\r\n      }\r\n      return price * (discountPercent / 100);\r\n    };\r\n    \r\n    it.each([\r\n      [100, 10, 10],\r\n      [200, 25, 50],\r\n      [50, 0, 0],\r\n      [1000, 100, 1000]\r\n    ])('should calculate %d with %d%% discount as %d', (price, discount, expected) => {\r\n      expect(calculateDiscount(price, discount)).toBe(expected);\r\n    });\r\n    \r\n    it('should throw error for negative price', () => {\r\n      expect(() => calculateDiscount(-100, 10))\r\n        .toThrow('Price cannot be negative');\r\n    });\r\n    \r\n    it.each([\r\n      [-5, 'Discount percent must be between 0 and 100'],\r\n      [101, 'Discount percent must be between 0 and 100']\r\n    ])('should throw error for invalid discount %d', (discount, expectedMessage) => {\r\n      expect(() => calculateDiscount(100, discount))\r\n        .toThrow(expectedMessage);\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"testing-classes-with-dependencies",children:"Testing Classes with Dependencies"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Testing classes with proper dependency injection\r\nclass UserService {\r\n  constructor(userRepository, emailService, logger) {\r\n    this.userRepository = userRepository;\r\n    this.emailService = emailService;\r\n    this.logger = logger;\r\n  }\r\n  \r\n  async createUser(userData) {\r\n    this.logger.info('Creating user', { email: userData.email });\r\n    \r\n    // Validate\r\n    if (!userData.email.includes('@')) {\r\n      throw new Error('Invalid email format');\r\n    }\r\n    \r\n    // Check if user exists\r\n    const existingUser = await this.userRepository.findByEmail(userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User already exists');\r\n    }\r\n    \r\n    // Create user\r\n    const user = {\r\n      id: this.generateId(),\r\n      ...userData,\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    await this.userRepository.save(user);\r\n    await this.emailService.sendWelcomeEmail(user);\r\n    \r\n    this.logger.info('User created successfully', { userId: user.id });\r\n    \r\n    return user;\r\n  }\r\n  \r\n  generateId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n}\r\n\r\ndescribe('UserService', () => {\r\n  let userService;\r\n  let mockUserRepository;\r\n  let mockEmailService;\r\n  let mockLogger;\r\n  \r\n  beforeEach(() => {\r\n    mockUserRepository = {\r\n      findByEmail: jest.fn(),\r\n      save: jest.fn()\r\n    };\r\n    \r\n    mockEmailService = {\r\n      sendWelcomeEmail: jest.fn()\r\n    };\r\n    \r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      error: jest.fn()\r\n    };\r\n    \r\n    userService = new UserService(\r\n      mockUserRepository,\r\n      mockEmailService,\r\n      mockLogger\r\n    );\r\n  });\r\n  \r\n  describe('createUser', () => {\r\n    const validUserData = {\r\n      name: 'John Doe',\r\n      email: 'john@example.com',\r\n      age: 30\r\n    };\r\n    \r\n    it('should create user successfully with valid data', async () => {\r\n      // Arrange\r\n      mockUserRepository.findByEmail.mockResolvedValue(null);\r\n      mockUserRepository.save.mockResolvedValue();\r\n      mockEmailService.sendWelcomeEmail.mockResolvedValue();\r\n      \r\n      // Act\r\n      const result = await userService.createUser(validUserData);\r\n      \r\n      // Assert\r\n      expect(result).toMatchObject({\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30,\r\n        id: expect.any(String),\r\n        createdAt: expect.any(Date)\r\n      });\r\n      \r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith('john@example.com');\r\n      expect(mockUserRepository.save).toHaveBeenCalledWith(result);\r\n      expect(mockEmailService.sendWelcomeEmail).toHaveBeenCalledWith(result);\r\n      expect(mockLogger.info).toHaveBeenCalledTimes(2);\r\n    });\r\n    \r\n    it('should throw error when user already exists', async () => {\r\n      // Arrange\r\n      mockUserRepository.findByEmail.mockResolvedValue({ id: '123' });\r\n      \r\n      // Act & Assert\r\n      await expect(userService.createUser(validUserData))\r\n        .rejects.toThrow('User already exists');\r\n      \r\n      expect(mockUserRepository.save).not.toHaveBeenCalled();\r\n      expect(mockEmailService.sendWelcomeEmail).not.toHaveBeenCalled();\r\n    });\r\n    \r\n    it('should handle email service failure gracefully', async () => {\r\n      // Arrange\r\n      mockUserRepository.findByEmail.mockResolvedValue(null);\r\n      mockUserRepository.save.mockResolvedValue();\r\n      mockEmailService.sendWelcomeEmail.mockRejectedValue(\r\n        new Error('Email service unavailable')\r\n      );\r\n      \r\n      // Act & Assert\r\n      await expect(userService.createUser(validUserData))\r\n        .rejects.toThrow('Email service unavailable');\r\n      \r\n      // User should still be saved even if email fails\r\n      expect(mockUserRepository.save).toHaveBeenCalled();\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-integration-testing",children:"\ud83d\udd17 Integration Testing"}),"\n",(0,s.jsx)(r.h3,{id:"api-integration-testing",children:"API Integration Testing"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 API integration tests with proper setup/teardown\r\ndescribe('User API Integration', () => {\r\n  let server;\r\n  let testDb;\r\n  \r\n  beforeAll(async () => {\r\n    // Setup test database\r\n    testDb = await createTestDatabase();\r\n    server = await startTestServer({ database: testDb });\r\n  });\r\n  \r\n  afterAll(async () => {\r\n    await server.close();\r\n    await testDb.close();\r\n  });\r\n  \r\n  beforeEach(async () => {\r\n    // Clean database before each test\r\n    await testDb.collection('users').deleteMany({});\r\n  });\r\n  \r\n  describe('POST /api/users', () => {\r\n    it('should create user and return 201 with user data', async () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30\r\n      };\r\n      \r\n      // Act\r\n      const response = await request(server)\r\n        .post('/api/users')\r\n        .send(userData)\r\n        .expect(201);\r\n      \r\n      // Assert\r\n      expect(response.body).toMatchObject({\r\n        id: expect.any(String),\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30,\r\n        createdAt: expect.any(String)\r\n      });\r\n      \r\n      // Verify in database\r\n      const userInDb = await testDb.collection('users')\r\n        .findOne({ email: 'john@example.com' });\r\n      expect(userInDb).toBeTruthy();\r\n      expect(userInDb.name).toBe('John Doe');\r\n    });\r\n    \r\n    it('should return 409 for duplicate email', async () => {\r\n      // Arrange - Create existing user\r\n      await testDb.collection('users').insertOne({\r\n        name: 'Existing User',\r\n        email: 'john@example.com',\r\n        createdAt: new Date()\r\n      });\r\n      \r\n      const userData = {\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30\r\n      };\r\n      \r\n      // Act & Assert\r\n      await request(server)\r\n        .post('/api/users')\r\n        .send(userData)\r\n        .expect(409)\r\n        .expect(response => {\r\n          expect(response.body.error).toBe('User already exists');\r\n        });\r\n    });\r\n    \r\n    it('should validate required fields', async () => {\r\n      const testCases = [\r\n        { data: { name: 'John' }, expectedError: 'Email is required' },\r\n        { data: { email: 'john@example.com' }, expectedError: 'Name is required' },\r\n        { data: { name: '', email: 'john@example.com' }, expectedError: 'Name cannot be empty' }\r\n      ];\r\n      \r\n      for (const testCase of testCases) {\r\n        await request(server)\r\n          .post('/api/users')\r\n          .send(testCase.data)\r\n          .expect(400)\r\n          .expect(response => {\r\n            expect(response.body.error).toContain(testCase.expectedError);\r\n          });\r\n      }\r\n    });\r\n  });\r\n  \r\n  describe('GET /api/users/:id', () => {\r\n    it('should return user by id', async () => {\r\n      // Arrange\r\n      const user = {\r\n        _id: new ObjectId(),\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30,\r\n        createdAt: new Date()\r\n      };\r\n      await testDb.collection('users').insertOne(user);\r\n      \r\n      // Act\r\n      const response = await request(server)\r\n        .get(`/api/users/${user._id}`)\r\n        .expect(200);\r\n      \r\n      // Assert\r\n      expect(response.body).toMatchObject({\r\n        id: user._id.toString(),\r\n        name: 'John Doe',\r\n        email: 'john@example.com',\r\n        age: 30\r\n      });\r\n    });\r\n    \r\n    it('should return 404 for non-existent user', async () => {\r\n      const nonExistentId = new ObjectId();\r\n      \r\n      await request(server)\r\n        .get(`/api/users/${nonExistentId}`)\r\n        .expect(404)\r\n        .expect(response => {\r\n          expect(response.body.error).toBe('User not found');\r\n        });\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-mock--spy-patterns",children:"\ud83c\udfad Mock & Spy Patterns"}),"\n",(0,s.jsx)(r.h3,{id:"advanced-mocking-strategies",children:"Advanced Mocking Strategies"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Mock external dependencies effectively\r\ndescribe('Advanced Mocking Examples', () => {\r\n  describe('WeatherService', () => {\r\n    let weatherService;\r\n    let mockHttpClient;\r\n    let mockCache;\r\n    \r\n    beforeEach(() => {\r\n      mockHttpClient = {\r\n        get: jest.fn()\r\n      };\r\n      \r\n      mockCache = {\r\n        get: jest.fn(),\r\n        set: jest.fn(),\r\n        has: jest.fn()\r\n      };\r\n      \r\n      weatherService = new WeatherService(mockHttpClient, mockCache);\r\n    });\r\n    \r\n    it('should return cached weather data when available', async () => {\r\n      // Arrange\r\n      const cachedWeather = { temperature: 25, humidity: 60 };\r\n      mockCache.has.mockReturnValue(true);\r\n      mockCache.get.mockReturnValue(cachedWeather);\r\n      \r\n      // Act\r\n      const result = await weatherService.getWeather('London');\r\n      \r\n      // Assert\r\n      expect(result).toEqual(cachedWeather);\r\n      expect(mockCache.has).toHaveBeenCalledWith('weather:London');\r\n      expect(mockCache.get).toHaveBeenCalledWith('weather:London');\r\n      expect(mockHttpClient.get).not.toHaveBeenCalled();\r\n    });\r\n    \r\n    it('should fetch and cache weather data when not cached', async () => {\r\n      // Arrange\r\n      const apiResponse = {\r\n        main: { temp: 22, humidity: 65 },\r\n        weather: [{ main: 'Sunny' }]\r\n      };\r\n      const expectedResult = { temperature: 22, humidity: 65, condition: 'Sunny' };\r\n      \r\n      mockCache.has.mockReturnValue(false);\r\n      mockHttpClient.get.mockResolvedValue({ data: apiResponse });\r\n      \r\n      // Act\r\n      const result = await weatherService.getWeather('Paris');\r\n      \r\n      // Assert\r\n      expect(result).toEqual(expectedResult);\r\n      expect(mockHttpClient.get).toHaveBeenCalledWith(\r\n        'https://api.weather.com/weather?q=Paris'\r\n      );\r\n      expect(mockCache.set).toHaveBeenCalledWith(\r\n        'weather:Paris',\r\n        expectedResult,\r\n        300 // 5 minutes TTL\r\n      );\r\n    });\r\n    \r\n    it('should handle API errors gracefully', async () => {\r\n      // Arrange\r\n      mockCache.has.mockReturnValue(false);\r\n      mockHttpClient.get.mockRejectedValue(new Error('API unavailable'));\r\n      \r\n      // Act & Assert\r\n      await expect(weatherService.getWeather('InvalidCity'))\r\n        .rejects.toThrow('Weather service unavailable');\r\n      \r\n      expect(mockCache.set).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n  \r\n  // \u2705 Spy on existing methods\r\n  describe('UserNotificationService', () => {\r\n    let notificationService;\r\n    let originalSendEmail;\r\n    \r\n    beforeEach(() => {\r\n      notificationService = new UserNotificationService();\r\n      originalSendEmail = notificationService.sendEmail;\r\n      notificationService.sendEmail = jest.fn();\r\n    });\r\n    \r\n    afterEach(() => {\r\n      notificationService.sendEmail = originalSendEmail;\r\n    });\r\n    \r\n    it('should send welcome email to new users', async () => {\r\n      // Arrange\r\n      const user = { id: '123', email: 'test@example.com', name: 'Test User' };\r\n      notificationService.sendEmail.mockResolvedValue({ messageId: 'abc123' });\r\n      \r\n      // Act\r\n      await notificationService.sendWelcomeNotification(user);\r\n      \r\n      // Assert\r\n      expect(notificationService.sendEmail).toHaveBeenCalledWith({\r\n        to: 'test@example.com',\r\n        subject: 'Welcome to our platform!',\r\n        template: 'welcome',\r\n        data: { userName: 'Test User' }\r\n      });\r\n    });\r\n    \r\n    it('should retry email sending on failure', async () => {\r\n      // Arrange\r\n      const user = { id: '123', email: 'test@example.com', name: 'Test User' };\r\n      \r\n      notificationService.sendEmail\r\n        .mockRejectedValueOnce(new Error('Temporary failure'))\r\n        .mockRejectedValueOnce(new Error('Temporary failure'))\r\n        .mockResolvedValue({ messageId: 'abc123' });\r\n      \r\n      // Act\r\n      const result = await notificationService.sendWelcomeNotification(user);\r\n      \r\n      // Assert\r\n      expect(notificationService.sendEmail).toHaveBeenCalledTimes(3);\r\n      expect(result).toEqual({ messageId: 'abc123' });\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"mock-factories--test-doubles",children:"Mock Factories & Test Doubles"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Reusable mock factories\r\nconst createMockDatabase = () => ({\r\n  users: new Map(),\r\n  \r\n  findUser: jest.fn().mockImplementation(function(id) {\r\n    return Promise.resolve(this.users.get(id) || null);\r\n  }),\r\n  \r\n  saveUser: jest.fn().mockImplementation(function(user) {\r\n    this.users.set(user.id, user);\r\n    return Promise.resolve(user);\r\n  }),\r\n  \r\n  deleteUser: jest.fn().mockImplementation(function(id) {\r\n    const deleted = this.users.delete(id);\r\n    return Promise.resolve(deleted);\r\n  }),\r\n  \r\n  // Add test data\r\n  seedData: function(users) {\r\n    users.forEach(user => this.users.set(user.id, user));\r\n  },\r\n  \r\n  // Reset for tests\r\n  reset: function() {\r\n    this.users.clear();\r\n    jest.clearAllMocks();\r\n  }\r\n});\r\n\r\nconst createMockLogger = () => ({\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn(),\r\n  \r\n  // Helper to check if error was logged\r\n  hasErrorBeenLogged: function(message) {\r\n    return this.error.mock.calls.some(call => \r\n      call[0].includes(message)\r\n    );\r\n  }\r\n});\r\n\r\n// \u2705 Test-specific stubs\r\nconst createStubApiClient = (responses = {}) => {\r\n  const defaultResponses = {\r\n    '/users': { data: [] },\r\n    '/posts': { data: [] }\r\n  };\r\n  \r\n  const allResponses = { ...defaultResponses, ...responses };\r\n  \r\n  return {\r\n    get: jest.fn().mockImplementation((url) => {\r\n      const response = allResponses[url];\r\n      if (response) {\r\n        return Promise.resolve(response);\r\n      }\r\n      return Promise.reject(new Error(`No mock response for ${url}`));\r\n    }),\r\n    \r\n    post: jest.fn().mockResolvedValue({ success: true }),\r\n    put: jest.fn().mockResolvedValue({ success: true }),\r\n    delete: jest.fn().mockResolvedValue({ success: true })\r\n  };\r\n};\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-async-testing",children:"\u23f0 Async Testing"}),"\n",(0,s.jsx)(r.h3,{id:"promise-testing-patterns",children:"Promise Testing Patterns"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Comprehensive async testing\r\ndescribe('Async Operations', () => {\r\n  describe('DataService', () => {\r\n    let dataService;\r\n    let mockApi;\r\n    \r\n    beforeEach(() => {\r\n      mockApi = createStubApiClient();\r\n      dataService = new DataService(mockApi);\r\n    });\r\n    \r\n    it('should handle successful async operations', async () => {\r\n      // Arrange\r\n      const expectedData = [{ id: 1, name: 'Test' }];\r\n      mockApi.get.mockResolvedValue({ data: expectedData });\r\n      \r\n      // Act\r\n      const result = await dataService.fetchUsers();\r\n      \r\n      // Assert\r\n      expect(result).toEqual(expectedData);\r\n      expect(mockApi.get).toHaveBeenCalledWith('/users');\r\n    });\r\n    \r\n    it('should handle async errors properly', async () => {\r\n      // Arrange\r\n      const apiError = new Error('Network error');\r\n      mockApi.get.mockRejectedValue(apiError);\r\n      \r\n      // Act & Assert\r\n      await expect(dataService.fetchUsers()).rejects.toThrow('Network error');\r\n    });\r\n    \r\n    it('should handle timeout scenarios', async () => {\r\n      // Arrange\r\n      mockApi.get.mockImplementation(() => \r\n        new Promise(resolve => setTimeout(resolve, 6000))\r\n      );\r\n      \r\n      // Act & Assert\r\n      await expect(dataService.fetchUsersWithTimeout(5000))\r\n        .rejects.toThrow('Request timeout');\r\n    }, 10000); // Extend test timeout\r\n    \r\n    it('should handle concurrent requests', async () => {\r\n      // Arrange\r\n      const responses = [\r\n        { data: [{ id: 1 }] },\r\n        { data: [{ id: 2 }] },\r\n        { data: [{ id: 3 }] }\r\n      ];\r\n      \r\n      mockApi.get\r\n        .mockResolvedValueOnce(responses[0])\r\n        .mockResolvedValueOnce(responses[1])\r\n        .mockResolvedValueOnce(responses[2]);\r\n      \r\n      // Act\r\n      const promises = [\r\n        dataService.fetchUser(1),\r\n        dataService.fetchUser(2),\r\n        dataService.fetchUser(3)\r\n      ];\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      // Assert\r\n      expect(results).toHaveLength(3);\r\n      expect(mockApi.get).toHaveBeenCalledTimes(3);\r\n    });\r\n  });\r\n  \r\n  // \u2705 Testing async generators\r\n  describe('AsyncDataStream', () => {\r\n    it('should process async generator correctly', async () => {\r\n      // Arrange\r\n      const mockDataSource = {\r\n        * getData() {\r\n          yield Promise.resolve({ id: 1, data: 'first' });\r\n          yield Promise.resolve({ id: 2, data: 'second' });\r\n          yield Promise.resolve({ id: 3, data: 'third' });\r\n        }\r\n      };\r\n      \r\n      const stream = new AsyncDataStream(mockDataSource);\r\n      const results = [];\r\n      \r\n      // Act\r\n      for await (const item of stream.process()) {\r\n        results.push(item);\r\n      }\r\n      \r\n      // Assert\r\n      expect(results).toEqual([\r\n        { id: 1, data: 'first', processed: true },\r\n        { id: 2, data: 'second', processed: true },\r\n        { id: 3, data: 'third', processed: true }\r\n      ]);\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"timer-and-delay-testing",children:"Timer and Delay Testing"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Testing code with timers\r\ndescribe('Timer-based functionality', () => {\r\n  beforeEach(() => {\r\n    jest.useFakeTimers();\r\n  });\r\n  \r\n  afterEach(() => {\r\n    jest.useRealTimers();\r\n  });\r\n  \r\n  it('should debounce function calls', () => {\r\n    // Arrange\r\n    const mockFn = jest.fn();\r\n    const debouncedFn = debounce(mockFn, 300);\r\n    \r\n    // Act\r\n    debouncedFn('call1');\r\n    debouncedFn('call2');\r\n    debouncedFn('call3');\r\n    \r\n    // Fast-forward time\r\n    jest.advanceTimersByTime(299);\r\n    expect(mockFn).not.toHaveBeenCalled();\r\n    \r\n    jest.advanceTimersByTime(1);\r\n    \r\n    // Assert\r\n    expect(mockFn).toHaveBeenCalledTimes(1);\r\n    expect(mockFn).toHaveBeenCalledWith('call3');\r\n  });\r\n  \r\n  it('should handle intervals correctly', () => {\r\n    // Arrange\r\n    const callback = jest.fn();\r\n    const ticker = new Ticker(callback, 1000);\r\n    \r\n    // Act\r\n    ticker.start();\r\n    \r\n    // Assert\r\n    expect(callback).not.toHaveBeenCalled();\r\n    \r\n    jest.advanceTimersByTime(1000);\r\n    expect(callback).toHaveBeenCalledTimes(1);\r\n    \r\n    jest.advanceTimersByTime(2000);\r\n    expect(callback).toHaveBeenCalledTimes(3);\r\n    \r\n    ticker.stop();\r\n    jest.advanceTimersByTime(1000);\r\n    expect(callback).toHaveBeenCalledTimes(3); // Should not increase\r\n  });\r\n  \r\n  it('should test retry logic with exponential backoff', async () => {\r\n    // Arrange\r\n    const mockFn = jest.fn()\r\n      .mockRejectedValueOnce(new Error('Fail 1'))\r\n      .mockRejectedValueOnce(new Error('Fail 2'))\r\n      .mockResolvedValue('Success');\r\n    \r\n    const retryPromise = retryWithBackoff(mockFn, 3, 100);\r\n    \r\n    // Act & Assert\r\n    const promise = expect(retryPromise).resolves.toBe('Success');\r\n    \r\n    // Advance through retries\r\n    await jest.advanceTimersByTimeAsync(100); // First retry\r\n    await jest.advanceTimersByTimeAsync(200); // Second retry\r\n    \r\n    await promise;\r\n    expect(mockFn).toHaveBeenCalledTimes(3);\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"\ufe0f-testing-dom--events",children:"\ud83d\uddb1\ufe0f Testing DOM & Events"}),"\n",(0,s.jsx)(r.h3,{id:"dom-testing-with-testing-library",children:"DOM Testing with Testing Library"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 DOM interaction testing\r\nimport { screen, fireEvent, waitFor } from '@testing-library/dom';\r\nimport '@testing-library/jest-dom';\r\n\r\ndescribe('User Interface Components', () => {\r\n  let container;\r\n  \r\n  beforeEach(() => {\r\n    container = document.createElement('div');\r\n    document.body.appendChild(container);\r\n  });\r\n  \r\n  afterEach(() => {\r\n    document.body.removeChild(container);\r\n  });\r\n  \r\n  describe('SearchComponent', () => {\r\n    it('should perform search when user types and waits', async () => {\r\n      // Arrange\r\n      const mockSearchFn = jest.fn().mockResolvedValue([\r\n        { id: 1, name: 'John Doe' },\r\n        { id: 2, name: 'Jane Smith' }\r\n      ]);\r\n      \r\n      const searchComponent = new SearchComponent(container, {\r\n        onSearch: mockSearchFn,\r\n        debounceMs: 300\r\n      });\r\n      \r\n      searchComponent.render();\r\n      \r\n      const searchInput = screen.getByPlaceholderText('Search users...');\r\n      \r\n      // Act\r\n      fireEvent.change(searchInput, { target: { value: 'john' } });\r\n      \r\n      // Assert - debounced, so shouldn't call immediately\r\n      expect(mockSearchFn).not.toHaveBeenCalled();\r\n      \r\n      // Wait for debounce\r\n      await waitFor(() => {\r\n        expect(mockSearchFn).toHaveBeenCalledWith('john');\r\n      });\r\n      \r\n      // Check results are displayed\r\n      await waitFor(() => {\r\n        expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n        expect(screen.getByText('Jane Smith')).toBeInTheDocument();\r\n      });\r\n    });\r\n    \r\n    it('should handle empty search results', async () => {\r\n      // Arrange\r\n      const mockSearchFn = jest.fn().mockResolvedValue([]);\r\n      const searchComponent = new SearchComponent(container, {\r\n        onSearch: mockSearchFn\r\n      });\r\n      \r\n      searchComponent.render();\r\n      \r\n      // Act\r\n      const searchInput = screen.getByPlaceholderText('Search users...');\r\n      fireEvent.change(searchInput, { target: { value: 'nonexistent' } });\r\n      \r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(screen.getByText('No results found')).toBeInTheDocument();\r\n      });\r\n    });\r\n    \r\n    it('should handle search errors', async () => {\r\n      // Arrange\r\n      const mockSearchFn = jest.fn().mockRejectedValue(new Error('Search failed'));\r\n      const searchComponent = new SearchComponent(container, {\r\n        onSearch: mockSearchFn\r\n      });\r\n      \r\n      searchComponent.render();\r\n      \r\n      // Act\r\n      const searchInput = screen.getByPlaceholderText('Search users...');\r\n      fireEvent.change(searchInput, { target: { value: 'error' } });\r\n      \r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Search failed. Please try again.')).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n  \r\n  describe('Modal Component', () => {\r\n    it('should open and close modal correctly', () => {\r\n      // Arrange\r\n      const modal = new Modal(container);\r\n      modal.render();\r\n      \r\n      const openButton = screen.getByText('Open Modal');\r\n      \r\n      // Act - Open modal\r\n      fireEvent.click(openButton);\r\n      \r\n      // Assert\r\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\r\n      expect(document.body).toHaveClass('modal-open');\r\n      \r\n      // Act - Close modal\r\n      const closeButton = screen.getByLabelText('Close modal');\r\n      fireEvent.click(closeButton);\r\n      \r\n      // Assert\r\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\r\n      expect(document.body).not.toHaveClass('modal-open');\r\n    });\r\n    \r\n    it('should close modal when clicking overlay', () => {\r\n      // Arrange\r\n      const modal = new Modal(container);\r\n      modal.render();\r\n      modal.open();\r\n      \r\n      // Act\r\n      const overlay = screen.getByTestId('modal-overlay');\r\n      fireEvent.click(overlay);\r\n      \r\n      // Assert\r\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\r\n    });\r\n    \r\n    it('should handle keyboard navigation', () => {\r\n      // Arrange\r\n      const modal = new Modal(container);\r\n      modal.render();\r\n      modal.open();\r\n      \r\n      // Act - Press Escape\r\n      fireEvent.keyDown(document, { key: 'Escape' });\r\n      \r\n      // Assert\r\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-performance-testing",children:"\ud83d\udcca Performance Testing"}),"\n",(0,s.jsx)(r.h3,{id:"performance-benchmarking",children:"Performance Benchmarking"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 Performance testing utilities\r\nclass PerformanceTester {\r\n  static async benchmark(name, fn, iterations = 1000) {\r\n    const measurements = [];\r\n    \r\n    // Warm up\r\n    for (let i = 0; i < 10; i++) {\r\n      await fn();\r\n    }\r\n    \r\n    // Actual measurements\r\n    for (let i = 0; i < iterations; i++) {\r\n      const start = performance.now();\r\n      await fn();\r\n      const end = performance.now();\r\n      measurements.push(end - start);\r\n    }\r\n    \r\n    const average = measurements.reduce((a, b) => a + b) / measurements.length;\r\n    const min = Math.min(...measurements);\r\n    const max = Math.max(...measurements);\r\n    const p95 = measurements.sort((a, b) => a - b)[Math.floor(measurements.length * 0.95)];\r\n    \r\n    return {\r\n      name,\r\n      iterations,\r\n      average: Number(average.toFixed(3)),\r\n      min: Number(min.toFixed(3)),\r\n      max: Number(max.toFixed(3)),\r\n      p95: Number(p95.toFixed(3))\r\n    };\r\n  }\r\n  \r\n  static async compareImplementations(name, implementations, iterations = 1000) {\r\n    const results = [];\r\n    \r\n    for (const [implName, impl] of Object.entries(implementations)) {\r\n      const result = await this.benchmark(`${name} - ${implName}`, impl, iterations);\r\n      results.push(result);\r\n    }\r\n    \r\n    // Sort by average performance\r\n    results.sort((a, b) => a.average - b.average);\r\n    \r\n    console.table(results);\r\n    return results;\r\n  }\r\n}\r\n\r\n// Usage in tests\r\ndescribe('Performance Tests', () => {\r\n  it('should benchmark array operations', async () => {\r\n    const largeArray = Array.from({ length: 10000 }, (_, i) => i);\r\n    \r\n    const implementations = {\r\n      'for-loop': () => {\r\n        let sum = 0;\r\n        for (let i = 0; i < largeArray.length; i++) {\r\n          sum += largeArray[i];\r\n        }\r\n        return sum;\r\n      },\r\n      \r\n      'reduce': () => {\r\n        return largeArray.reduce((sum, num) => sum + num, 0);\r\n      },\r\n      \r\n      'forEach': () => {\r\n        let sum = 0;\r\n        largeArray.forEach(num => sum += num);\r\n        return sum;\r\n      }\r\n    };\r\n    \r\n    const results = await PerformanceTester.compareImplementations(\r\n      'Array Sum',\r\n      implementations,\r\n      100\r\n    );\r\n    \r\n    // Assert performance characteristics\r\n    const fastest = results[0];\r\n    const slowest = results[results.length - 1];\r\n    \r\n    expect(fastest.average).toBeLessThan(slowest.average);\r\n    expect(fastest.average).toBeLessThan(10); // Should be under 10ms\r\n  });\r\n  \r\n  it('should detect memory leaks', () => {\r\n    const initialMemory = performance.memory?.usedJSHeapSize || 0;\r\n    \r\n    // Create and destroy many objects\r\n    for (let i = 0; i < 10000; i++) {\r\n      const obj = {\r\n        data: new Array(1000).fill(Math.random()),\r\n        nested: {\r\n          moreData: new Array(100).fill('test')\r\n        }\r\n      };\r\n      // Force object to be used\r\n      obj.toString();\r\n    }\r\n    \r\n    // Force garbage collection if available\r\n    if (global.gc) {\r\n      global.gc();\r\n    }\r\n    \r\n    const finalMemory = performance.memory?.usedJSHeapSize || 0;\r\n    const memoryIncrease = finalMemory - initialMemory;\r\n    \r\n    // Memory increase should be reasonable\r\n    expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // Less than 50MB\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-test-driven-development",children:"\ud83c\udfaf Test-Driven Development"}),"\n",(0,s.jsx)(r.h3,{id:"tdd-workflow-example",children:"TDD Workflow Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// \u2705 TDD Example: Shopping Cart Implementation\r\n\r\n// Step 1: Write failing test\r\ndescribe('ShoppingCart', () => {\r\n  describe('addItem', () => {\r\n    it('should add item to empty cart', () => {\r\n      // Arrange\r\n      const cart = new ShoppingCart();\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      \r\n      // Act\r\n      cart.addItem(item);\r\n      \r\n      // Assert\r\n      expect(cart.getItems()).toHaveLength(1);\r\n      expect(cart.getItems()[0]).toEqual({ ...item, quantity: 1 });\r\n    });\r\n  });\r\n});\r\n\r\n// Step 2: Make test pass with minimal implementation\r\nclass ShoppingCart {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n  \r\n  addItem(item) {\r\n    this.items.push({ ...item, quantity: 1 });\r\n  }\r\n  \r\n  getItems() {\r\n    return this.items;\r\n  }\r\n}\r\n\r\n// Step 3: Add more tests\r\ndescribe('ShoppingCart', () => {\r\n  let cart;\r\n  \r\n  beforeEach(() => {\r\n    cart = new ShoppingCart();\r\n  });\r\n  \r\n  describe('addItem', () => {\r\n    it('should add item to empty cart', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      cart.addItem(item);\r\n      \r\n      expect(cart.getItems()).toHaveLength(1);\r\n      expect(cart.getItems()[0]).toEqual({ ...item, quantity: 1 });\r\n    });\r\n    \r\n    it('should increase quantity when adding existing item', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      \r\n      cart.addItem(item);\r\n      cart.addItem(item);\r\n      \r\n      expect(cart.getItems()).toHaveLength(1);\r\n      expect(cart.getItems()[0].quantity).toBe(2);\r\n    });\r\n    \r\n    it('should add different items separately', () => {\r\n      const apple = { id: '1', name: 'Apple', price: 1.50 };\r\n      const banana = { id: '2', name: 'Banana', price: 0.75 };\r\n      \r\n      cart.addItem(apple);\r\n      cart.addItem(banana);\r\n      \r\n      expect(cart.getItems()).toHaveLength(2);\r\n    });\r\n  });\r\n  \r\n  describe('getTotalPrice', () => {\r\n    it('should return 0 for empty cart', () => {\r\n      expect(cart.getTotalPrice()).toBe(0);\r\n    });\r\n    \r\n    it('should calculate total for single item', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      cart.addItem(item);\r\n      \r\n      expect(cart.getTotalPrice()).toBe(1.50);\r\n    });\r\n    \r\n    it('should calculate total for multiple quantities', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      cart.addItem(item);\r\n      cart.addItem(item);\r\n      cart.addItem(item);\r\n      \r\n      expect(cart.getTotalPrice()).toBe(4.50);\r\n    });\r\n    \r\n    it('should calculate total for multiple different items', () => {\r\n      const apple = { id: '1', name: 'Apple', price: 1.50 };\r\n      const banana = { id: '2', name: 'Banana', price: 0.75 };\r\n      \r\n      cart.addItem(apple); // 1.50\r\n      cart.addItem(banana); // 0.75\r\n      cart.addItem(banana); // 0.75\r\n      \r\n      expect(cart.getTotalPrice()).toBe(3.00);\r\n    });\r\n  });\r\n  \r\n  describe('removeItem', () => {\r\n    it('should remove item completely when quantity is 1', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      cart.addItem(item);\r\n      \r\n      cart.removeItem('1');\r\n      \r\n      expect(cart.getItems()).toHaveLength(0);\r\n    });\r\n    \r\n    it('should decrease quantity when removing from multiple quantities', () => {\r\n      const item = { id: '1', name: 'Apple', price: 1.50 };\r\n      cart.addItem(item);\r\n      cart.addItem(item);\r\n      cart.addItem(item);\r\n      \r\n      cart.removeItem('1');\r\n      \r\n      expect(cart.getItems()).toHaveLength(1);\r\n      expect(cart.getItems()[0].quantity).toBe(2);\r\n    });\r\n    \r\n    it('should throw error when removing non-existent item', () => {\r\n      expect(() => cart.removeItem('999'))\r\n        .toThrow('Item not found in cart');\r\n    });\r\n  });\r\n});\r\n\r\n// Step 4: Refactor implementation to pass all tests\r\nclass ShoppingCart {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n  \r\n  addItem(item) {\r\n    const existingItem = this.items.find(cartItem => cartItem.id === item.id);\r\n    \r\n    if (existingItem) {\r\n      existingItem.quantity += 1;\r\n    } else {\r\n      this.items.push({ ...item, quantity: 1 });\r\n    }\r\n  }\r\n  \r\n  removeItem(itemId) {\r\n    const itemIndex = this.items.findIndex(item => item.id === itemId);\r\n    \r\n    if (itemIndex === -1) {\r\n      throw new Error('Item not found in cart');\r\n    }\r\n    \r\n    const item = this.items[itemIndex];\r\n    \r\n    if (item.quantity > 1) {\r\n      item.quantity -= 1;\r\n    } else {\r\n      this.items.splice(itemIndex, 1);\r\n    }\r\n  }\r\n  \r\n  getItems() {\r\n    return [...this.items]; // Return copy to prevent external mutation\r\n  }\r\n  \r\n  getTotalPrice() {\r\n    return this.items.reduce((total, item) => {\r\n      return total + (item.price * item.quantity);\r\n    }, 0);\r\n  }\r\n  \r\n  clear() {\r\n    this.items = [];\r\n  }\r\n  \r\n  getItemCount() {\r\n    return this.items.reduce((count, item) => count + item.quantity, 0);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-testing-best-practices-summary",children:"\ud83d\udcda Testing Best Practices Summary"}),"\n",(0,s.jsx)(r.h3,{id:"-dos",children:"\u2705 Do's"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Write descriptive test names that explain the scenario"}),"\n",(0,s.jsx)(r.li,{children:"Use the AAA pattern (Arrange, Act, Assert)"}),"\n",(0,s.jsx)(r.li,{children:"Test behavior, not implementation details"}),"\n",(0,s.jsx)(r.li,{children:"Keep tests independent and isolated"}),"\n",(0,s.jsx)(r.li,{children:"Use test doubles (mocks, stubs, spies) appropriately"}),"\n",(0,s.jsx)(r.li,{children:"Test edge cases and error conditions"}),"\n",(0,s.jsx)(r.li,{children:"Write tests first in TDD approach"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"-donts",children:"\u274c Don'ts"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Don't test private methods directly"}),"\n",(0,s.jsx)(r.li,{children:"Don't make tests dependent on each other"}),"\n",(0,s.jsx)(r.li,{children:"Don't ignore flaky tests"}),"\n",(0,s.jsx)(r.li,{children:"Don't mock everything (prefer real objects when possible)"}),"\n",(0,s.jsx)(r.li,{children:"Don't write overly complex test setup"}),"\n",(0,s.jsx)(r.li,{children:"Don't forget to test async operations properly"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"-advanced-tips",children:"\ud83c\udfc6 Advanced Tips"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Use test coverage as a guide, not a goal"}),"\n",(0,s.jsx)(r.li,{children:"Consider mutation testing for test quality"}),"\n",(0,s.jsx)(r.li,{children:"Implement visual regression testing for UI"}),"\n",(0,s.jsx)(r.li,{children:"Use property-based testing for complex logic"}),"\n",(0,s.jsx)(r.li,{children:"Monitor test performance and optimize slow tests"}),"\n",(0,s.jsx)(r.li,{children:"Keep test code as clean as production code"}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Remember"}),": Good tests are your safety net. They should give you confidence to refactor, catch regressions early, and serve as living documentation of your code's behavior."]}),"\n"]})]})}function m(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var t=n(6540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);