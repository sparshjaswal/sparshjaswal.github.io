"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[4176],{1774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"javascript/object-composition","title":"Object Composition in JavaScript","description":"Object composition is a powerful way to build complex objects by combining smaller, focused objects or behaviors. It\'s often preferred over inheritance for its flexibility and reduced coupling.","source":"@site/docs/javascript/object-composition.md","sourceDirName":"javascript","slug":"/javascript/object-composition","permalink":"/docs/javascript/object-composition","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Modular JavaScript [ ES 6 ]","permalink":"/docs/javascript/modular-javascript"},"next":{"title":"OPERATORS & OPERANDS","permalink":"/docs/javascript/operators-and-operands"}}');var r=t(4848),o=t(8453);const a={},i="Object Composition in JavaScript",c={},l=[{value:"Understanding Object Composition",id:"understanding-object-composition",level:2},{value:"Types of Relationships",id:"types-of-relationships",level:2},{value:"1. IS-A Relationship (Inheritance)",id:"1-is-a-relationship-inheritance",level:3},{value:"Implementing Composition",id:"implementing-composition",level:2},{value:"1. Basic Composition with Factory Functions",id:"1-basic-composition-with-factory-functions",level:3},{value:"2. Module Pattern with Private State",id:"2-module-pattern-with-private-state",level:3},{value:"Best Practices for Object Composition",id:"best-practices-for-object-composition",level:2},{value:"1. Favor Composition Over Inheritance",id:"1-favor-composition-over-inheritance",level:3},{value:"2. Keep Objects Small and Focused",id:"2-keep-objects-small-and-focused",level:3},{value:"Advanced Composition Patterns",id:"advanced-composition-patterns",level:2},{value:"1. Method Chaining",id:"1-method-chaining",level:3},{value:"2. Event Emitter Pattern",id:"2-event-emitter-pattern",level:3},{value:"Benefits of Object Composition",id:"benefits-of-object-composition",level:2},{value:"When to Use Object Composition",id:"when-to-use-object-composition",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"In Javascript, Objects can be created using below listed ways:-",id:"in-javascript-objects-can-be-created-using-below-listed-ways-",level:2},{value:"Some Rules for defining Keys and values:-",id:"some-rules-for-defining-keys-and-values-",level:2},{value:"Keys &amp; Value",id:"keys--value",level:2},{value:"SET &amp; GET properties of  Object",id:"set--get-properties-of--object",level:2},{value:"Let&#39;s take an example to understand prototype chaining",id:"lets-take-an-example-to-understand-prototype-chaining",level:2},{value:"Create an objects like Car, Truck and Bus for company Ford and with common rawMaterial",id:"create-an-objects-like-car-truck-and-bus-for-company-ford-and-with-common-rawmaterial",level:3},{value:"Let&#39;s understand by taking an example to understand prototype",id:"lets-understand-by-taking-an-example-to-understand-prototype",level:2},{value:"Create objects like Car, Truck and Bus for company Ford with common rawMaterial",id:"create-objects-like-car-truck-and-bus-for-company-ford-with-common-rawmaterial",level:3},{value:"<strong>What are the benefits?</strong>",id:"what-are-the-benefits",level:3},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction to Objects",id:"introduction-to-objects",level:2},{value:"Why Objects?",id:"why-objects",level:3},{value:"Object-Oriented Programming Principles",id:"object-oriented-programming-principles",level:3},{value:"Creating Objects",id:"creating-objects",level:2},{value:"1. Object Literals (Most Common)",id:"1-object-literals-most-common",level:3},{value:"2. Constructor Function",id:"2-constructor-function",level:3},{value:"3. Object.create()",id:"3-objectcreate",level:3},{value:"4. Factory Function",id:"4-factory-function",level:3},{value:"Object Properties and Methods",id:"object-properties-and-methods",level:2},{value:"Property Access",id:"property-access",level:3},{value:"Property Descriptors",id:"property-descriptors",level:3},{value:"Getters and Setters",id:"getters-and-setters",level:3},{value:"Static Methods",id:"static-methods",level:3},{value:"Object-Oriented Programming Concepts",id:"object-oriented-programming-concepts",level:2},{value:"The <code>this</code> Keyword",id:"the-this-keyword",level:3},{value:"Private Properties (Modern Approach)",id:"private-properties-modern-approach",level:3},{value:"Prototypes and Prototype Chain",id:"prototypes-and-prototype-chain",level:2},{value:"Understanding Prototypes",id:"understanding-prototypes",level:3},{value:"Prototype Chain",id:"prototype-chain",level:3},{value:"Classes (ES6+)",id:"classes-es6",level:2},{value:"Basic Class Syntax",id:"basic-class-syntax",level:3},{value:"Class Inheritance",id:"class-inheritance",level:3},{value:"Inheritance",id:"inheritance-2",level:2},{value:"Classical Inheritance (ES5 Style)",id:"classical-inheritance-es5-style",level:3},{value:"Modern Inheritance (ES6 Classes)",id:"modern-inheritance-es6-classes",level:3},{value:"Object Composition",id:"object-composition",level:2},{value:"IS-A vs HAS-A Relationships",id:"is-a-vs-has-a-relationships",level:3},{value:"IS-A Relationship (Inheritance)",id:"is-a-relationship-inheritance",level:4},{value:"HAS-A Relationship (Composition)",id:"has-a-relationship-composition",level:4},{value:"Composition over Inheritance",id:"composition-over-inheritance",level:3},{value:"Advanced Object Concepts",id:"advanced-object-concepts",level:2},{value:"Object Destructuring",id:"object-destructuring",level:3},{value:"Object Spread and Rest",id:"object-spread-and-rest",level:3},{value:"Object Methods and Utilities",id:"object-methods-and-utilities",level:3},{value:"Traversing Object Properties",id:"traversing-object-properties",level:3},{value:"Deleting Properties",id:"deleting-properties-1",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Meaningful Names",id:"1-use-meaningful-names",level:3},{value:"2. Prefer Composition over Inheritance",id:"2-prefer-composition-over-inheritance",level:3},{value:"3. Use Object.freeze() for Immutable Objects",id:"3-use-objectfreeze-for-immutable-objects",level:3},{value:"4. Validate Constructor Parameters",id:"4-validate-constructor-parameters",level:3},{value:"5. Use Getters/Setters for Computed Properties",id:"5-use-getterssetters-for-computed-properties",level:3},{value:"6. Implement toString() and valueOf() Methods",id:"6-implement-tostring-and-valueof-methods",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"object-composition-in-javascript",children:"Object Composition in JavaScript"})}),"\n",(0,r.jsx)(n.p,{children:"Object composition is a powerful way to build complex objects by combining smaller, focused objects or behaviors. It's often preferred over inheritance for its flexibility and reduced coupling."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-object-composition",children:"Understanding Object Composition"}),"\n",(0,r.jsx)(n.p,{children:'Object composition is about building complex objects by combining simpler ones, following the principle "composition over inheritance". This approach allows for:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More flexible code structures"}),"\n",(0,r.jsx)(n.li,{children:"Better code reuse"}),"\n",(0,r.jsx)(n.li,{children:"Reduced coupling between components"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"types-of-relationships",children:"Types of Relationships"}),"\n",(0,r.jsx)(n.h3,{id:"1-is-a-relationship-inheritance",children:"1. IS-A Relationship (Inheritance)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Person {\n    constructor(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n\nclass Employee extends Person {\n    constructor(empId, firstName, lastName, salary) {\n        super(firstName, lastName);\n        this.empId = empId;\n        this.salary = salary;\n    }\n}\n\nconst emp = new Employee(13, "Sparsh", "Jaswal", 50000);\n\n### 2. HAS-A Relationship (Composition)\n```javascript\nclass Product {\n    constructor(id, name) {\n        this.id = id;\n        this.name = name;\n    }\n}\n\nclass Order {\n    constructor(id, product) {\n        this.id = id;\n        this.product = product; // Has-A relationship\n    }\n    \n    getOrderDetails() {\n        return `Order ${this.id}: ${this.product.name}`;\n    }\n}\n\n// Composition in action with dependency injection\nconst product = new Product(1, \'Levis-Pant\');\nconst order = new Order(\'ORD-001\', product);\nconsole.log(order.getOrderDetails()); // "Order ORD-001: Levis-Pant"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"implementing-composition",children:"Implementing Composition"}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-composition-with-factory-functions",children:"1. Basic Composition with Factory Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Creating behavior objects\nconst hasName = (name) => ({\n    getName: () => name,\n    setName: (newName) => name = newName\n});\n\nconst hasAge = (age) => ({\n    getAge: () => age,\n    setAge: (newAge) => age = newAge\n});\n\n// Composing objects\nconst createPerson = (name, age) => {\n    return {\n        ...hasName(name),\n        ...hasAge(age)\n    };\n};\n\nconst person = createPerson("Sparsh", 25);\nconsole.log(person.getName()); // "Sparsh"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-module-pattern-with-private-state",children:"2. Module Pattern with Private State"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const createBankAccount = (initialBalance) => {\n    let balance = initialBalance; // Private state\n    \n    return {\n        deposit(amount) {\n            if (amount > 0) {\n                balance += amount;\n                return true;\n            }\n            return false;\n        },\n        \n        withdraw(amount) {\n            if (amount <= balance) {\n                balance -= amount;\n                return true;\n            }\n            return false;\n        },\n        \n        getBalance() {\n            return balance;\n        }\n    };\n};\n\nconst account = createBankAccount(100);\nconsole.log(account.getBalance()); // 100\naccount.deposit(50);\nconsole.log(account.getBalance()); // 150\nconsole.log(account.balance); // undefined (private)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const ObjectInstance = new Object();\nconsole.log(ObjectInstance.__proto__);\n// {constructor: \u0192, __defineGetter__: \u0192, __defineSetter__: \u0192, hasOwnProperty: \u0192, __lookupGetter__: \u0192, \u2026}\nconsole.log(ObjectInstance.__proto__.__proto__);\n// null\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-for-object-composition",children:"Best Practices for Object Composition"}),"\n",(0,r.jsx)(n.h3,{id:"1-favor-composition-over-inheritance",children:"1. Favor Composition Over Inheritance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Instead of inheritance hierarchy\nconst canSwim = (state) => ({\n    swim: () => console.log(`${state.name} is swimming`)\n});\n\nconst canFly = (state) => ({\n    fly: () => console.log(`${state.name} is flying`)\n});\n\nconst createDuck = (name) => {\n    const state = { name };\n    return {\n        ...canSwim(state),\n        ...canFly(state)\n    };\n};\n\nconst duck = createDuck("Donald");\nduck.swim(); // "Donald is swimming"\nduck.fly();  // "Donald is flying"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-keep-objects-small-and-focused",children:"2. Keep Objects Small and Focused"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Small, focused behaviors\nconst hasLogger = (prefix) => ({\n    log: (msg) => console.log(`${prefix}: ${msg}`)\n});\n\nconst hasTimestamp = () => ({\n    getTimestamp: () => new Date().toISOString()\n});\n\n// Compose them together\nconst createLogger = (prefix) => ({\n    ...hasLogger(prefix),\n    ...hasTimestamp()\n});\n\nconst logger = createLogger("APP");\nlogger.log(logger.getTimestamp()); // "APP: 2025-10-25T..."\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-composition-patterns",children:"Advanced Composition Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-method-chaining",children:"1. Method Chaining"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const createCalculator = () => {\n    let value = 0;\n    \n    return {\n        add(n) {\n            value += n;\n            return this;\n        },\n        subtract(n) {\n            value -= n;\n            return this;\n        },\n        multiply(n) {\n            value *= n;\n            return this;\n        },\n        getValue() {\n            return value;\n        }\n    };\n};\n\nconst calc = createCalculator();\nconsole.log(\n    calc.add(5)\n        .multiply(2)\n        .subtract(3)\n        .getValue() // 7\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-event-emitter-pattern",children:"2. Event Emitter Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const createEventEmitter = () => {\n    const events = new Map();\n    \n    return {\n        on(event, callback) {\n            if (!events.has(event)) {\n                events.set(event, []);\n            }\n            events.get(event).push(callback);\n            return this;\n        },\n        \n        emit(event, data) {\n            if (events.has(event)) {\n                events.get(event).forEach(cb => cb(data));\n            }\n            return this;\n        }\n    };\n};\n\nconst emitter = createEventEmitter();\nemitter\n    .on('data', console.log)\n    .emit('data', 'Hello World');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"benefits-of-object-composition",children:"Benefits of Object Composition"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibility"}),": Easy to add or remove behaviors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintainability"}),": Simpler to modify individual components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusability"}),": Behaviors can be shared across different objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": Easier to test individual components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Loose Coupling"}),": Objects are less dependent on each other"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use-object-composition",children:"When to Use Object Composition"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You need flexible object creation"}),"\n",(0,r.jsx)(n.li,{children:"Objects share behavior but aren't hierarchical"}),"\n",(0,r.jsx)(n.li,{children:"You want to avoid deep inheritance chains"}),"\n",(0,r.jsx)(n.li,{children:"You need to combine multiple behaviors"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Avoid When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You have a clear is-a relationship"}),"\n",(0,r.jsx)(n.li,{children:"You need tight coupling between objects"}),"\n",(0,r.jsx)(n.li,{children:"You're working with simple, single-purpose objects"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects",children:"MDN Web Docs - Object-oriented JavaScript"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://javascript.info/mixins",children:"JavaScript Info - Object composition"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/composition-vs-inheritance.html",children:"Composition vs Inheritance"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"How can I reuse/borrow the function print name?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const student = {\n    name : "sparsh",\n       printDetail : function (registrationNo,age) {\n           console.log("Name: "+this.name );\n           console.log("Registration Number: "+registrationNo );\n        console.log("Age: "+age );\n       }\n};\nstudent.printDetail(10,28);\n// give output Name: sparsh    Roll No: 10\n\nconst student2 = {\n       name: \'jaswal\'\n}\nlet student2Func = student.printDetail.bind(student2,11);\nstudent2Func(40);\nstudent2Func(40,20);\nstudent.printDetail.call(student2,12,32)\nstudent.printDetail.apply(student,[22,41])\n\n\nconst array = [1,2,3];\nfunction getMaxNumber(arr){\n    return Math.max.apply(null, arr);  \n}\ngetMaxNumber(array)\n'})}),"\n",(0,r.jsx)(n.h1,{id:"class-es6",children:"Class [es6]"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:' class companyItem {\n    constructor(productName) {\n        this.rawMaterial = "Iron";\n        this.company = "Tata";\n        this.productName = productName;\n    }\n}\n\nconst indianGoogleEmployee = new companyItem(\'jeep\');\n'})}),"\n",(0,r.jsx)(n.h1,{id:"inheritance",children:(0,r.jsx)(n.strong,{children:"Inheritance"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'class Employee {\n    constructor(name,age) {\n        this.name = name;\n        this.age = age;\n    }\n    getInfo(){\n        console.log(this.name,this.age);\n    }\n}\n\nclass GoogleEmployee extends Employee {\n    constructor(){\n        super("sparsh jaswal",25);\n    }\n}\nconst indianGoogleEmployee = new GoogleEmployee();\nconsole.log(indianGoogleEmployee.getInfo());\n'})}),"\n",(0,r.jsx)(n.h1,{id:"static",children:"Static"}),"\n",(0,r.jsx)(n.p,{children:"Static\u200c \u200cmembers\u200c \u200care\u200c \u200caccessed\u200c \u200cdirectly\u200c \u200cthrough\u200c \u200cthe\u200c \u200cclass\u200c \u200cname,\u200c \u200cnot\u200c \u200cthrough\u200c \u200c\nthe\u200c \u200cinstance.\u200c \u200c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'class Hotel {\n    static welcome(){\n        console.log("this is a static member function");\n    }\n}\nconsole.log(Hotel.welcome());\n// this is a static member function\nconst hotel = new Hotel();\nconsole.log(hotel.welcome());\n// error\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class Square {\n    static sqrt(n) {\n        if(n!==undefined)\n            return n*n;\n    }\n}\nclass DoubleSquare extends Square {\n    static doubleSqrt(n) {\n        if(n!== undefined)\n            return 2*super.sqrt(n);\n    }\n}\nconsole.log(Square.sqrt(5));\n// 25\nconst square = new Square();\nconsole.log(square.sqrt(5));\n// Uncaught TypeError TypeError: square.sqrt is not a function\nconsole.log(DoubleSquare.sqrt(5));\n// 25\nconsole.log(DoubleSquare.doubleSqrt(5));\n// 50\nconst doubleSQUARE = new DoubleSquare();\nconsole.log(doubleSQUARE.sqrt(5));\n// TypeError TypeError: doubleSQUARE.sqrt is not a function\nconsole.log(doubleSQUARE.doubleSqrt(5));\n// Uncaught ReferenceError ReferenceError: doubleSQUARE is not defined\n*some\u200c \u200cuse-case\u200c \u200cof\u200c \u200cwriting\u200c \u200cjavascript\u200c \u200c \u200c\n"})}),"\n",(0,r.jsx)(n.p,{children:"Introduced\u200c \u200cin\u200c \u200cES5,\u200c \u200cSetter\u200c \u200cand\u200c \u200cGetter\u200c \u200clet\u200c \u200cyou\u200c \u200cdefine\u200c \u200cthe\u200c \u200cobject\u200c \u200caccessor.\u200c \u200c\nThis\u200c \u200cObject\u200c \u200caccessor\u200c \u200cacts\u200c \u200cas\u200c \u200cproperty\u200c \u200cor\u200c \u200cmethods\u200c \u200cin\u200c \u200cjavaScript.\u200c \u200c\nSetter\u200c \u200cand\u200c \u200cGetter's\u200c \u200csyntax\u200c \u200cis\u200c \u200cway\u200c \u200ctoo\u200c \u200cstandardizing\u200c \u200cthe\u200c \u200cproperty\u200c \u200cof\u200c \u200can\u200c \u200c\nobject.\u200c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let\u200c\u200c \u200c\u200cuser\u200c\u200c \u200c=\u200c \u200c{\u200c \u200c\n \u200c\u200cname:\u200c\u200c \u200c\u200c"John"\u200c,\u200c \u200c\n \u200c\u200csurname:\u200c\u200c \u200c\u200c"Smith"\u200c,\u200c \u200c\n \u200c\u200cget\u200c\u200c \u200c\u200cfullName\u200c()\u200c \u200c{\u200c \u200c\n \u200c\u200creturn\u200c\u200c \u200c\u200c`\u200c${this\u200c.\u200cname\u200c}\u200c\u200c \u200c\u200c${this\u200c.\u200csurname\u200c}\u200c`\u200c;\u200c \u200c\n \u200c},\u200c \u200c\n \u200c\u200cset\u200c\u200c \u200c\u200cfullName\u200c(\u200cvalue\u200c)\u200c \u200c{\u200c \u200c\n \u200c[\u200cthis\u200c.\u200cname\u200c,\u200c \u200c\u200cthis\u200c.\u200csurname\u200c]\u200c \u200c=\u200c \u200c\u200cvalue\u200c.\u200csplit\u200c(\u200c"\u200c \u200c"\u200c);\u200c \u200c\n \u200c}\u200c \u200c\n};\u200c \u200c\n'})}),"\n",(0,r.jsx)(n.h1,{id:"chapter--creating-object",children:"CHAPTER | Creating Object"}),"\n",(0,r.jsx)(n.h2,{id:"in-javascript-objects-can-be-created-using-below-listed-ways-",children:"In Javascript, Objects can be created using below listed ways:-"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Using an Object constructor and new Operator"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javaScript",children:"var Student = new Object();\nStudent.name = 'Sparsh Jaswal';\nStudent.dob = '25/07/1991';\n\nfunction Student(name,dob){\n    this.name=name;\n    this.dob=dob;\n}\nvar student = new Student('sparsh','25/07/1991');\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Object Literals (",(0,r.jsx)(n.em,{children:"comma-separated list of name-value pairs wrapped in curly braces"}),")"]})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var Student = {\n  name: "Sparsh Jaswal",\n  age: 28,\n  detail: function () {\n    console.log(this.name + "\\n" + this.age);\n  },\n};\n\n// Some Supported Syntax\nlet name = \'sparsh\';\nlet age = 31;\nlet address = "lives";\nlet obj = {\n  name:\'jaswal\',\n  age,\n  [address]:"delhi",\n  "welcome"() {\n    console.log(`\n      name: ${this.name}\n      lives: ${this.lives}\n      age: ${this.age}\n    `);\n  }\n};\nconsole.log(obj);\nconsole.log(obj[address]);\nobj.welcome();\n\n/* Output\n{name: \'jaswal\', age: 31, lives: \'delhi\', welcome:\u0192}\ndelhi\n      name: jaswal\n      lives: delhi\n      age: 31\n*/\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Trailing comma following the last property in an object literal is ignored but in older browsers or IE considers them an error."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Class (ES 6) defines the blueprint of an object But it's syntactically sugar work similar to traditional object creations"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Student {\n    constructor(name,age) {\n        this.name = name;\n        this.age = age;\n    }\n    this.print = function(){\n        console.log(this.name+"\\n"+this.age)\n    }\n}\nconst Student2 = new Student("Sparsh","25");\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"We can define everything inside the constructor function but then it won\u2019t be shared across all inherited objects and will redefine each time a new instance is created. Anything outside the constructor is a part of the prototype which will be shared across all the instances."})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Runtime-augmented scope[todo]"}),"\n",(0,r.jsx)(n.h1,{id:"deleting-properties",children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"Deleting Properties"})})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"Delete operator removes a property from an object."})})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:'delete Student.age; delete Student["Full-Name"]'})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"delete"})," operators don't operate on value of the property but on property itself."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"delete"})," operator only deletes its own properties, not inherited ones."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"delete"})," evaluates to true in below cases :-"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"delete succeeded"}),"\n",(0,r.jsx)(n.li,{children:"delete had no effect"}),"\n",(0,r.jsx)(n.li,{children:"deleting non-existent property"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"inheritance-1",children:"Inheritance"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Inheritance is one of the principles of OOP.ES6 introduces the class & extends keyword which is like the classical inheritance. Overloading is not supported in JavaScript."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Student {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  printDetail() {\n    console.log(this.name + " " + this.age);\n  }\n}\nclass Sport extends Student {\n  constructor(game, name, age) {\n    super(name, age);\n    this.playingGame = game;\n  }\n  printDetail() {\n    console.log(this.playingGame, this.name, this.age);\n  }\n}\nvar student = new Student("sparsh", 28);\nvar sport = new Sport("football", "sparsh", 28);\nsport.printDetail();\nstudent.printDetail();\nconsole.log(sport); // can se link between Student & Sport\nconsole.log(student); //can see link between Student and Object\n'})}),"\n",(0,r.jsx)(n.p,{children:"Class field proposal is in stage 4 in we can create class private property or methods using # sign. Also, we can use weak-map to make it private."}),"\n",(0,r.jsx)(n.p,{children:"Object.create ( ES 5 )\nObject.create accepts only Object or null as an argument.\nWhen null is passed"}),"\n",(0,r.jsx)(n.p,{children:"An empty object is returned.\nWhen Object is passed(can be object identifier )\nAn empty object is returned with a link to the passed object.This link ensures :-\nAll linked/chained object properties are directly accessible by the returned object but linked property is not a part of the returned object.\nAny change in linked/chained objects will automatically be reflected back."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var student = Object.create({\n  name: "sparsh",\n  age: 26,\n  print() {\n    console.log(this.name + "\\n" + this.age);\n  },\n});\nvar student2 = Object.create(student);\nconsole.log(student2.name, student2.age, student2.print);\n'})}),"\n",(0,r.jsx)(n.h1,{id:"defining-or-assigning-object-keys-and-value--",children:"Defining or assigning object keys and value :-"}),"\n",(0,r.jsx)(n.h2,{id:"some-rules-for-defining-keys-and-values-",children:"Some Rules for defining Keys and values:-"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A property name is a javaScript identifier or a string literal(",(0,r.jsx)(n.em,{children:"the empty string is allowed"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Property value is any JavaScript expression. The value of the expression (",(0,r.jsx)(n.em,{children:"it may be a primitive value or an object value"}),") becomes the values of the property."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reserved words may be used as property names without quoting."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"keys--value",children:"Keys & Value"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Dot Operators"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var obj = {};\nobj.name = "sparsh"; //initializing property name\nobj.name //accessing property with dot operator\nobj.display = function () { // initializing method\n    console.log(this.name)\n}\nobj.display() // accessing method with dot operator\n'})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Square Bracket"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Associate Array is an abstract data type that can hold data in (key, value) pairs like dictionaries, hash, map. JavaScript Objects are associative arrays.####"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var obj = {};\nobj["name"] = "sparsh"; //initializing property name\nobj["name"] //accessing property with square bracket operator\n\nObject.defineProperty\nvar object = {};\nObject.defineProperty(object,"name",{\n      value:"sparsh",\n      writable: true,\n      enumerable: true,\n      configurable: true\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"set--get-properties-of--object",children:"SET & GET properties of  Object"}),"\n",(0,r.jsx)(n.p,{children:"get , set and writable explanation\nObject.defineProperties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var object = {};\nObject.defineProperty(object,{\n      "name": {\n       value:"sparsh",\n       writable: true,\n       enumerable: true,\n       configurable: true\n      },\n      "age": {\n       value:"25",\n       writable: true,\n       enumerable: true,\n       configurable: true\n       },\n);\n'})}),"\n",(0,r.jsx)(n.h1,{id:"private-method-and-properties",children:"Private Method And Properties"}),"\n",(0,r.jsx)(n.p,{children:"Private member"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class Bank {\n    username;\n    #password;\n    constructor(){\n        this.username = 'sparsh';\n        this.#password = '1234';\n    }\n    #resetPassword(){\n        this.#password = 'sparsh';\n    }\n    getInfo(){\n        console.log(this.username,this.#password);\n        this.#resetPassword();\n    }\n}\n\nconst instanceBank = new Bank();\n\nconsole.log(instanceBank.getInfo())\n// sparsh 1234\nconsole.log(instanceBank.getInfo())\n// sparsh sparsh\nconsole.log(instanceBank.#resetPassword())\n// SyntaxError: Private field '#resetPassword' must be declared in an enclosing class\nconsole.log(instanceBank.#password)\n// SyntaxError: Private field '#resetPassword' must be declared in an enclosing class\n"})}),"\n",(0,r.jsx)(n.h1,{id:"chapter--prototyping-chaining",children:"CHAPTER | prototyping chaining"}),"\n",(0,r.jsx)(n.h2,{id:"lets-take-an-example-to-understand-prototype-chaining",children:"Let's take an example to understand prototype chaining"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"create-an-objects-like-car-truck-and-bus-for-company-ford-and-with-common-rawmaterial",children:"Create an objects like Car, Truck and Bus for company Ford and with common rawMaterial"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function companyItem(productName) {\n  this.productName = productName;\n}\nItem.prototype.rawMaterial = "Iron";\nItem.prototype.company = "Ford";\n\nvar Car = new companyItem("Car");\nvar Bus = new companyItem("Bus");\nvar Truck = new companyItem("Truck");\n'})}),"\n",(0,r.jsx)(n.p,{children:"As a general use case, we have wide variety of car. So, our Car Object doesn't specify which modal of car is it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function companyItem(productName) {\n  this.productName = productName;\n}\nItem.prototype.rawMaterial = "Iron";\nItem.prototype.company = "Ford";\n\nvar Car = new companyItem("Car");\nvar Bus = new companyItem("Bus");\nvar Truck = new companyItem("Truck");\n\n// modal of car\nCar.prototype.modal = function (modalName) {\n    console.log("Car Modal: ",modalName);\n};\n\n// TO DO\n1.\nfunction Light() {}\nLight.prototype.color = "red";\n\nfunction Bulb() {}\nBulb.prototype = new Light();\n\nLight.prototype.color = "blue";\nconsole.log(new Bulb().color);\n\n1.\nWhich code specifies the Operator constructor as the prototype for the Multiply constructor?\nYou are correct!\nMultiply.prototype = new Operator();\n\n1.\nWhat is an advantage of using a constructor function to build objects?\nYou are correct!\nIt lets you avoid writing redundant code.\n'})}),"\n",(0,r.jsx)(n.h1,{id:"chapter--prototype",children:"CHAPTER | Prototype"}),"\n",(0,r.jsx)(n.p,{children:"It's a property that an object has."}),"\n",(0,r.jsx)(n.h2,{id:"lets-understand-by-taking-an-example-to-understand-prototype",children:"Let's understand by taking an example to understand prototype"}),"\n",(0,r.jsx)(n.h3,{id:"create-objects-like-car-truck-and-bus-for-company-ford-with-common-rawmaterial",children:"Create objects like Car, Truck and Bus for company Ford with common rawMaterial"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function Car() {\n  this.rawMaterial = "Iron";\n  this.company = "Ford";\n  this.productName = "Car";\n}\n\nvar CarOne = new Car();\n\nfunction Truck() {\n  this.rawMaterial = "Iron";\n  this.company = "Ford";\n  this.productName = "Truck";\n}\nvar TruckOne = new Truck();\n\nfunction Bus() {\n  this.rawMaterial = "Iron";\n  this.company = "Ford";\n  this.productName = "Bus";\n}\nvar BusOne = new Bus();\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Let's optimize the above code."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function companyItem(productName) {\n  this.productName = productName;\n}\ncompanyItem.prototype.rawMaterial = "Iron";\ncompanyItem.prototype.company = "Ford";\n\nvar Car = new companyItem("Car");\nvar Bus = new companyItem("Bus");\nvar Truck = new companyItem("Truck");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"what-are-the-benefits",children:(0,r.jsx)(n.strong,{children:"What are the benefits?"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Saves memory"})," as each instance of companyItem has common space for rawMaterial & company"]}),"\n",(0,r.jsx)(n.h1,{id:"static-getter--setter-",children:"Static,\u200c \u200cGetter\u200c \u200c&\u200c \u200cSetter\u200c \u200c"}),"\n",(0,r.jsx)(n.p,{children:"Static\u200c \u200cmembers\u200c \u200care\u200c \u200caccessed\u200c \u200cdirectly\u200c \u200cthrough\u200c \u200cthe\u200c \u200cclass\u200c \u200cname,\u200c \u200cnot\u200c \u200cthrough\u200c \u200c\nthe\u200c \u200cinstance.\u200c \u200c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'class\u200c\u200c \u200c\u200cCar\u200c\u200c \u200c{\u200c \u200c\n    \u200c\u200cstatic\u200c\u200c \u200c\u200cprintMsg\u200c(){\u200c \u200c\n        \u200c\u200creturn\u200c\u200c \u200c\u200c"this\u200c \u200cis\u200c \u200cCar\u200c \u200c"\u200c;\u200c \u200c\n    \u200c}\u200c \u200c\n}\u200c \u200c\nCar\u200c.\u200cprintMsg\u200c();\u200c \u200c\n\nclass\u200c\u200c \u200c\u200cSquare\u200c\u200c \u200c{\u200c \u200c\n \u200c\u200cstatic\u200c\u200c \u200c\u200csqrt\u200c(\u200cn\u200c)\u200c \u200c{\u200c \u200c\n \u200c\u200cif\u200c\u200c \u200c(\u200cn\u200c\u200c \u200c===\u200c \u200c\u200cundefined\u200c)\u200c \u200c \u200c\n \u200c\u200cn\u200c\u200c \u200c=\u200c \u200c\u200c1\u200c;\u200c \u200c\n \u200c\u200creturn\u200c\u200c \u200c\u200cn\u200c\u200c \u200c*\u200c \u200c\u200cn\u200c;\u200c \u200c\n \u200c}\u200c \u200c\n \u200c}\u200c \u200c\n \u200c\u200cclass\u200c\u200c \u200c\u200cDoubleSquare\u200c\u200c \u200c\u200cextends\u200c\u200c \u200c\u200cSquare\u200c\u200c \u200c{\u200c \u200c\n \u200c\u200cstatic\u200c\u200c \u200c\u200csqrt\u200c(\u200cn\u200c)\u200c \u200c{\u200c \u200c\n \u200c\u200creturn\u200c\u200c \u200c\u200csuper\u200c.\u200csqrt\u200c(\u200cn\u200c)\u200c \u200c*\u200c \u200c\u200csuper\u200c.\u200csqrt\u200c(\u200cn\u200c);\u200c \u200c\n \u200c}\u200c \u200c\n \u200c}\u200c \u200c\n \u200c\u200cconsole\u200c.\u200clog\u200c(\u200cSquare\u200c.\u200csqrt\u200c());\u200c \u200c \u200c\n \u200c\u200cvar\u200c\u200c \u200c\u200ctemp\u200c\u200c \u200c=\u200c \u200c\u200cnew\u200c\u200c \u200c\u200cSquare\u200c();\u200c \u200c\n \u200c\u200cconsole\u200c.\u200clog\u200c(\u200ctemp\u200c.\u200csqrt\u200c());\u200c \u200c\n \u200c\u200cconsole\u200c.\u200clog\u200c(\u200cDoubleSquare\u200c.\u200csqrt\u200c(\u200c3\u200c));\u200c \u200c\n'})}),"\n",(0,r.jsx)(n.p,{children:"*some\u200c \u200cuse-case\u200c \u200cof\u200c \u200cwriting\u200c \u200cjavascript\u200c \u200c \u200c\nIntroduced\u200c \u200cin\u200c \u200cES5,\u200c \u200cSetter\u200c \u200cand\u200c \u200cGetter\u200c \u200clet\u200c \u200cyou\u200c \u200cdefine\u200c \u200cthe\u200c \u200cobject\u200c \u200caccessor.\u200c \u200c\nThis\u200c \u200cObject\u200c \u200caccessor\u200c \u200cacts\u200c \u200cas\u200c \u200cproperty\u200c \u200cor\u200c \u200cmethods\u200c \u200cin\u200c \u200cjavaScript.\u200c \u200c\nSetter\u200c \u200cand\u200c \u200cGetter's\u200c \u200csyntax\u200c \u200cis\u200c \u200cway\u200c \u200ctoo\u200c \u200cstandardizing\u200c \u200cthe\u200c \u200cproperty\u200c \u200cof\u200c \u200can\u200c \u200c\nobject.\u200c \u200c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let\u200c\u200c \u200c\u200cuser\u200c\u200c \u200c=\u200c \u200c{\u200c \u200c\n  \u200c\u200cname:\u200c\u200c \u200c\u200c"John"\u200c,\u200c \u200c\n  \u200c\u200csurname:\u200c\u200c \u200c\u200c"Smith"\u200c,\u200c \u200c\n \u200c```\n \u200c\n \u200c \u200c\n56\u200c \u200c\n \u200c```js\n  \u200c\u200cget\u200c\u200c \u200c\u200cfullName\u200c()\u200c \u200c{\u200c \u200c\n    \u200c\u200creturn\u200c\u200c \u200c\u200c`\u200c${this\u200c.\u200cname\u200c}\u200c\u200c \u200c\u200c${this\u200c.\u200csurname\u200c}\u200c`\u200c;\u200c \u200c\n  \u200c},\u200c \u200c\n  \u200c\u200cset\u200c\u200c \u200c\u200cfullName\u200c(\u200cvalue\u200c)\u200c \u200c{\u200c \u200c\n    \u200c[\u200cthis\u200c.\u200cname\u200c,\u200c \u200c\u200cthis\u200c.\u200csurname\u200c]\u200c \u200c=\u200c \u200c\u200cvalue\u200c.\u200csplit\u200c(\u200c"\u200c \u200c"\u200c);\u200c \u200c\n  \u200c}\u200c \u200c\n};\u200c \u200c\n'})}),"\n",(0,r.jsx)(n.h1,{id:"this",children:"This"}),"\n",(0,r.jsx)(n.p,{children:"This is the object that function is a property of"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"binds this lexically or lexically static scoping\nIn order to run your code in javascript, we need to wrap it in the execution context. Base execution context is called a global context. Global execution context will create\nGlobal object( in the browser is a window global object )"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  console.log(window)\n  Gives all global objects and methods\n  console.log(this)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This (current execution context)\npoints to objects of the current execution context\nGives access to the method to the Object\nReusability of code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:' var myCar = {\n     color:"Blue",\n     logColor: function() {\n         var self = this ;\n         console.log("In logColor - this.color:" + this.color);\n         console.log("In logColor - self.color:"+self.color);\n         (function(){\n             console.log("In logColor - this.color:" + this.color);\n             console.log("In logColor - self.color:"+self.color);\n         })();\n     }\n  }\n  myCar.logColor()\n'})}),"\n",(0,r.jsx)(n.p,{children:"Since JavaScript supports lexical scoping so the where the identifiers are defined is important and this is always dynamically scoped."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const a = function () {\n            console.log('a',this);\n            const b = function(){\n                console.log('b',this)\n                const c = {\n                        print :function(){\n                        console.log('c',this)\n                    }\n            }\n            c.hi()\n        }\n}\na()\n\nconst obj1 = {\n                name : 'sparsh',\n                print(){\n                    console.log(this.name,this)\n                    let Obj2 = function(){\n                        console.log(this.name,this)\n               }\n                Obj2();\n            }\n}\nobj1.print()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Since JavaScript supports lexical scoping so the where the identifiers are defined is important and this is always dynamically scoped. To avoid the use of the dynamic nature of this and make our code more controlled we can use arrow function and bind. By using arrow function and bind we can explicitly assign an execution context to dynamically this."}),"\n",(0,r.jsx)(n.h1,{id:"traversing-properties",children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"Traversing Properties"})})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"Let\u2019s suppose I have an object with lots of properties. How to Traverse through each property in javaScript?"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"var Obj = {\n               name : 'sparsh',\n               age : 28,\n               position : 'Developer',\n               from : 'Himachal'\n       }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Code will be more consistent by following the rules of functional programming and one such rule is immutability.An object that we are creating should be immutable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"Object.freeze(student);\nObject.seal(student);\nObject.preventExtensions(student);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Code will be more performant if we use the objects that are frozen.\nUpdating an Object with immutability practice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const person = { name:"sparsh"}\n// want to update the object and properties to same\nconst updatedPerson = Object.assign({},person,{name:"sparsh jaswal",age:30})\nconst updatedPerson = {...person,name:"sparsh jaswal",age:30}\nAbove pattern fails for nested Object\nupdatedPerson.address.city = "delhi"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Above code will change both updatedPerson & person as its shallow copy for nested objects(address).To avoid the above fail we can use the below pattern."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const person = { name:"sparsh",address: { city:"bengaluru",pin:560035}}\n// want to update the object ,its nested properties and properties to same\nconst updatedPerson = \n  Object.assign(\n    {},\n    person,\n    {address:{"city":person.address.city}},\n    {name:"sparsh jaswal"}\n)\n\nconst updatedPerson = {\n    ...person,\n    address:{\n      ...person.address\n    },\n    name:"sparsh jaswal",\n    age:30\n  }\n'})}),"\n",(0,r.jsx)(n.h1,{id:"chapter-23--object",children:(0,r.jsx)(n.strong,{children:"CHAPTER 23 | Object"})}),"\n",(0,r.jsx)(n.p,{children:"Object term is generally referred to as a noun which is a word that is the name of a person, place, thing or idea. The main reason to support the Object in any language is to target data types that hold a value that can be related to the real world."}),"\n",(0,r.jsx)(n.p,{children:"The object is a container or aggregate or a complex data type that contains property and methods in an unordered/ordered manner."}),"\n",(0,r.jsx)(n.p,{children:"Operations on Object : -"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Creating An Object and Properties [a URl]"}),"\n",(0,r.jsx)(n.li,{children:"Traversing An Object Properties"}),"\n",(0,r.jsx)(n.li,{children:"Deleting An Object Properties"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Object-oriented programming is a paradigm which makes our code Understandable Extendable Maintainable memory-efficient and dry"}),"\n",(0,r.jsx)(n.p,{children:"Object-oriented concept ."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Abstraction"}),"\n",(0,r.jsx)(n.li,{children:"Encapsulation"}),"\n",(0,r.jsx)(n.li,{children:"Wrapping code into the container in which the container can"}),"\n",(0,r.jsx)(n.li,{children:"Modularity"}),"\n",(0,r.jsx)(n.li,{children:"Inheritance"}),"\n",(0,r.jsx)(n.li,{children:"Concurrency"}),"\n",(0,r.jsx)(n.li,{children:"Persistency"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"javascript-objects---complete-guide",children:"JavaScript Objects - Complete Guide"}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#introduction-to-objects",children:"Introduction to Objects"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#creating-objects",children:"Creating Objects"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#object-properties-and-methods",children:"Object Properties and Methods"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#object-oriented-programming-concepts",children:"Object-Oriented Programming Concepts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#prototypes-and-prototype-chain",children:"Prototypes and Prototype Chain"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#classes-es6",children:"Classes (ES6+)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#inheritance",children:"Inheritance"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#object-composition",children:"Object Composition"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#advanced-object-concepts",children:"Advanced Object Concepts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"introduction-to-objects",children:"Introduction to Objects"}),"\n",(0,r.jsx)(n.p,{children:"Objects in JavaScript are complex data types that represent real-world entities. They are containers that hold properties (data) and methods (functions) in an unordered manner."}),"\n",(0,r.jsx)(n.h3,{id:"why-objects",children:"Why Objects?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-world modeling"}),": Objects help represent real-world entities in code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data organization"}),": Group related data and functionality together"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code reusability"}),": Create templates for similar objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintainability"}),": Easier to manage and extend code"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"object-oriented-programming-principles",children:"Object-Oriented Programming Principles"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Abstraction"})," - Hide complex implementation details"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encapsulation"})," - Bundle data and methods together"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inheritance"})," - Create new objects based on existing ones"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Polymorphism"})," - Same interface, different implementations"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"creating-objects",children:"Creating Objects"}),"\n",(0,r.jsx)(n.h3,{id:"1-object-literals-most-common",children:"1. Object Literals (Most Common)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Basic object literal\nconst person = {\n  name: "Sparsh Jaswal",\n  age: 28,\n  city: "New Delhi",\n  greet: function() {\n    return `Hello, I\'m ${this.name}`;\n  }\n};\n\n// Shorthand property names (ES6)\nconst name = "John";\nconst age = 30;\nconst user = { name, age }; // Same as { name: name, age: age }\n\n// Computed property names\nconst prop = "email";\nconst contact = {\n  [prop]: "john@example.com",\n  [`${prop}Verified`]: true\n};\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-constructor-function",children:"2. Constructor Function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Constructor function\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.greet = function() {\n    return `Hello, I\'m ${this.name}`;\n  };\n}\n\nconst person1 = new Person("Alice", 25);\nconst person2 = new Person("Bob", 30);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-objectcreate",children:"3. Object.create()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Creating object with specific prototype\nconst personPrototype = {\n  greet: function() {\n    return `Hello, I\'m ${this.name}`;\n  }\n};\n\nconst person = Object.create(personPrototype);\nperson.name = "Charlie";\nperson.age = 35;\n\n// With properties descriptor\nconst employee = Object.create(personPrototype, {\n  name: { value: "Dave", writable: true },\n  age: { value: 40, writable: true },\n  employeeId: { value: "EMP001", writable: false }\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-factory-function",children:"4. Factory Function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function createPerson(name, age) {\n  return {\n    name,\n    age,\n    greet() {\n      return `Hello, I\'m ${this.name}`;\n    }\n  };\n}\n\nconst person = createPerson("Eve", 28);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"object-properties-and-methods",children:"Object Properties and Methods"}),"\n",(0,r.jsx)(n.h3,{id:"property-access",children:"Property Access"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = { name: "John", age: 30 };\n\n// Dot notation\nconsole.log(person.name); // "John"\n\n// Bracket notation\nconsole.log(person["age"]); // 30\n\n// Dynamic property access\nconst prop = "name";\nconsole.log(person[prop]); // "John"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"property-descriptors",children:"Property Descriptors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const obj = {};\n\n// Define property with descriptor\nObject.defineProperty(obj, "name", {\n  value: "John",\n  writable: true,     // Can be changed\n  enumerable: true,   // Shows in for...in loops\n  configurable: true  // Can be deleted/reconfigured\n});\n\n// Get property descriptor\nconst descriptor = Object.getOwnPropertyDescriptor(obj, "name");\nconsole.log(descriptor);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"getters-and-setters",children:"Getters and Setters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = {\n  firstName: "John",\n  lastName: "Doe",\n  \n  // Getter\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  },\n  \n  // Setter\n  set fullName(value) {\n    [this.firstName, this.lastName] = value.split(" ");\n  }\n};\n\nconsole.log(person.fullName); // "John Doe"\nperson.fullName = "Jane Smith";\nconsole.log(person.firstName); // "Jane"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"static-methods",children:"Static Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MathHelper {\n  static add(a, b) {\n    return a + b;\n  }\n  \n  static PI = 3.14159;\n}\n\nconsole.log(MathHelper.add(5, 3)); // 8\nconsole.log(MathHelper.PI); // 3.14159\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"object-oriented-programming-concepts",children:"Object-Oriented Programming Concepts"}),"\n",(0,r.jsxs)(n.h3,{id:"the-this-keyword",children:["The ",(0,r.jsx)(n.code,{children:"this"})," Keyword"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = {\n  name: "John",\n  greet: function() {\n    console.log(`Hello, I\'m ${this.name}`);\n  },\n  \n  // Arrow function doesn\'t bind \'this\'\n  greetArrow: () => {\n    console.log(`Hello, I\'m ${this.name}`); // undefined\n  }\n};\n\nperson.greet(); // "Hello, I\'m John"\n\n// Explicit binding\nconst greetFunc = person.greet;\ngreetFunc.call({ name: "Alice" }); // "Hello, I\'m Alice"\ngreetFunc.apply({ name: "Bob" }); // "Hello, I\'m Bob"\n\nconst boundGreet = greetFunc.bind({ name: "Charlie" });\nboundGreet(); // "Hello, I\'m Charlie"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"private-properties-modern-approach",children:"Private Properties (Modern Approach)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class BankAccount {\n  #balance = 0; // Private field\n  \n  constructor(initialBalance) {\n    this.#balance = initialBalance;\n  }\n  \n  deposit(amount) {\n    if (amount > 0) {\n      this.#balance += amount;\n    }\n  }\n  \n  getBalance() {\n    return this.#balance;\n  }\n  \n  // Private method\n  #validateAmount(amount) {\n    return amount > 0;\n  }\n}\n\nconst account = new BankAccount(100);\nconsole.log(account.getBalance()); // 100\n// console.log(account.#balance); // SyntaxError\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"prototypes-and-prototype-chain",children:"Prototypes and Prototype Chain"}),"\n",(0,r.jsx)(n.h3,{id:"understanding-prototypes",children:"Understanding Prototypes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Constructor function\nfunction Person(name) {\n  this.name = name;\n}\n\n// Add method to prototype\nPerson.prototype.greet = function() {\n  return `Hello, I\'m ${this.name}`;\n};\n\nPerson.prototype.species = "Homo sapiens";\n\nconst person1 = new Person("Alice");\nconst person2 = new Person("Bob");\n\nconsole.log(person1.greet()); // "Hello, I\'m Alice"\nconsole.log(person1.species); // "Homo sapiens"\n\n// Memory efficient - method shared across instances\nconsole.log(person1.greet === person2.greet); // true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"prototype-chain",children:"Prototype Chain"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.speak = function() {\n  return `${this.name} makes a sound`;\n};\n\nfunction Dog(name, breed) {\n  Animal.call(this, name); // Call parent constructor\n  this.breed = breed;\n}\n\n// Set up inheritance\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nDog.prototype.bark = function() {\n  return `${this.name} barks!`;\n};\n\nconst dog = new Dog("Rex", "German Shepherd");\nconsole.log(dog.speak()); // "Rex makes a sound"\nconsole.log(dog.bark());  // "Rex barks!"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"classes-es6",children:"Classes (ES6+)"}),"\n",(0,r.jsx)(n.h3,{id:"basic-class-syntax",children:"Basic Class Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  greet() {\n    return `Hello, I\'m ${this.name}`;\n  }\n  \n  static species() {\n    return "Homo sapiens";\n  }\n}\n\nconst person = new Person("John", 30);\nconsole.log(person.greet()); // "Hello, I\'m John"\nconsole.log(Person.species()); // "Homo sapiens"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"class-inheritance",children:"Class Inheritance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    return `${this.name} makes a sound`;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name); // Call parent constructor\n    this.breed = breed;\n  }\n  \n  speak() {\n    return `${this.name} barks!`;\n  }\n  \n  wagTail() {\n    return `${this.name} wags tail`;\n  }\n}\n\nconst dog = new Dog("Rex", "Labrador");\nconsole.log(dog.speak()); // "Rex barks!"\nconsole.log(dog.wagTail()); // "Rex wags tail"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"inheritance-2",children:"Inheritance"}),"\n",(0,r.jsx)(n.h3,{id:"classical-inheritance-es5-style",children:"Classical Inheritance (ES5 Style)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Parent constructor\nfunction Vehicle(make, model) {\n  this.make = make;\n  this.model = model;\n}\n\nVehicle.prototype.start = function() {\n  return `${this.make} ${this.model} is starting`;\n};\n\n// Child constructor\nfunction Car(make, model, doors) {\n  Vehicle.call(this, make, model); // Call parent constructor\n  this.doors = doors;\n}\n\n// Set up inheritance\nCar.prototype = Object.create(Vehicle.prototype);\nCar.prototype.constructor = Car;\n\n// Add child-specific method\nCar.prototype.honk = function() {\n  return `${this.make} ${this.model} honks!`;\n};\n\nconst car = new Car("Toyota", "Camry", 4);\nconsole.log(car.start()); // "Toyota Camry is starting"\nconsole.log(car.honk());  // "Toyota Camry honks!"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"modern-inheritance-es6-classes",children:"Modern Inheritance (ES6 Classes)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Vehicle {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n  \n  start() {\n    return `${this.make} ${this.model} is starting`;\n  }\n}\n\nclass Car extends Vehicle {\n  constructor(make, model, doors) {\n    super(make, model);\n    this.doors = doors;\n  }\n  \n  honk() {\n    return `${this.make} ${this.model} honks!`;\n  }\n}\n\nconst car = new Car("Honda", "Civic", 4);\nconsole.log(car.start()); // "Honda Civic is starting"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"object-composition",children:"Object Composition"}),"\n",(0,r.jsx)(n.h3,{id:"is-a-vs-has-a-relationships",children:"IS-A vs HAS-A Relationships"}),"\n",(0,r.jsx)(n.h4,{id:"is-a-relationship-inheritance",children:"IS-A Relationship (Inheritance)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Employee IS-A Person\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n  \n  getFullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nclass Employee extends Person {\n  constructor(empId, firstName, lastName, salary) {\n    super(firstName, lastName);\n    this.empId = empId;\n    this.salary = salary;\n  }\n  \n  getEmployeeInfo() {\n    return `${this.getFullName()} (ID: ${this.empId})`;\n  }\n}\n\nconst emp = new Employee(101, "John", "Doe", 50000);\nconsole.log(emp.getEmployeeInfo()); // "John Doe (ID: 101)"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"has-a-relationship-composition",children:"HAS-A Relationship (Composition)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Order HAS-A Product\nclass Product {\n  constructor(id, name, price) {\n    this.id = id;\n    this.name = name;\n    this.price = price;\n  }\n  \n  getInfo() {\n    return `${this.name} - $${this.price}`;\n  }\n}\n\nclass Order {\n  constructor(orderId) {\n    this.orderId = orderId;\n    this.products = [];\n    this.total = 0;\n  }\n  \n  addProduct(product, quantity = 1) {\n    this.products.push({ product, quantity });\n    this.total += product.price * quantity;\n  }\n  \n  getOrderSummary() {\n    return {\n      orderId: this.orderId,\n      items: this.products.length,\n      total: this.total\n    };\n  }\n}\n\n// Usage - Dependency Injection\nconst laptop = new Product(1, "Laptop", 999);\nconst mouse = new Product(2, "Mouse", 25);\n\nconst order = new Order("ORD-001");\norder.addProduct(laptop, 1);\norder.addProduct(mouse, 2);\n\nconsole.log(order.getOrderSummary());\n// { orderId: "ORD-001", items: 2, total: 1049 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"composition-over-inheritance",children:"Composition over Inheritance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Instead of deep inheritance, use composition\nconst canFly = {\n  fly() {\n    return `${this.name} is flying`;\n  }\n};\n\nconst canSwim = {\n  swim() {\n    return `${this.name} is swimming`;\n  }\n};\n\nconst canWalk = {\n  walk() {\n    return `${this.name} is walking`;\n  }\n};\n\n// Compose abilities\nfunction createBird(name) {\n  const bird = { name };\n  return Object.assign(bird, canFly, canWalk);\n}\n\nfunction createFish(name) {\n  const fish = { name };\n  return Object.assign(fish, canSwim);\n}\n\nfunction createDuck(name) {\n  const duck = { name };\n  return Object.assign(duck, canFly, canSwim, canWalk);\n}\n\nconst eagle = createBird("Eagle");\nconst duck = createDuck("Duck");\n\nconsole.log(eagle.fly());  // "Eagle is flying"\nconsole.log(duck.swim());  // "Duck is swimming"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"advanced-object-concepts",children:"Advanced Object Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"object-destructuring",children:"Object Destructuring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = {\n  name: "John",\n  age: 30,\n  address: {\n    city: "New York",\n    country: "USA"\n  }\n};\n\n// Basic destructuring\nconst { name, age } = person;\n\n// Rename variables\nconst { name: fullName, age: years } = person;\n\n// Nested destructuring\nconst { address: { city, country } } = person;\n\n// Default values\nconst { height = 180 } = person;\n\n// Function parameters\nfunction greet({ name, age = 25 }) {\n  return `Hello ${name}, you are ${age} years old`;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"object-spread-and-rest",children:"Object Spread and Rest"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = { name: "John", age: 30 };\nconst job = { title: "Developer", company: "Tech Corp" };\n\n// Spread operator\nconst employee = { ...person, ...job };\nconsole.log(employee);\n// { name: "John", age: 30, title: "Developer", company: "Tech Corp" }\n\n// Rest operator\nconst { name, ...otherProps } = employee;\nconsole.log(name); // "John"\nconsole.log(otherProps); // { age: 30, title: "Developer", company: "Tech Corp" }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"object-methods-and-utilities",children:"Object Methods and Utilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const obj = { a: 1, b: 2, c: 3 };\n\n// Object.keys() - Get property names\nconsole.log(Object.keys(obj)); // ["a", "b", "c"]\n\n// Object.values() - Get property values\nconsole.log(Object.values(obj)); // [1, 2, 3]\n\n// Object.entries() - Get key-value pairs\nconsole.log(Object.entries(obj)); // [["a", 1], ["b", 2], ["c", 3]]\n\n// Object.assign() - Copy properties\nconst copy = Object.assign({}, obj);\n\n// Object.freeze() - Make immutable\nObject.freeze(obj);\n\n// Object.seal() - Prevent adding/removing properties\nObject.seal(obj);\n\n// Check property existence\nconsole.log("a" in obj); // true\nconsole.log(obj.hasOwnProperty("a")); // true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"traversing-object-properties",children:"Traversing Object Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\n// for...in loop\nfor (const key in person) {\n  if (person.hasOwnProperty(key)) {\n    console.log(`${key}: ${person[key]}`);\n  }\n}\n\n// Object.keys() with forEach\nObject.keys(person).forEach(key => {\n  console.log(`${key}: ${person[key]}`);\n});\n\n// Object.entries() with for...of\nfor (const [key, value] of Object.entries(person)) {\n  console.log(`${key}: ${value}`);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deleting-properties-1",children:"Deleting Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const person = { name: "John", age: 30, temp: "delete me" };\n\n// Delete operator\ndelete person.temp;\n\n// Using destructuring (creates new object)\nconst { temp, ...cleanPerson } = person;\n\n// Object.assign() with undefined\nconst cleaned = Object.assign({}, person, { temp: undefined });\n\nconsole.log(person); // { name: "John", age: 30 }\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-meaningful-names",children:"1. Use Meaningful Names"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Bad\nconst u = { n: "John", a: 30 };\n\n// Good\nconst user = { name: "John", age: 30 };\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-prefer-composition-over-inheritance",children:"2. Prefer Composition over Inheritance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Instead of deep inheritance hierarchies, use composition\nconst withLogging = (obj) => ({\n  ...obj,\n  log(message) {\n    console.log(`[${this.constructor.name}]: ${message}`);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-objectfreeze-for-immutable-objects",children:"3. Use Object.freeze() for Immutable Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const config = Object.freeze({\n  API_URL: "https://api.example.com",\n  VERSION: "1.0.0"\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-validate-constructor-parameters",children:"4. Validate Constructor Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Person {\n  constructor(name, age) {\n    if (!name || typeof name !== "string") {\n      throw new Error("Name must be a non-empty string");\n    }\n    if (!age || age < 0) {\n      throw new Error("Age must be a positive number");\n    }\n    \n    this.name = name;\n    this.age = age;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-use-getterssetters-for-computed-properties",children:"5. Use Getters/Setters for Computed Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  \n  get area() {\n    return this.width * this.height;\n  }\n  \n  get perimeter() {\n    return 2 * (this.width + this.height);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6-implement-tostring-and-valueof-methods",children:"6. Implement toString() and valueOf() Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'class Money {\n  constructor(amount, currency) {\n    this.amount = amount;\n    this.currency = currency;\n  }\n  \n  toString() {\n    return `${this.amount} ${this.currency}`;\n  }\n  \n  valueOf() {\n    return this.amount;\n  }\n}\n\nconst price = new Money(100, "USD");\nconsole.log(String(price)); // "100 USD"\nconsole.log(Number(price)); // 100\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"JavaScript objects are powerful constructs that enable:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data organization"})," through properties and methods"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code reuse"})," through prototypes and inheritance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encapsulation"})," through private fields and methods"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Polymorphism"})," through method overriding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composition"})," for flexible code architecture"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Understanding objects is crucial for writing maintainable, scalable JavaScript applications. Choose the right pattern (inheritance vs composition) based on your specific use case, and always prioritize code clarity and maintainability."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);