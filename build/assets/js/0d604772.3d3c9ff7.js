"use strict";(globalThis.webpackChunka=globalThis.webpackChunka||[]).push([[5765],{241:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"design-pattern/structural/flyweight","title":"Flyweight Pattern \ud83e\udeb6","description":"Definition: The Flyweight pattern minimizes memory usage by sharing efficiently the common parts of state between multiple objects instead of storing all data in each object.","source":"@site/docs/design-pattern/structural/flyweight.md","sourceDirName":"design-pattern/structural","slug":"/design-pattern/structural/flyweight","permalink":"/docs/design-pattern/structural/flyweight","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Facade Pattern \ud83c\udfdb\ufe0f","permalink":"/docs/design-pattern/structural/facade"},"next":{"title":"Proxy Pattern \ud83d\udee1\ufe0f","permalink":"/docs/design-pattern/structural/proxy"}}');var s=r(4848),i=r(8453);const o={},a="Flyweight Pattern \ud83e\udeb6",l={},c=[{value:"\ud83c\udfaf Intent",id:"-intent",level:2},{value:"\ud83e\udd14 Problem",id:"-problem",level:2},{value:"\ud83d\udca1 Solution",id:"-solution",level:2},{value:"\ud83c\udfd7\ufe0f Structure",id:"\ufe0f-structure",level:2},{value:"\ud83d\udcbb Simple Example",id:"-simple-example",level:2},{value:"Text Editor Characters",id:"text-editor-characters",level:3},{value:"\ud83c\udf1f Real-World Example",id:"-real-world-example",level:2},{value:"Forest Simulation",id:"forest-simulation",level:3},{value:"\ud83d\udd27 Another Simple Example",id:"-another-simple-example",level:2},{value:"Button Factory (UI Components)",id:"button-factory-ui-components",level:3},{value:"\u2705 Pros",id:"-pros",level:2},{value:"\u274c Cons",id:"-cons",level:2},{value:"\ud83c\udfaf When to Use",id:"-when-to-use",level:2},{value:"\ud83d\udd04 Implementation Tips",id:"-implementation-tips",level:2},{value:"1. <strong>Identify Intrinsic vs Extrinsic State</strong>",id:"1-identify-intrinsic-vs-extrinsic-state",level:3},{value:"2. <strong>Factory Pattern Integration</strong>",id:"2-factory-pattern-integration",level:3},{value:"\ud83d\udd17 Related Patterns",id:"-related-patterns",level:2},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"flyweight-pattern-",children:"Flyweight Pattern \ud83e\udeb6"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Definition"}),": The Flyweight pattern minimizes memory usage by sharing efficiently the common parts of state between multiple objects instead of storing all data in each object."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-intent",children:"\ud83c\udfaf Intent"}),"\n",(0,s.jsx)(t.p,{children:"Use sharing to support large numbers of fine-grained objects efficiently by separating intrinsic state (shared) from extrinsic state (context-specific)."}),"\n",(0,s.jsx)(t.h2,{id:"-problem",children:"\ud83e\udd14 Problem"}),"\n",(0,s.jsx)(t.p,{children:"You need to create a large number of objects that consume too much memory. Many objects contain duplicate data that could be shared. For example, in a text editor, each character object might store font, size, and color - but many characters share the same formatting."}),"\n",(0,s.jsx)(t.p,{children:"Creating millions of character objects would consume massive amounts of memory, most of which would be redundant."}),"\n",(0,s.jsx)(t.h2,{id:"-solution",children:"\ud83d\udca1 Solution"}),"\n",(0,s.jsx)(t.p,{children:"The Flyweight pattern suggests separating object state into two types:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Intrinsic state"}),": Data shared among objects (stored in flyweight)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Extrinsic state"}),": Context-specific data (passed to flyweight methods)"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"\ufe0f-structure",children:"\ud83c\udfd7\ufe0f Structure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"FlyweightFactory\r\n\u251c\u2500\u2500 flyweights: Map<key, Flyweight>\r\n\u2514\u2500\u2500 getFlyweight(key): Flyweight\r\n\r\nFlyweight (interface)\r\n\u2514\u2500\u2500 operation(extrinsicState)\r\n\r\nConcreteFlyweight implements Flyweight\r\n\u251c\u2500\u2500 intrinsicState\r\n\u2514\u2500\u2500 operation(extrinsicState)\r\n\r\nContext\r\n\u251c\u2500\u2500 flyweight: Flyweight\r\n\u251c\u2500\u2500 extrinsicState\r\n\u2514\u2500\u2500 operation() \u2192 flyweight.operation(extrinsicState)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"-simple-example",children:"\ud83d\udcbb Simple Example"}),"\n",(0,s.jsx)(t.h3,{id:"text-editor-characters",children:"Text Editor Characters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Flyweight interface\r\nclass CharacterFlyweight {\r\n  constructor(character, font, size) {\r\n    this.character = character; // Intrinsic state\r\n    this.font = font;          // Intrinsic state\r\n    this.size = size;          // Intrinsic state\r\n  }\r\n  \r\n  // Operation that uses both intrinsic and extrinsic state\r\n  render(x, y, color) { // x, y, color are extrinsic state\r\n    console.log(\r\n      `Rendering '${this.character}' at (${x}, ${y}) ` +\r\n      `with ${this.font} font, size ${this.size}, color ${color}`\r\n    );\r\n  }\r\n}\r\n\r\n// Flyweight factory\r\nclass CharacterFlyweightFactory {\r\n  constructor() {\r\n    this.flyweights = new Map();\r\n  }\r\n  \r\n  getFlyweight(character, font, size) {\r\n    const key = `${character}-${font}-${size}`;\r\n    \r\n    if (!this.flyweights.has(key)) {\r\n      console.log(`\ud83d\udcdd Creating new flyweight for: ${key}`);\r\n      this.flyweights.set(key, new CharacterFlyweight(character, font, size));\r\n    } else {\r\n      console.log(`\u267b\ufe0f  Reusing flyweight for: ${key}`);\r\n    }\r\n    \r\n    return this.flyweights.get(key);\r\n  }\r\n  \r\n  getCreatedFlyweightsCount() {\r\n    return this.flyweights.size;\r\n  }\r\n  \r\n  listFlyweights() {\r\n    console.log(`\ud83d\udcca Total flyweights created: ${this.flyweights.size}`);\r\n    for (const [key, flyweight] of this.flyweights) {\r\n      console.log(`   ${key}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Context class that maintains extrinsic state\r\nclass Character {\r\n  constructor(character, font, size, x, y, color) {\r\n    this.flyweight = factory.getFlyweight(character, font, size);\r\n    // Extrinsic state\r\n    this.x = x;\r\n    this.y = y;\r\n    this.color = color;\r\n  }\r\n  \r\n  render() {\r\n    this.flyweight.render(this.x, this.y, this.color);\r\n  }\r\n  \r\n  moveTo(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\n// Document class that manages characters\r\nclass Document {\r\n  constructor() {\r\n    this.characters = [];\r\n  }\r\n  \r\n  addCharacter(char, font, size, x, y, color) {\r\n    const character = new Character(char, font, size, x, y, color);\r\n    this.characters.push(character);\r\n  }\r\n  \r\n  render() {\r\n    console.log(\"\ud83d\udcc4 Rendering document:\");\r\n    this.characters.forEach(char => char.render());\r\n  }\r\n  \r\n  getCharacterCount() {\r\n    return this.characters.length;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"=== Text Editor Flyweight Demo ===\\n\");\r\n\r\nconst factory = new CharacterFlyweightFactory();\r\nconst document = new Document();\r\n\r\nconsole.log(\"Adding characters to document:\");\r\nconsole.log(\"-\".repeat(30));\r\n\r\n// Add characters - notice how flyweights are reused\r\ndocument.addCharacter('H', 'Arial', 12, 0, 0, 'black');\r\ndocument.addCharacter('e', 'Arial', 12, 10, 0, 'black');\r\ndocument.addCharacter('l', 'Arial', 12, 20, 0, 'black');\r\ndocument.addCharacter('l', 'Arial', 12, 30, 0, 'black');\r\ndocument.addCharacter('o', 'Arial', 12, 40, 0, 'black');\r\n\r\n// Add more characters with different formatting\r\ndocument.addCharacter('W', 'Arial', 14, 0, 20, 'red');\r\ndocument.addCharacter('o', 'Arial', 14, 15, 20, 'red');\r\ndocument.addCharacter('r', 'Arial', 14, 30, 20, 'red');\r\ndocument.addCharacter('l', 'Arial', 14, 45, 20, 'red');\r\ndocument.addCharacter('d', 'Arial', 14, 60, 20, 'red');\r\n\r\n// Add characters that reuse existing flyweights\r\ndocument.addCharacter('H', 'Arial', 12, 0, 40, 'blue');\r\ndocument.addCharacter('e', 'Arial', 12, 10, 40, 'blue');\r\ndocument.addCharacter('l', 'Arial', 12, 20, 40, 'green');\r\ndocument.addCharacter('l', 'Arial', 12, 30, 40, 'green');\r\ndocument.addCharacter('o', 'Arial', 12, 40, 40, 'purple');\r\n\r\nconsole.log(\"\\nDocument statistics:\");\r\nconsole.log(\"-\".repeat(20));\r\nconsole.log(`Total characters in document: ${document.getCharacterCount()}`);\r\nfactory.listFlyweights();\r\n\r\nconsole.log(\"\\nRendering document:\");\r\nconsole.log(\"-\".repeat(18));\r\ndocument.render();\n"})}),"\n",(0,s.jsx)(t.h2,{id:"-real-world-example",children:"\ud83c\udf1f Real-World Example"}),"\n",(0,s.jsx)(t.h3,{id:"forest-simulation",children:"Forest Simulation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Flyweight for tree types\r\nclass TreeType {\r\n  constructor(name, color, sprite) {\r\n    this.name = name;     // Intrinsic state\r\n    this.color = color;   // Intrinsic state\r\n    this.sprite = sprite; // Intrinsic state (image data)\r\n  }\r\n  \r\n  // Method that uses both intrinsic and extrinsic state\r\n  render(canvas, x, y, size) { // canvas, x, y, size are extrinsic\r\n    console.log(\r\n      `\ud83c\udf32 Rendering ${this.name} tree (${this.color}) ` +\r\n      `at (${x}, ${y}) with size ${size}px using sprite: ${this.sprite}`\r\n    );\r\n  }\r\n  \r\n  // Simulate tree-specific behavior\r\n  getGrowthRate() {\r\n    const growthRates = {\r\n      'Oak': 2,\r\n      'Pine': 3,\r\n      'Birch': 4,\r\n      'Maple': 2.5\r\n    };\r\n    return growthRates[this.name] || 2;\r\n  }\r\n}\r\n\r\n// Flyweight factory\r\nclass TreeTypeFactory {\r\n  constructor() {\r\n    this.treeTypes = new Map();\r\n  }\r\n  \r\n  getTreeType(name, color, sprite) {\r\n    const key = `${name}-${color}`;\r\n    \r\n    if (!this.treeTypes.has(key)) {\r\n      console.log(`\ud83c\udf31 Creating new tree type: ${key}`);\r\n      this.treeTypes.set(key, new TreeType(name, color, sprite));\r\n    }\r\n    \r\n    return this.treeTypes.get(key);\r\n  }\r\n  \r\n  getCreatedTypesCount() {\r\n    return this.treeTypes.size;\r\n  }\r\n  \r\n  listTreeTypes() {\r\n    console.log(`\ud83d\udcca Tree types created: ${this.treeTypes.size}`);\r\n    for (const [key, type] of this.treeTypes) {\r\n      console.log(`   ${key} (Growth rate: ${type.getGrowthRate()})`);\r\n    }\r\n  }\r\n}\r\n\r\n// Context class for individual trees\r\nclass Tree {\r\n  constructor(x, y, size, treeType) {\r\n    // Extrinsic state\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.age = 0;\r\n    \r\n    // Reference to flyweight\r\n    this.treeType = treeType;\r\n  }\r\n  \r\n  render(canvas) {\r\n    this.treeType.render(canvas, this.x, this.y, this.size);\r\n  }\r\n  \r\n  grow() {\r\n    this.age++;\r\n    this.size += this.treeType.getGrowthRate();\r\n    console.log(\r\n      `\ud83c\udf31 ${this.treeType.name} at (${this.x}, ${this.y}) ` +\r\n      `grew to size ${this.size}px (age: ${this.age} years)`\r\n    );\r\n  }\r\n  \r\n  getInfo() {\r\n    return {\r\n      type: this.treeType.name,\r\n      color: this.treeType.color,\r\n      position: { x: this.x, y: this.y },\r\n      size: this.size,\r\n      age: this.age\r\n    };\r\n  }\r\n}\r\n\r\n// Forest class that manages many trees\r\nclass Forest {\r\n  constructor() {\r\n    this.trees = [];\r\n    this.treeTypeFactory = new TreeTypeFactory();\r\n  }\r\n  \r\n  plantTree(x, y, name, color, sprite) {\r\n    const treeType = this.treeTypeFactory.getTreeType(name, color, sprite);\r\n    const tree = new Tree(x, y, 10, treeType); // Start with size 10\r\n    this.trees.push(tree);\r\n    \r\n    console.log(`\ud83c\udf33 Planted ${name} tree at (${x}, ${y})`);\r\n  }\r\n  \r\n  render() {\r\n    console.log(\"\ud83c\udfde\ufe0f Rendering forest:\");\r\n    const canvas = \"2D Canvas Context\"; // Simulated canvas\r\n    \r\n    this.trees.forEach((tree, index) => {\r\n      console.log(`Tree ${index + 1}:`);\r\n      tree.render(canvas);\r\n    });\r\n  }\r\n  \r\n  simulateGrowth() {\r\n    console.log(\"\\n\ud83d\udcc8 Simulating tree growth (1 year):\");\r\n    this.trees.forEach(tree => tree.grow());\r\n  }\r\n  \r\n  getForestStats() {\r\n    const stats = {\r\n      totalTrees: this.trees.length,\r\n      uniqueTreeTypes: this.treeTypeFactory.getCreatedTypesCount(),\r\n      averageSize: 0,\r\n      treesByType: {}\r\n    };\r\n    \r\n    let totalSize = 0;\r\n    this.trees.forEach(tree => {\r\n      totalSize += tree.size;\r\n      const typeName = tree.treeType.name;\r\n      stats.treesByType[typeName] = (stats.treesByType[typeName] || 0) + 1;\r\n    });\r\n    \r\n    stats.averageSize = totalSize / this.trees.length;\r\n    return stats;\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log(\"=== Forest Simulation Flyweight Demo ===\\n\");\r\n\r\nconst forest = new Forest();\r\n\r\nconsole.log(\"Planting trees in the forest:\");\r\nconsole.log(\"-\".repeat(30));\r\n\r\n// Plant many trees - notice flyweight reuse\r\nforest.plantTree(10, 20, 'Oak', 'Green', 'oak_sprite.png');\r\nforest.plantTree(30, 40, 'Pine', 'Dark Green', 'pine_sprite.png');\r\nforest.plantTree(50, 60, 'Oak', 'Green', 'oak_sprite.png'); // Reuses Oak-Green flyweight\r\nforest.plantTree(70, 80, 'Birch', 'Light Green', 'birch_sprite.png');\r\nforest.plantTree(90, 100, 'Pine', 'Dark Green', 'pine_sprite.png'); // Reuses Pine-Dark Green\r\nforest.plantTree(110, 120, 'Maple', 'Red', 'maple_sprite.png');\r\nforest.plantTree(130, 140, 'Oak', 'Green', 'oak_sprite.png'); // Reuses Oak-Green again\r\nforest.plantTree(150, 160, 'Oak', 'Yellow', 'oak_sprite.png'); // New Oak-Yellow flyweight\r\n\r\nconsole.log(\"\\nForest statistics:\");\r\nconsole.log(\"-\".repeat(17));\r\nconst stats = forest.getForestStats();\r\nconsole.log(`Total trees: ${stats.totalTrees}`);\r\nconsole.log(`Unique tree types (flyweights): ${stats.uniqueTreeTypes}`);\r\nconsole.log(`Trees by type:`, stats.treesByType);\r\n\r\nconsole.log(\"\\nTree type flyweights:\");\r\nforest.treeTypeFactory.listTreeTypes();\r\n\r\nconsole.log(\"\\nSimulating forest growth:\");\r\nconsole.log(\"-\".repeat(25));\r\nforest.simulateGrowth();\r\n\r\nconsole.log(`\\nAverage tree size after growth: ${forest.getForestStats().averageSize.toFixed(1)}px`);\r\n\r\nconsole.log(\"\\nMemory efficiency demonstration:\");\r\nconsole.log(\"-\".repeat(32));\r\nconsole.log(`Without Flyweight: ${stats.totalTrees} tree objects \xd7 (name + color + sprite) = Heavy memory usage`);\r\nconsole.log(`With Flyweight: ${stats.totalTrees} context objects + ${stats.uniqueTreeTypes} flyweight objects = Efficient memory usage`);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"-another-simple-example",children:"\ud83d\udd27 Another Simple Example"}),"\n",(0,s.jsx)(t.h3,{id:"button-factory-ui-components",children:"Button Factory (UI Components)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'// Flyweight for button styles\r\nclass ButtonStyle {\r\n  constructor(font, fontSize, backgroundColor, borderStyle) {\r\n    // Intrinsic state - shared among buttons\r\n    this.font = font;\r\n    this.fontSize = fontSize;\r\n    this.backgroundColor = backgroundColor;\r\n    this.borderStyle = borderStyle;\r\n  }\r\n  \r\n  render(text, x, y, width, height, isPressed) {\r\n    const pressedStyle = isPressed ? " (pressed)" : "";\r\n    console.log(\r\n      `\ud83d\udd18 Button "${text}" at (${x}, ${y}) ${width}\xd7${height}px ` +\r\n      `${this.backgroundColor} background, ${this.font} ${this.fontSize}px${pressedStyle}`\r\n    );\r\n  }\r\n}\r\n\r\n// Flyweight factory\r\nclass ButtonStyleFactory {\r\n  constructor() {\r\n    this.styles = new Map();\r\n  }\r\n  \r\n  getStyle(font, fontSize, backgroundColor, borderStyle) {\r\n    const key = `${font}-${fontSize}-${backgroundColor}-${borderStyle}`;\r\n    \r\n    if (!this.styles.has(key)) {\r\n      console.log(`\ud83c\udfa8 Creating new button style: ${key}`);\r\n      this.styles.set(key, new ButtonStyle(font, fontSize, backgroundColor, borderStyle));\r\n    }\r\n    \r\n    return this.styles.get(key);\r\n  }\r\n  \r\n  getStyleCount() {\r\n    return this.styles.size;\r\n  }\r\n}\r\n\r\n// Context class for individual buttons\r\nclass Button {\r\n  constructor(text, x, y, width, height, style) {\r\n    // Extrinsic state\r\n    this.text = text;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.isPressed = false;\r\n    \r\n    // Reference to flyweight\r\n    this.style = style;\r\n  }\r\n  \r\n  render() {\r\n    this.style.render(this.text, this.x, this.y, this.width, this.height, this.isPressed);\r\n  }\r\n  \r\n  press() {\r\n    this.isPressed = true;\r\n    console.log(`\ud83d\udc46 Button "${this.text}" pressed`);\r\n    this.render();\r\n  }\r\n  \r\n  release() {\r\n    this.isPressed = false;\r\n    console.log(`\ud83d\udc46 Button "${this.text}" released`);\r\n    this.render();\r\n  }\r\n}\r\n\r\n// UI Manager\r\nclass UIManager {\r\n  constructor() {\r\n    this.buttons = [];\r\n    this.styleFactory = new ButtonStyleFactory();\r\n  }\r\n  \r\n  createButton(text, x, y, width, height, font, fontSize, backgroundColor, borderStyle) {\r\n    const style = this.styleFactory.getStyle(font, fontSize, backgroundColor, borderStyle);\r\n    const button = new Button(text, x, y, width, height, style);\r\n    this.buttons.push(button);\r\n    \r\n    console.log(`\u2795 Created button: "${text}"`);\r\n    return button;\r\n  }\r\n  \r\n  renderAll() {\r\n    console.log("\ud83d\uddbc\ufe0f Rendering all UI buttons:");\r\n    this.buttons.forEach((button, index) => {\r\n      console.log(`Button ${index + 1}:`);\r\n      button.render();\r\n    });\r\n  }\r\n  \r\n  getStats() {\r\n    return {\r\n      totalButtons: this.buttons.length,\r\n      uniqueStyles: this.styleFactory.getStyleCount()\r\n    };\r\n  }\r\n}\r\n\r\n// Usage\r\nconsole.log("=== UI Button Flyweight Demo ===\\n");\r\n\r\nconst uiManager = new UIManager();\r\n\r\nconsole.log("Creating UI buttons:");\r\nconsole.log("-".repeat(20));\r\n\r\n// Create buttons with shared styles\r\nconst okBtn = uiManager.createButton("OK", 10, 10, 80, 30, "Arial", 14, "blue", "solid");\r\nconst cancelBtn = uiManager.createButton("Cancel", 100, 10, 80, 30, "Arial", 14, "gray", "solid");\r\nconst saveBtn = uiManager.createButton("Save", 10, 50, 80, 30, "Arial", 14, "green", "solid");\r\nconst deleteBtn = uiManager.createButton("Delete", 100, 50, 80, 30, "Arial", 14, "red", "solid");\r\n\r\n// Create more buttons that reuse styles\r\nconst yesBtn = uiManager.createButton("Yes", 10, 90, 80, 30, "Arial", 14, "blue", "solid"); // Reuses blue style\r\nconst noBtn = uiManager.createButton("No", 100, 90, 80, 30, "Arial", 14, "gray", "solid"); // Reuses gray style\r\n\r\nconsole.log("\\nButton statistics:");\r\nconsole.log("-".repeat(17));\r\nconst stats = uiManager.getStats();\r\nconsole.log(`Total buttons: ${stats.totalButtons}`);\r\nconsole.log(`Unique styles (flyweights): ${stats.uniqueStyles}`);\r\n\r\nconsole.log("\\nTesting button interactions:");\r\nconsole.log("-".repeat(27));\r\nokBtn.press();\r\nokBtn.release();\r\n\r\ndeleteBtn.press();\r\ndeleteBtn.release();\r\n\r\nconsole.log("\\nMemory savings:");\r\nconsole.log("-".repeat(14));\r\nconsole.log(`Without Flyweight: ${stats.totalButtons} \xd7 (font + fontSize + backgroundColor + borderStyle) objects`);\r\nconsole.log(`With Flyweight: ${stats.totalButtons} button contexts + ${stats.uniqueStyles} shared style objects`);\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-pros",children:"\u2705 Pros"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Memory Efficiency"}),": Dramatically reduces memory usage with many similar objects"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Performance"}),": Faster object creation by reusing flyweights"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Centralized Management"}),": Factory centralizes flyweight creation and management"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Scalability"}),": Handles large numbers of objects efficiently"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-cons",children:"\u274c Cons"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Complexity"}),": Increases code complexity by separating intrinsic and extrinsic state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Runtime Costs"}),": May introduce computational overhead to calculate extrinsic state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Context Management"}),": Clients must manage and pass extrinsic state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Limited Applicability"}),": Only beneficial when you have many similar objects"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-when-to-use",children:"\ud83c\udfaf When to Use"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Large Number of Objects"}),": When you need to create a massive number of similar objects"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"High Memory Usage"}),": When object creation is consuming too much memory"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Shared State"}),": When objects share common state that can be extracted"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Performance Critical"}),": When object creation performance is critical"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-implementation-tips",children:"\ud83d\udd04 Implementation Tips"}),"\n",(0,s.jsxs)(t.h3,{id:"1-identify-intrinsic-vs-extrinsic-state",children:["1. ",(0,s.jsx)(t.strong,{children:"Identify Intrinsic vs Extrinsic State"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Intrinsic: shared among many objects (store in flyweight)\r\n// Extrinsic: unique per object (pass as parameters)\r\n\r\nclass FontFlyweight {\r\n  constructor(family, size, style) {\r\n    this.family = family; // Intrinsic\r\n    this.size = size;     // Intrinsic  \r\n    this.style = style;   // Intrinsic\r\n  }\r\n  \r\n  render(text, color, position) { // Extrinsic parameters\r\n    // Render with intrinsic + extrinsic state\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(t.h3,{id:"2-factory-pattern-integration",children:["2. ",(0,s.jsx)(t.strong,{children:"Factory Pattern Integration"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"class FlyweightFactory {\r\n  constructor() {\r\n    this.flyweights = new Map();\r\n    this.creationCount = 0;\r\n  }\r\n  \r\n  getFlyweight(key) {\r\n    if (!this.flyweights.has(key)) {\r\n      this.flyweights.set(key, this.createFlyweight(key));\r\n      this.creationCount++;\r\n    }\r\n    return this.flyweights.get(key);\r\n  }\r\n  \r\n  getStats() {\r\n    return {\r\n      totalFlyweights: this.flyweights.size,\r\n      creationCount: this.creationCount\r\n    };\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"-related-patterns",children:"\ud83d\udd17 Related Patterns"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Factory Method"}),": Often used together to create flyweights"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Composite"}),": Can use Flyweight to share leaf components"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State"}),": Flyweights can represent different states efficiently"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Strategy"}),": Strategies can be implemented as flyweights if they don't maintain state"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://refactoring.guru/design-patterns/flyweight",children:"Flyweight Pattern - Refactoring.Guru"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four Design Patterns"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.dofactory.com/javascript/design-patterns/flyweight",children:"JavaScript Flyweight Pattern Examples"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);